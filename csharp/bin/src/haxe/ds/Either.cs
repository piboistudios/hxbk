// Generated by Haxe 4.0.0-rc.2+77068e10c

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.ds {
	public class Either : global::haxe.lang.Enum {
		
		protected Either(int index) : base(index) {
		}
		
		
		public static global::haxe.ds.Either Left(object v) {
			return new global::haxe.ds.Either_Left(v);
		}
		
		
		public static global::haxe.ds.Either Right(object v) {
			return new global::haxe.ds.Either_Right(v);
		}
		
		
		protected static readonly string[] __hx_constructs = new string[]{"Left", "Right"};
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.ds {
	public sealed class Either_Left : global::haxe.ds.Either {
		
		public Either_Left(object v) : base(0) {
			this.v = v;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.v});
		}
		
		
		public override string getTag() {
			return "Left";
		}
		
		
		public override int GetHashCode() {
			return global::haxe.lang.Enum.paramsGetHashCode(0, new object[]{this.v});
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::haxe.ds.Either_Left en = ( other as global::haxe.ds.Either_Left );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.v) ), ((object) (en.v) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("Left", new object[]{this.v});
		}
		
		
		public readonly object v;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.ds {
	public sealed class Either_Right : global::haxe.ds.Either {
		
		public Either_Right(object v) : base(1) {
			this.v = v;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.v});
		}
		
		
		public override string getTag() {
			return "Right";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(1, new object[]{this.v});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::haxe.ds.Either_Right en = ( other as global::haxe.ds.Either_Right );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.v) ), ((object) (en.v) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("Right", new object[]{this.v});
		}
		
		
		public readonly object v;
		
	}
}


