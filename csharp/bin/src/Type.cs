// Generated by Haxe 4.0.0-rc.2+77068e10c

#pragma warning disable 109, 114, 219, 429, 168, 162
public class ValueType : global::haxe.lang.Enum {
	
	protected ValueType(int index) : base(index) {
	}
	
	
	public static readonly global::ValueType TNull = new global::ValueType_TNull();
	
	public static readonly global::ValueType TInt = new global::ValueType_TInt();
	
	public static readonly global::ValueType TFloat = new global::ValueType_TFloat();
	
	public static readonly global::ValueType TBool = new global::ValueType_TBool();
	
	public static readonly global::ValueType TObject = new global::ValueType_TObject();
	
	public static readonly global::ValueType TFunction = new global::ValueType_TFunction();
	
	public static global::ValueType TClass(global::System.Type c) {
		return new global::ValueType_TClass(c);
	}
	
	
	public static global::ValueType TEnum(global::System.Type e) {
		return new global::ValueType_TEnum(e);
	}
	
	
	public static readonly global::ValueType TUnknown = new global::ValueType_TUnknown();
	
	protected static readonly string[] __hx_constructs = new string[]{"TNull", "TInt", "TFloat", "TBool", "TObject", "TFunction", "TClass", "TEnum", "TUnknown"};
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class ValueType_TNull : global::ValueType {
	
	public ValueType_TNull() : base(0) {
	}
	
	
	public override string getTag() {
		return "TNull";
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class ValueType_TInt : global::ValueType {
	
	public ValueType_TInt() : base(1) {
	}
	
	
	public override string getTag() {
		return "TInt";
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class ValueType_TFloat : global::ValueType {
	
	public ValueType_TFloat() : base(2) {
	}
	
	
	public override string getTag() {
		return "TFloat";
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class ValueType_TBool : global::ValueType {
	
	public ValueType_TBool() : base(3) {
	}
	
	
	public override string getTag() {
		return "TBool";
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class ValueType_TObject : global::ValueType {
	
	public ValueType_TObject() : base(4) {
	}
	
	
	public override string getTag() {
		return "TObject";
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class ValueType_TFunction : global::ValueType {
	
	public ValueType_TFunction() : base(5) {
	}
	
	
	public override string getTag() {
		return "TFunction";
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class ValueType_TClass : global::ValueType {
	
	public ValueType_TClass(global::System.Type c) : base(6) {
		this.c = c;
	}
	
	
	public override global::Array<object> getParams() {
		return new global::Array<object>(new object[]{this.c});
	}
	
	
	public override string getTag() {
		return "TClass";
	}
	
	
	public override int GetHashCode() {
		unchecked {
			return global::haxe.lang.Enum.paramsGetHashCode(6, new object[]{this.c});
		}
	}
	
	
	public override bool Equals(object other) {
		if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
			return true;
		}
		
		global::ValueType_TClass en = ( other as global::ValueType_TClass );
		if (( en == null )) {
			return false;
		}
		
		if ( ! (global::Type.enumEq<object>(((object) (this.c) ), ((object) (en.c) ))) ) {
			return false;
		}
		
		return true;
	}
	
	
	public override string toString() {
		return global::haxe.lang.Enum.paramsToString("TClass", new object[]{this.c});
	}
	
	
	public readonly global::System.Type c;
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class ValueType_TEnum : global::ValueType {
	
	public ValueType_TEnum(global::System.Type e) : base(7) {
		this.e = e;
	}
	
	
	public override global::Array<object> getParams() {
		return new global::Array<object>(new object[]{this.e});
	}
	
	
	public override string getTag() {
		return "TEnum";
	}
	
	
	public override int GetHashCode() {
		unchecked {
			return global::haxe.lang.Enum.paramsGetHashCode(7, new object[]{this.e});
		}
	}
	
	
	public override bool Equals(object other) {
		if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
			return true;
		}
		
		global::ValueType_TEnum en = ( other as global::ValueType_TEnum );
		if (( en == null )) {
			return false;
		}
		
		if ( ! (global::Type.enumEq<object>(((object) (this.e) ), ((object) (en.e) ))) ) {
			return false;
		}
		
		return true;
	}
	
	
	public override string toString() {
		return global::haxe.lang.Enum.paramsToString("TEnum", new object[]{this.e});
	}
	
	
	public readonly global::System.Type e;
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class ValueType_TUnknown : global::ValueType {
	
	public ValueType_TUnknown() : base(8) {
	}
	
	
	public override string getTag() {
		return "TUnknown";
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public class Type : global::haxe.lang.HxObject {
	
	public Type(global::haxe.lang.EmptyObject empty) {
	}
	
	
	public Type() {
		global::Type.__hx_ctor__Type(this);
	}
	
	
	protected static void __hx_ctor__Type(global::Type __hx_this) {
	}
	
	
	public static global::System.Type getClass<T>(T o) {
		if (( ( global::System.Object.ReferenceEquals(((object) (o) ), default(object)) || ( o is global::haxe.lang.DynamicObject ) ) || ( o is global::System.Type ) )) {
			return null;
		}
		
		return ((global::System.Type) (((object) (o) ).GetType()) );
	}
	
	
	public static string getClassName(global::System.Type c) {
		unchecked {
			string ret = ( ((global::System.Type) (c) ) as global::System.Reflection.MemberInfo ).ToString();
			switch (ret) {
				case "System.Boolean":
				{
					return "Bool";
				}
				
				
				case "System.Double":
				{
					return "Float";
				}
				
				
				case "System.Int32":
				{
					return "Int";
				}
				
				
				case "System.Object":
				{
					return "Dynamic";
				}
				
				
				case "System.String":
				{
					return "String";
				}
				
				
				case "System.Type":
				{
					return "Class";
				}
				
				
				default:
				{
					return (((global::System.String) (((object) (ret) )) )).Split(((char[]) (new char[]{((char) (96) )}) ))[0];
				}
				
			}
			
		}
	}
	
	
	public static string getEnumName(global::System.Type e) {
		string ret = ( ((global::System.Type) (e) ) as global::System.Reflection.MemberInfo ).ToString();
		return ret;
	}
	
	
	public static global::System.Type resolveClass(string name) {
		global::System.Type t = global::System.Type.GetType(((string) (name) ));
		if (global::System.Object.ReferenceEquals(((object) (t) ), default(object))) {
			global::System.Collections.IEnumerator all = ( global::System.AppDomain.CurrentDomain.GetAssemblies() as global::System.Array ).GetEnumerator();
			while (all.MoveNext()) {
				global::System.Reflection.Assembly t2 = ((global::System.Reflection.Assembly) (all.Current) );
				t = t2.GetType(((string) (name) ));
				if ( ! (global::System.Object.ReferenceEquals(((object) (t) ), default(object))) ) {
					break;
				}
				
			}
			
		}
		
		if (global::System.Object.ReferenceEquals(((object) (t) ), default(object))) {
			switch (name) {
				case "Bool":
				{
					return ((global::System.Type) (typeof(bool)) );
				}
				
				
				case "Class":
				{
					return ((global::System.Type) (typeof(global::System.Type)) );
				}
				
				
				case "Dynamic":
				{
					return ((global::System.Type) (typeof(object)) );
				}
				
				
				case "Float":
				{
					return ((global::System.Type) (typeof(double)) );
				}
				
				
				case "Int":
				{
					return ((global::System.Type) (typeof(int)) );
				}
				
				
				case "String":
				{
					return ((global::System.Type) (typeof(string)) );
				}
				
				
				default:
				{
					return null;
				}
				
			}
			
		}
		else if (( t.IsInterface && (((global::System.Type) (typeof(global::haxe.lang.IGenericObject)) )).IsAssignableFrom(((global::System.Type) (t) )) )) {
			{
				object[] _g_arr = ( t as global::System.Reflection.MemberInfo ).GetCustomAttributes(((bool) (true) ));
				uint _g_idx = ((uint) (0) );
				while (((bool) (( _g_idx < ( _g_arr as global::System.Array ).Length )) )) {
					object attr = ((object) (_g_arr[((int) (_g_idx++) )]) );
					global::haxe.lang.GenericInterface g = ((global::haxe.lang.GenericInterface) (( ((object) (attr) ) as global::haxe.lang.GenericInterface )) );
					if (( g != null )) {
						return ((global::System.Type) (g.generic) );
					}
					
				}
				
			}
			
			return ((global::System.Type) (t) );
		}
		else {
			return ((global::System.Type) (t) );
		}
		
	}
	
	
	public static global::System.Type resolveEnum(string name) {
		global::System.Type t = global::Type.resolveClass(name);
		if ((  ! (global::System.Object.ReferenceEquals(((object) (t) ), default(object)))  && (( t.BaseType.Equals(((global::System.Type) (typeof(global::System.Enum)) )) || ((global::System.Type) (typeof(global::haxe.lang.Enum)) ).IsAssignableFrom(((global::System.Type) (t) )) )) )) {
			return ((global::System.Type) (t) );
		}
		
		return null;
	}
	
	
	protected static readonly object[] __createEmptyInstance_EMPTY_ARGS = new object[]{((object) (global::haxe.lang.EmptyObject.EMPTY) )};
	
	public static T createEmptyInstance<T>(global::System.Type cl) {
		global::System.Type t = ((global::System.Type) (cl) );
		if (global::System.Object.ReferenceEquals(((object) (t) ), ((object) (typeof(string)) ))) {
			return (T)(object)"";
		}
		
		object res = null;
		try {
			res = global::System.Activator.CreateInstance(((global::System.Type) (t) ), ((object[]) (global::Type.__createEmptyInstance_EMPTY_ARGS) ));
		}
		catch (global::System.MissingMemberException _){
			global::haxe.lang.Exceptions.exception = _;
			res = global::System.Activator.CreateInstance(((global::System.Type) (t) ));
		}
		
		
		return (T)res;
	}
	
	
	public static T createEnum<T>(global::System.Type e, string constr, global::Array @params) {
		if (( ( @params == null ) || ( ((int) (global::haxe.lang.Runtime.getField_f(@params, "length", 520590566, true)) ) == 0 ) )) {
			T ret = global::haxe.lang.Runtime.genericCast<T>(global::haxe.lang.Runtime.slowGetField(e, constr, true));
			if (( ((object) (ret) ) is global::haxe.lang.Function )) {
				throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Constructor ", constr), " needs parameters"));
			}
			
			return ret;
		}
		else {
			object[] ret1 = new object[((int) (global::haxe.lang.Runtime.getField_f(@params, "length", 520590566, true)) )];
			global::cs.Lib.p_nativeArray<object>(((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (@params) ))) ), ((global::System.Array) (ret1) ));
			return global::haxe.lang.Runtime.genericCast<T>(global::haxe.lang.Runtime.slowCallField(e, constr, ret1));
		}
		
	}
	
	
	public static global::Array<object> getInstanceFields(global::System.Type c) {
		unchecked {
			if (global::haxe.lang.Runtime.refEq(c, typeof(string))) {
				return global::haxe.lang.StringRefl.fields;
			}
			
			global::System.Type c1 = ((global::System.Type) (c) );
			global::Array<object> ret = new global::Array<object>(new object[]{});
			global::System.Reflection.BindingFlags this1 = global::System.Reflection.BindingFlags.Public;
			global::System.Reflection.BindingFlags this2 = ((global::System.Reflection.BindingFlags) (( ((global::System.Reflection.BindingFlags) (this1) ) | ((global::System.Reflection.BindingFlags) (global::System.Reflection.BindingFlags.Instance) ) )) );
			global::System.Reflection.BindingFlags this3 = ((global::System.Reflection.BindingFlags) (( ((global::System.Reflection.BindingFlags) (this2) ) | ((global::System.Reflection.BindingFlags) (global::System.Reflection.BindingFlags.FlattenHierarchy) ) )) );
			global::System.Reflection.MemberInfo[] mis = c1.GetMembers(((global::System.Reflection.BindingFlags) (this3) ));
			{
				int _g = 0;
				int _g1 = ( mis as global::System.Array ).Length;
				while (( _g < _g1 )) {
					int i = _g++;
					global::System.Reflection.MemberInfo i1 = mis[i];
					if (( i1 is global::System.Reflection.PropertyInfo )) {
						continue;
					}
					
					string n = i1.Name;
					if ((  ! (n.StartsWith("__hx_"))  && ( (( (((bool) (( ((uint) (0) ) < n.Length )) )) ? (((int) (n[0]) )) : (-1) )) != 46 ) )) {
						switch (n) {
							case "Equals":
							case "GetHashCode":
							case "GetType":
							case "ToString":
							{
								break;
							}
							
							
							default:
							{
								ret.push(n);
								break;
							}
							
						}
						
					}
					
				}
				
			}
			
			return ret;
		}
	}
	
	
	public static global::Array<object> getClassFields(global::System.Type c) {
		if (global::System.Object.ReferenceEquals(((object) (c) ), ((object) (typeof(string)) ))) {
			return new global::Array<object>(new object[]{"fromCharCode"});
		}
		
		global::Array<object> ret = new global::Array<object>(new object[]{});
		global::System.Reflection.BindingFlags this1 = global::System.Reflection.BindingFlags.Public;
		global::System.Reflection.BindingFlags this2 = ((global::System.Reflection.BindingFlags) (( ((global::System.Reflection.BindingFlags) (this1) ) | ((global::System.Reflection.BindingFlags) (global::System.Reflection.BindingFlags.Static) ) )) );
		global::System.Reflection.MemberInfo[] infos = ((global::System.Type) (c) ).GetMembers(((global::System.Reflection.BindingFlags) (this2) ));
		{
			int _g = 0;
			int _g1 = ( infos as global::System.Array ).Length;
			while (( _g < _g1 )) {
				int i = _g++;
				string name = infos[i].Name;
				if ( ! (name.StartsWith("__hx_")) ) {
					ret.push(name);
				}
				
			}
			
		}
		
		return ret;
	}
	
	
	public static global::Array<object> getEnumConstructs(global::System.Type e) {
		global::System.Type t = ((global::System.Type) (( ((object) (e) ) as global::System.Type )) );
		global::System.Reflection.BindingFlags this1 = global::System.Reflection.BindingFlags.Static;
		global::System.Reflection.BindingFlags this2 = ((global::System.Reflection.BindingFlags) (( ((global::System.Reflection.BindingFlags) (this1) ) | ((global::System.Reflection.BindingFlags) (global::System.Reflection.BindingFlags.NonPublic) ) )) );
		global::System.Reflection.FieldInfo f = t.GetField(((string) ("__hx_constructs") ), ((global::System.Reflection.BindingFlags) (this2) ));
		if (( f != null )) {
			global::System.Array values = ((global::System.Array) (f.GetValue(default(object))) );
			string[] copy = new string[values.Length];
			global::System.Array.Copy(((global::System.Array) (values) ), ((global::System.Array) (copy) ), ((int) (values.Length) ));
			return new global::Array<object>(((object[]) (copy) ));
		}
		else {
			return new global::Array<object>(((object[]) (global::System.Enum.GetNames(((global::System.Type) (t) ))) ));
		}
		
	}
	
	
	public static global::ValueType @typeof(object v) {
		if (( v == null )) {
			return global::ValueType.TNull;
		}
		
		global::System.Type t = ((global::System.Type) (( v as global::System.Type )) );
		if ( ! (global::System.Object.ReferenceEquals(((object) (t) ), default(object))) ) {
			return global::ValueType.TObject;
		}
		
		t = ((global::System.Type) (v.GetType()) );
		if (t.IsEnum) {
			return global::ValueType.TEnum(((global::System.Type) (t) ));
		}
		
		if (( v is global::haxe.lang.Enum )) {
			return global::ValueType.TEnum(((global::System.Type) (t.BaseType) ));
		}
		
		if (t.IsValueType) {
			global::System.IConvertible vc = ((global::System.IConvertible) (v) );
			if (( vc != null )) {
				switch (vc.GetTypeCode()) {
					case global::System.TypeCode.Boolean:
					{
						return global::ValueType.TBool;
					}
					
					
					case global::System.TypeCode.Int32:
					{
						return global::ValueType.TInt;
					}
					
					
					case global::System.TypeCode.Double:
					{
						double d = vc.ToDouble(default(global::System.IFormatProvider));
						if (( ( ( d >= global::System.Int32.MinValue ) && ( d <= global::System.Int32.MaxValue ) ) && ( d == vc.ToInt32(default(global::System.IFormatProvider)) ) )) {
							return global::ValueType.TInt;
						}
						else {
							return global::ValueType.TFloat;
						}
						
					}
					
					
					default:
					{
						return global::ValueType.TClass(((global::System.Type) (t) ));
					}
					
				}
				
			}
			else {
				return global::ValueType.TClass(((global::System.Type) (t) ));
			}
			
		}
		
		if (( v is global::haxe.lang.IHxObject )) {
			if (( v is global::haxe.lang.DynamicObject )) {
				return global::ValueType.TObject;
			}
			
			return global::ValueType.TClass(((global::System.Type) (t) ));
		}
		else if (( v is global::haxe.lang.Function )) {
			return global::ValueType.TFunction;
		}
		else {
			return global::ValueType.TClass(((global::System.Type) (t) ));
		}
		
	}
	
	
	public static bool enumEq<T>(T a, T b) {
		if (global::haxe.lang.Runtime.eq(a, default(T))) {
			return global::haxe.lang.Runtime.eq(b, default(T));
		}
		else if (global::haxe.lang.Runtime.eq(b, default(T))) {
			return false;
		}
		else {
			return a.Equals(b);
		}
		
	}
	
	
	public static string enumConstructor(object e) {
		if (( e is global::System.Enum )) {
			return ( (((global::System.Enum) (e) )) as global::System.ValueType ).ToString();
		}
		else {
			return (((global::haxe.lang.Enum) (e) )).getTag();
		}
		
	}
	
	
	public static global::Array enumParameters(object e) {
		if (( e is global::System.Enum )) {
			return new global::Array<object>(new object[]{});
		}
		else {
			return (((global::haxe.lang.Enum) (e) )).getParams();
		}
		
	}
	
	
	public static int enumIndex(object e) {
		if (( e is global::System.Enum )) {
			global::System.Array values = global::System.Enum.GetValues(((global::System.Type) (((object) (e) ).GetType()) ));
			return global::System.Array.IndexOf(((global::System.Array) (values) ), ((object) (e) ));
		}
		else {
			return (((global::haxe.lang.Enum) (e) ))._hx_index;
		}
		
	}
	
	
}


