// Generated by Haxe 4.0.0-rc.2+77068e10c

#pragma warning disable 109, 114, 219, 429, 168, 162
public class StringTools : global::haxe.lang.HxObject {
	
	static StringTools() {
		unchecked {
			global::StringTools.winMetaCharacters = new global::Array<int>(new int[]{32, 40, 41, 37, 33, 94, 34, 60, 62, 38, 124, 10, 13, 44, 59});
		}
	}
	
	
	public StringTools(global::haxe.lang.EmptyObject empty) {
	}
	
	
	public StringTools() {
		global::StringTools.__hx_ctor__StringTools(this);
	}
	
	
	protected static void __hx_ctor__StringTools(global::StringTools __hx_this) {
	}
	
	
	public static string lpad(string s, string c, int l) {
		if (( c.Length <= 0 )) {
			return s;
		}
		
		global::System.Text.StringBuilder buf_b = new global::System.Text.StringBuilder();
		l -= s.Length;
		while (( buf_b.Length < l )) {
			buf_b.Append(((string) (global::Std.@string(c)) ));
		}
		
		buf_b.Append(((string) (global::Std.@string(s)) ));
		return buf_b.ToString();
	}
	
	
	public static global::Array<int> winMetaCharacters;
	
	public static string quoteWinArg(string argument, bool escapeMetaCharacters) {
		unchecked {
			if ( ! (new global::EReg("^[^ \t\\\\\"]+$", "").match(argument)) ) {
				global::System.Text.StringBuilder result_b = new global::System.Text.StringBuilder();
				bool needquote = ( ( ( global::haxe.lang.StringExt.indexOf(argument, " ", default(global::haxe.lang.Null<int>)) != -1 ) || ( global::haxe.lang.StringExt.indexOf(argument, "\t", default(global::haxe.lang.Null<int>)) != -1 ) ) || ( argument == "" ) );
				if (needquote) {
					result_b.Append(((string) ("\"") ));
				}
				
				global::StringBuf bs_buf = new global::StringBuf();
				{
					int _g = 0;
					int _g1 = argument.Length;
					while (( _g < _g1 )) {
						int i = _g++;
						{
							global::haxe.lang.Null<int> _g2 = global::haxe.lang.StringExt.charCodeAt(argument, i);
							if ( ! (_g2.hasValue) ) {
								global::haxe.lang.Null<int> c = _g2;
								{
									if (( bs_buf.b.Length > 0 )) {
										result_b.Append(((string) (global::Std.@string(bs_buf.b.ToString())) ));
										bs_buf = new global::StringBuf();
									}
									
									result_b.Append(((char) ((c).@value) ));
								}
								
							}
							else {
								switch (((_g2)).@value) {
									case 34:
									{
										string bs = bs_buf.b.ToString();
										result_b.Append(((string) (global::Std.@string(bs)) ));
										result_b.Append(((string) (global::Std.@string(bs)) ));
										bs_buf = new global::StringBuf();
										result_b.Append(((string) ("\\\"") ));
										break;
									}
									
									
									case 92:
									{
										bs_buf.b.Append(((string) ("\\") ));
										break;
									}
									
									
									default:
									{
										global::haxe.lang.Null<int> c1 = _g2;
										{
											if (( bs_buf.b.Length > 0 )) {
												result_b.Append(((string) (global::Std.@string(bs_buf.b.ToString())) ));
												bs_buf = new global::StringBuf();
											}
											
											result_b.Append(((char) ((c1).@value) ));
										}
										
										break;
									}
									
								}
								
							}
							
						}
						
					}
					
				}
				
				result_b.Append(((string) (global::Std.@string(bs_buf.b.ToString())) ));
				if (needquote) {
					result_b.Append(((string) (global::Std.@string(bs_buf.b.ToString())) ));
					result_b.Append(((string) ("\"") ));
				}
				
				argument = result_b.ToString();
			}
			
			if (escapeMetaCharacters) {
				global::System.Text.StringBuilder result_b1 = new global::System.Text.StringBuilder();
				{
					int _g3 = 0;
					int _g11 = argument.Length;
					while (( _g3 < _g11 )) {
						int i1 = _g3++;
						global::haxe.lang.Null<int> c2 = global::haxe.lang.StringExt.charCodeAt(argument, i1);
						if (( global::StringTools.winMetaCharacters.indexOf((c2).@value, default(global::haxe.lang.Null<int>)) >= 0 )) {
							result_b1.Append(((char) (94) ));
						}
						
						result_b1.Append(((char) ((c2).@value) ));
					}
					
				}
				
				return result_b1.ToString();
			}
			else {
				return argument;
			}
			
		}
	}
	
	
}


