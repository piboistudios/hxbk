// Generated by Haxe 4.0.0-rc.2+77068e10c

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class Runner : global::haxe.lang.HxObject {
		
		public Runner(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Runner() {
			global::tink.testrunner.Runner.__hx_ctor_tink_testrunner_Runner(this);
		}
		
		
		protected static void __hx_ctor_tink_testrunner_Runner(global::tink.testrunner.Runner __hx_this) {
		}
		
		
		public static void exit(global::Array<object> result) {
			global::System.Environment.Exit(((int) (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(global::tink.testrunner._Runner.BatchResult_Impl_.summary(result), "failures", 69718249, true)) ))) ).length) ));
		}
		
		
		public static global::tink.core._Future.FutureObject<object> run(global::Array<object> batch, global::tink.testrunner.Reporter reporter, global::tink.testrunner.TimerManager timers) {
			if (( reporter == null )) {
				reporter = new global::tink.testrunner.BasicReporter(default(global::tink.testrunner.Formatter));
			}
			
			if (( timers == null )) {
				timers = new global::tink.testrunner.HaxeTimerManager();
			}
			
			bool includeMode = false;
			{
				int _g = 0;
				global::Array<object> _g1 = ((global::Array<object>) (batch) );
				while (( _g < _g1.length )) {
					global::tink.testrunner.SuiteObject s = ((global::tink.testrunner.SuiteObject) (_g1[_g]) );
					 ++ _g;
					if (includeMode) {
						break;
					}
					
					{
						int _g2 = 0;
						global::Array<object> _g11 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(s, "cases", 1092664259, true)) ))) );
						while (( _g2 < _g11.length )) {
							global::tink.testrunner.CaseObject c = ((global::tink.testrunner.CaseObject) (_g11[_g2]) );
							 ++ _g2;
							if (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(c, "include", 1375141416, true))) {
								includeMode = true;
								break;
							}
							
						}
						
					}
					
				}
				
			}
			
			return global::tink.core._Future.Future_Impl_.async<object>(((global::haxe.lang.Function) (new global::tink.testrunner.Runner_run_43__Fun(timers, reporter, includeMode, batch)) ), default(global::haxe.lang.Null<bool>));
		}
		
		
		public static global::tink.core._Future.FutureObject<object> runSuite(global::tink.testrunner.SuiteObject suite, global::tink.testrunner.Reporter reporter, global::tink.testrunner.TimerManager timers, bool includeMode) {
			return global::tink.core._Future.Future_Impl_.async<object>(((global::haxe.lang.Function) (new global::tink.testrunner.Runner_runSuite_65__Fun(timers, suite, reporter, includeMode)) ), default(global::haxe.lang.Null<bool>));
		}
		
		
		public static global::tink.core._Future.FutureObject<object> runCase(global::tink.testrunner.CaseObject caze, global::tink.testrunner.SuiteObject suite, global::tink.testrunner.Reporter reporter, global::tink.testrunner.TimerManager timers, bool shouldRun) {
			return global::tink.core._Future.Future_Impl_.async<object>(((global::haxe.lang.Function) (new global::tink.testrunner.Runner_runCase_101__Fun(timers, suite, shouldRun, reporter, caze)) ), default(global::haxe.lang.Null<bool>));
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class Runner_run_50__Fun : global::haxe.lang.Function {
		
		public Runner_run_50__Fun(global::Array<object> results, global::tink.testrunner.Reporter reporter, global::haxe.lang.Function[] next) : base(1, 0) {
			this.results = results;
			this.reporter = reporter;
			this.next = next;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			object o = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
			this.results.push(o);
			this.reporter.report(global::tink.testrunner.ReportType.SuiteFinish(o)).handle(global::tink.core._Callback.Callback_Impl_.fromNiladic<object>(((global::haxe.lang.Function) (this.next[0]) )));
			return null;
		}
		
		
		public global::Array<object> results;
		
		public global::tink.testrunner.Reporter reporter;
		
		public global::haxe.lang.Function[] next;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class Runner_run_55__Fun : global::haxe.lang.Function {
		
		public Runner_run_55__Fun(global::haxe.lang.Function f, global::Array<object> a1) : base(0, 0) {
			this.f = f;
			this.a1 = a1;
		}
		
		
		public override object __hx_invoke0_o() {
			this.f.__hx_invoke1_o(default(double), this.a1);
			return null;
		}
		
		
		public global::haxe.lang.Function f;
		
		public global::Array<object> a1;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class Runner_run_47__Fun : global::haxe.lang.Function {
		
		public Runner_run_47__Fun(global::tink.testrunner.TimerManager timers, global::Array<object> results, global::tink.testrunner.Reporter reporter, global::haxe.lang.Function[] next, object iter, bool includeMode, global::haxe.lang.Function cb) : base(0, 0) {
			this.timers = timers;
			this.results = results;
			this.reporter = reporter;
			this.next = next;
			this.iter = iter;
			this.includeMode = includeMode;
			this.cb = cb;
		}
		
		
		public override object __hx_invoke0_o() {
			if (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(this.iter, "hasNext", 407283053, null))) {
				global::tink.testrunner.SuiteObject suite = ((global::tink.testrunner.SuiteObject) (global::haxe.lang.Runtime.callField(this.iter, "next", 1224901875, null)) );
				global::tink.testrunner.Runner.runSuite(suite, this.reporter, this.timers, this.includeMode).handle(new global::tink.testrunner.Runner_run_50__Fun(this.results, this.reporter, this.next));
			}
			else {
				global::tink.core._Future.FutureObject<object> tmp = this.reporter.report(global::tink.testrunner.ReportType.BatchFinish(this.results));
				global::haxe.lang.Function f = this.cb;
				global::Array<object> a1 = this.results;
				tmp.handle(global::tink.core._Callback.Callback_Impl_.fromNiladic<object>(((global::haxe.lang.Function) (new global::tink.testrunner.Runner_run_55__Fun(f, a1)) )));
			}
			
			return null;
		}
		
		
		public global::tink.testrunner.TimerManager timers;
		
		public global::Array<object> results;
		
		public global::tink.testrunner.Reporter reporter;
		
		public global::haxe.lang.Function[] next;
		
		public object iter;
		
		public bool includeMode;
		
		public global::haxe.lang.Function cb;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class Runner_run_44__Fun : global::haxe.lang.Function {
		
		public Runner_run_44__Fun(global::tink.testrunner.TimerManager timers, global::tink.testrunner.Reporter reporter, bool includeMode, global::haxe.lang.Function cb, global::Array<object> batch) : base(1, 0) {
			this.timers = timers;
			this.reporter = reporter;
			this.includeMode = includeMode;
			this.cb = cb;
			this.batch = batch;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::tink.core.TinkNoise _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.TinkNoise) (((object) (__fn_float1) )) )) : (((global::tink.core.TinkNoise) (__fn_dyn1) )) );
			object iter = ((object) (new global::_Array.ArrayIterator<object>(((global::Array<object>) (this.batch) ))) );
			global::Array<object> results = new global::Array<object>(new object[]{});
			global::haxe.lang.Function[] next = new global::haxe.lang.Function[]{null};
			next[0] = new global::tink.testrunner.Runner_run_47__Fun(this.timers, results, this.reporter, next, iter, this.includeMode, this.cb);
			next[0].__hx_invoke0_o();
			return null;
		}
		
		
		public global::tink.testrunner.TimerManager timers;
		
		public global::tink.testrunner.Reporter reporter;
		
		public bool includeMode;
		
		public global::haxe.lang.Function cb;
		
		public global::Array<object> batch;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class Runner_run_43__Fun : global::haxe.lang.Function {
		
		public Runner_run_43__Fun(global::tink.testrunner.TimerManager timers, global::tink.testrunner.Reporter reporter, bool includeMode, global::Array<object> batch) : base(1, 0) {
			this.timers = timers;
			this.reporter = reporter;
			this.includeMode = includeMode;
			this.batch = batch;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::haxe.lang.Function cb = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (((global::haxe.lang.Function) (__fn_dyn1) )) );
			this.reporter.report(global::tink.testrunner.ReportType.BatchStart).handle(new global::tink.testrunner.Runner_run_44__Fun(this.timers, this.reporter, this.includeMode, cb, this.batch));
			return null;
		}
		
		
		public global::tink.testrunner.TimerManager timers;
		
		public global::tink.testrunner.Reporter reporter;
		
		public bool includeMode;
		
		public global::Array<object> batch;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class Runner_runSuite_70__Fun : global::haxe.lang.Function {
		
		public Runner_runSuite_70__Fun(global::tink.testrunner.SuiteObject suite, bool hasCases) : base(0, 0) {
			this.suite = suite;
			this.hasCases = hasCases;
		}
		
		
		public override object __hx_invoke0_o() {
			if (this.hasCases) {
				return this.suite.setup();
			}
			else {
				return global::tink.core._Promise.Promise_Impl_.NOISE;
			}
			
		}
		
		
		public global::tink.testrunner.SuiteObject suite;
		
		public bool hasCases;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class Runner_runSuite_71__Fun : global::haxe.lang.Function {
		
		public Runner_runSuite_71__Fun(global::tink.testrunner.SuiteObject suite, bool hasCases) : base(0, 0) {
			this.suite = suite;
			this.hasCases = hasCases;
		}
		
		
		public override object __hx_invoke0_o() {
			if (this.hasCases) {
				return this.suite.teardown();
			}
			else {
				return global::tink.core._Promise.Promise_Impl_.NOISE;
			}
			
		}
		
		
		public global::tink.testrunner.SuiteObject suite;
		
		public bool hasCases;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class Runner_runSuite_78__Fun : global::haxe.lang.Function {
		
		public Runner_runSuite_78__Fun(global::Array<object> results, global::haxe.lang.Function[] next) : base(1, 0) {
			this.results = results;
			this.next = next;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			object r = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
			this.results.push(r);
			this.next[0].__hx_invoke0_o();
			return null;
		}
		
		
		public global::Array<object> results;
		
		public global::haxe.lang.Function[] next;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class Runner_runSuite_83__Fun : global::haxe.lang.Function {
		
		public Runner_runSuite_83__Fun(global::tink.testrunner.SuiteObject suite, global::Array<object> results, global::haxe.lang.Function cb) : base(1, 0) {
			this.suite = suite;
			this.results = results;
			this.cb = cb;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::tink.core.Outcome o = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.Outcome) (((object) (__fn_float1) )) )) : (((global::tink.core.Outcome) (__fn_dyn1) )) );
				global::tink.testrunner.SuiteResultType tmp1 = null;
				switch (o._hx_index) {
					case 0:
					{
						tmp1 = global::tink.testrunner.SuiteResultType.Success(this.results);
						break;
					}
					
					
					case 1:
					{
						global::tink.core.TypedError e = ((global::tink.core.TypedError) (( o as global::tink.core.Outcome_Failure ).failure) );
						tmp1 = global::tink.testrunner.SuiteResultType.TeardownFailed(e, this.results);
						break;
					}
					
					
				}
				
				object __temp_stmt2 = null;
				{
					object __temp_odecl1 = global::haxe.lang.Runtime.getField(this.suite, "info", 1169897582, true);
					__temp_stmt2 = new global::haxe.lang.DynamicObject(new int[]{142895325, 1169897582}, new object[]{tmp1, __temp_odecl1}, new int[]{}, new double[]{});
				}
				
				this.cb.__hx_invoke1_o(default(double), __temp_stmt2);
				return null;
			}
		}
		
		
		public global::tink.testrunner.SuiteObject suite;
		
		public global::Array<object> results;
		
		public global::haxe.lang.Function cb;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class Runner_runSuite_75__Fun : global::haxe.lang.Function {
		
		public Runner_runSuite_75__Fun(global::tink.testrunner.TimerManager timers, global::haxe.lang.Function teardown, global::tink.testrunner.SuiteObject suite, global::Array<object> results, global::tink.testrunner.Reporter reporter, global::haxe.lang.Function[] next, object iter, bool includeMode, global::haxe.lang.Function cb) : base(0, 0) {
			this.timers = timers;
			this.teardown = teardown;
			this.suite = suite;
			this.results = results;
			this.reporter = reporter;
			this.next = next;
			this.iter = iter;
			this.includeMode = includeMode;
			this.cb = cb;
		}
		
		
		public override object __hx_invoke0_o() {
			if (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(this.iter, "hasNext", 407283053, null))) {
				global::tink.testrunner.CaseObject caze = ((global::tink.testrunner.CaseObject) (global::haxe.lang.Runtime.callField(this.iter, "next", 1224901875, null)) );
				bool tmp = global::tink.testrunner._Case.Case_Impl_.shouldRun(caze, this.includeMode);
				global::tink.testrunner.Runner.runCase(caze, this.suite, this.reporter, this.timers, tmp).handle(new global::tink.testrunner.Runner_runSuite_78__Fun(this.results, this.next));
			}
			else {
				((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (this.teardown.__hx_invoke0_o()) ))) ).handle(new global::tink.testrunner.Runner_runSuite_83__Fun(this.suite, this.results, this.cb));
			}
			
			return null;
		}
		
		
		public global::tink.testrunner.TimerManager timers;
		
		public global::haxe.lang.Function teardown;
		
		public global::tink.testrunner.SuiteObject suite;
		
		public global::Array<object> results;
		
		public global::tink.testrunner.Reporter reporter;
		
		public global::haxe.lang.Function[] next;
		
		public object iter;
		
		public bool includeMode;
		
		public global::haxe.lang.Function cb;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class Runner_runSuite_92__Fun : global::haxe.lang.Function {
		
		public Runner_runSuite_92__Fun(global::tink.testrunner.SuiteObject suite, global::haxe.lang.Function[] next, global::haxe.lang.Function cb) : base(1, 0) {
			this.suite = suite;
			this.next = next;
			this.cb = cb;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::tink.core.Outcome o1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.Outcome) (((object) (__fn_float1) )) )) : (((global::tink.core.Outcome) (__fn_dyn1) )) );
				switch (o1._hx_index) {
					case 0:
					{
						this.next[0].__hx_invoke0_o();
						break;
					}
					
					
					case 1:
					{
						global::tink.core.TypedError e1 = ((global::tink.core.TypedError) (( o1 as global::tink.core.Outcome_Failure ).failure) );
						object __temp_stmt3 = null;
						{
							object __temp_odecl1 = global::haxe.lang.Runtime.getField(this.suite, "info", 1169897582, true);
							global::tink.testrunner.SuiteResultType __temp_odecl2 = global::tink.testrunner.SuiteResultType.SetupFailed(e1);
							__temp_stmt3 = new global::haxe.lang.DynamicObject(new int[]{142895325, 1169897582}, new object[]{__temp_odecl2, __temp_odecl1}, new int[]{}, new double[]{});
						}
						
						this.cb.__hx_invoke1_o(default(double), __temp_stmt3);
						break;
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public global::tink.testrunner.SuiteObject suite;
		
		public global::haxe.lang.Function[] next;
		
		public global::haxe.lang.Function cb;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class Runner_runSuite_68__Fun : global::haxe.lang.Function {
		
		public Runner_runSuite_68__Fun(global::tink.testrunner.TimerManager timers, global::tink.testrunner.SuiteObject suite, global::tink.testrunner.Reporter reporter, bool includeMode, bool hasCases, global::haxe.lang.Function cb) : base(1, 0) {
			this.timers = timers;
			this.suite = suite;
			this.reporter = reporter;
			this.includeMode = includeMode;
			this.hasCases = hasCases;
			this.cb = cb;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::tink.core.TinkNoise _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.TinkNoise) (((object) (__fn_float1) )) )) : (((global::tink.core.TinkNoise) (__fn_dyn1) )) );
			global::haxe.lang.Function setup = new global::tink.testrunner.Runner_runSuite_70__Fun(this.suite, this.hasCases);
			global::haxe.lang.Function teardown = new global::tink.testrunner.Runner_runSuite_71__Fun(this.suite, this.hasCases);
			object iter = new global::_Array.ArrayIterator<object>(((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(this.suite, "cases", 1092664259, true)) ))) ));
			global::Array<object> results = new global::Array<object>(new object[]{});
			global::haxe.lang.Function[] next = new global::haxe.lang.Function[]{null};
			next[0] = new global::tink.testrunner.Runner_runSuite_75__Fun(this.timers, teardown, this.suite, results, this.reporter, next, iter, this.includeMode, this.cb);
			((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (setup.__hx_invoke0_o()) ))) ).handle(new global::tink.testrunner.Runner_runSuite_92__Fun(this.suite, next, this.cb));
			return null;
		}
		
		
		public global::tink.testrunner.TimerManager timers;
		
		public global::tink.testrunner.SuiteObject suite;
		
		public global::tink.testrunner.Reporter reporter;
		
		public bool includeMode;
		
		public bool hasCases;
		
		public global::haxe.lang.Function cb;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class Runner_runSuite_65__Fun : global::haxe.lang.Function {
		
		public Runner_runSuite_65__Fun(global::tink.testrunner.TimerManager timers, global::tink.testrunner.SuiteObject suite, global::tink.testrunner.Reporter reporter, bool includeMode) : base(1, 0) {
			this.timers = timers;
			this.suite = suite;
			this.reporter = reporter;
			this.includeMode = includeMode;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::haxe.lang.Function cb = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (((global::haxe.lang.Function) (__fn_dyn1) )) );
			global::Array<object> cases = global::tink.testrunner._Suite.Suite_Impl_.getCasesToBeRun(this.suite, this.includeMode);
			bool hasCases = ( cases.length > 0 );
			this.reporter.report(global::tink.testrunner.ReportType.SuiteStart(global::haxe.lang.Runtime.getField(this.suite, "info", 1169897582, true), hasCases)).handle(new global::tink.testrunner.Runner_runSuite_68__Fun(this.timers, this.suite, this.reporter, this.includeMode, hasCases, cb));
			return null;
		}
		
		
		public global::tink.testrunner.TimerManager timers;
		
		public global::tink.testrunner.SuiteObject suite;
		
		public global::tink.testrunner.Reporter reporter;
		
		public bool includeMode;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class Runner_runCase_127__Fun : global::haxe.lang.Function {
		
		public Runner_runCase_127__Fun(object results1, global::haxe.lang.Function cb) : base(1, 0) {
			this.results1 = results1;
			this.cb = cb;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::tink.core.TinkNoise _4 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.TinkNoise) (((object) (__fn_float1) )) )) : (((global::tink.core.TinkNoise) (__fn_dyn1) )) );
			this.cb.__hx_invoke1_o(default(double), this.results1);
			return null;
		}
		
		
		public object results1;
		
		public global::haxe.lang.Function cb;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class Runner_runCase_119__Fun : global::haxe.lang.Function {
		
		public Runner_runCase_119__Fun(global::tink.testrunner.Reporter reporter, global::haxe.lang.Function cb, global::tink.testrunner.CaseObject caze) : base(1, 0) {
			this.reporter = reporter;
			this.cb = cb;
			this.caze = caze;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::tink.core.Outcome result1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.Outcome) (((object) (__fn_float1) )) )) : (((global::tink.core.Outcome) (__fn_dyn1) )) );
				global::tink.testrunner.CaseResultType results = null;
				switch (result1._hx_index) {
					case 0:
					{
						global::Array<object> v = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (( result1 as global::tink.core.Outcome_Success ).data) ))) );
						results = global::tink.testrunner.CaseResultType.Succeeded(v);
						break;
					}
					
					
					case 1:
					{
						global::tink.core.TypedError e1 = ((global::tink.core.TypedError) (( result1 as global::tink.core.Outcome_Failure ).failure) );
						results = global::tink.testrunner.CaseResultType.Failed(e1);
						break;
					}
					
					
				}
				
				object results1 = null;
				{
					object __temp_odecl1 = global::haxe.lang.Runtime.getField(this.caze, "info", 1169897582, true);
					results1 = new global::haxe.lang.DynamicObject(new int[]{142895325, 1169897582}, new object[]{results, __temp_odecl1}, new int[]{}, new double[]{});
				}
				
				this.reporter.report(global::tink.testrunner.ReportType.CaseFinish(results1)).handle(new global::tink.testrunner.Runner_runCase_127__Fun(results1, this.cb));
				return null;
			}
		}
		
		
		public global::tink.testrunner.Reporter reporter;
		
		public global::haxe.lang.Function cb;
		
		public global::tink.testrunner.CaseObject caze;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class Runner_runCase_109__Fun : global::haxe.lang.Function {
		
		public Runner_runCase_109__Fun() : base(1, 0) {
		}
		
		
		public static global::tink.testrunner.Runner_runCase_109__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::tink.core.TinkNoise _2 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.TinkNoise) (((object) (__fn_float1) )) )) : (((global::tink.core.TinkNoise) (__fn_dyn1) )) );
			return global::tink.streams.Handled.Resume;
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class Runner_runCase_107__Fun : global::haxe.lang.Function {
		
		public Runner_runCase_107__Fun(global::tink.testrunner.Reporter reporter, global::Array<object> assertions) : base(1, 0) {
			this.reporter = reporter;
			this.assertions = assertions;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::tink.testrunner.Assertion a = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.testrunner.Assertion) (((object) (__fn_float1) )) )) : (((global::tink.testrunner.Assertion) (__fn_dyn1) )) );
			this.assertions.push(a);
			global::tink.core._Future.FutureObject<object> ret = ((global::tink.core._Future.FutureObject<object>) (this.reporter.report(global::tink.testrunner.ReportType.Assertion(a))) ).map<object>(((global::haxe.lang.Function) (( (( global::tink.testrunner.Runner_runCase_109__Fun.__hx_current != null )) ? (global::tink.testrunner.Runner_runCase_109__Fun.__hx_current) : (global::tink.testrunner.Runner_runCase_109__Fun.__hx_current = ((global::tink.testrunner.Runner_runCase_109__Fun) (new global::tink.testrunner.Runner_runCase_109__Fun()) )) )) ));
			return ret.gather();
		}
		
		
		public global::tink.testrunner.Reporter reporter;
		
		public global::Array<object> assertions;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class Runner_runCase_111__Fun : global::haxe.lang.Function {
		
		public Runner_runCase_111__Fun(global::Array<object> assertions) : base(1, 0) {
			this.assertions = assertions;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::tink.streams.Conclusion o = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.streams.Conclusion) (((object) (__fn_float1) )) )) : (((global::tink.streams.Conclusion) (__fn_dyn1) )) );
				switch (o._hx_index) {
					case 0:
					{
						throw global::haxe.lang.HaxeException.wrap("unreachable");
					}
					
					
					case 2:
					{
						global::tink.core.TypedError e = ( o as global::tink.streams.Conclusion_Failed ).error;
						return global::tink.core.Outcome.Failure(e);
					}
					
					
					case 3:
					{
						return global::tink.core.Outcome.Success(this.assertions);
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public global::Array<object> assertions;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class Runner_runCase_105__Fun : global::haxe.lang.Function {
		
		public Runner_runCase_105__Fun(global::tink.testrunner.TimerManager timers, global::tink.testrunner.Reporter reporter, global::tink.testrunner.CaseObject caze) : base(1, 0) {
			this.timers = timers;
			this.reporter = reporter;
			this.caze = caze;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::tink.core.TinkNoise _1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.TinkNoise) (((object) (__fn_float1) )) )) : (((global::tink.core.TinkNoise) (__fn_dyn1) )) );
				global::Array<object> assertions = new global::Array<object>(new object[]{});
				return global::tink.testrunner.TimeoutHelper.timeout<object>(((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.Future_Impl_.next<object, object>(((global::tink.core._Future.FutureObject<object>) (this.caze.execute().forEach<object>(((global::haxe.lang.Function) (global::tink.streams._Stream.Handler_Impl_.ofSafe<object>(((global::haxe.lang.Function) (new global::tink.testrunner.Runner_runCase_107__Fun(this.reporter, assertions)) ))) ))) ), ((global::haxe.lang.Function) (global::tink.core._Promise.Next_Impl_.ofSafe<object, object>(((global::haxe.lang.Function) (new global::tink.testrunner.Runner_runCase_111__Fun(assertions)) ))) ))) ), ((int) (global::haxe.lang.Runtime.getField_f(this.caze, "timeout", 1492589217, true)) ), ((global::tink.testrunner.TimerManager) (this.timers) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"runCase", "tink.testrunner.Runner", "tink/testrunner/Runner.hx"}, new int[]{1981972957}, new double[]{((double) (107) )})) ));
			}
		}
		
		
		public global::tink.testrunner.TimerManager timers;
		
		public global::tink.testrunner.Reporter reporter;
		
		public global::tink.testrunner.CaseObject caze;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class Runner_runCase_118__Fun_0 : global::haxe.lang.Function {
		
		public Runner_runCase_118__Fun_0(global::Array<object> result) : base(1, 0) {
			this.result = result;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::tink.core.TinkNoise _3 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.TinkNoise) (((object) (__fn_float1) )) )) : (((global::tink.core.TinkNoise) (__fn_dyn1) )) );
			return ((global::tink.core._Future.FutureObject<object>) (new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (global::tink.core.Outcome.Success(this.result)) ))) ))) );
		}
		
		
		public global::Array<object> result;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class Runner_runCase_118__Fun : global::haxe.lang.Function {
		
		public Runner_runCase_118__Fun(global::tink.testrunner.TimerManager timers, global::tink.testrunner.SuiteObject suite, global::tink.testrunner.CaseObject caze) : base(1, 0) {
			this.timers = timers;
			this.suite = suite;
			this.caze = caze;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::Array<object> result = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (__fn_dyn1) ))) )) );
			return global::tink.core._Promise.Promise_Impl_.next<object, object>(((global::tink.core._Future.FutureObject<object>) (global::tink.testrunner.TimeoutHelper.timeout<object>(((global::tink.core._Future.FutureObject<object>) (this.suite.after()) ), ((int) (global::haxe.lang.Runtime.getField_f(this.caze, "timeout", 1492589217, true)) ), ((global::tink.testrunner.TimerManager) (this.timers) ), ((object) (global::haxe.lang.Runtime.getField(this.caze, "pos", 5594516, true)) ))) ), ((global::haxe.lang.Function) (new global::tink.testrunner.Runner_runCase_118__Fun_0(result)) ), default(global::haxe.lang.Null<bool>));
		}
		
		
		public global::tink.testrunner.TimerManager timers;
		
		public global::tink.testrunner.SuiteObject suite;
		
		public global::tink.testrunner.CaseObject caze;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class Runner_runCase_103__Fun : global::haxe.lang.Function {
		
		public Runner_runCase_103__Fun(global::tink.testrunner.TimerManager timers, global::tink.testrunner.SuiteObject suite, global::tink.testrunner.Reporter reporter, global::haxe.lang.Function cb, global::tink.testrunner.CaseObject caze) : base(1, 0) {
			this.timers = timers;
			this.suite = suite;
			this.reporter = reporter;
			this.cb = cb;
			this.caze = caze;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::tink.core.TinkNoise _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.TinkNoise) (((object) (__fn_float1) )) )) : (((global::tink.core.TinkNoise) (__fn_dyn1) )) );
			((global::tink.core._Future.FutureObject<object>) (global::tink.core._Promise.Promise_Impl_.next<object, object>(((global::tink.core._Future.FutureObject<object>) (global::tink.core._Promise.Promise_Impl_.next<object, object>(((global::tink.core._Future.FutureObject<object>) (global::tink.testrunner.TimeoutHelper.timeout<object>(((global::tink.core._Future.FutureObject<object>) (this.suite.before()) ), ((int) (global::haxe.lang.Runtime.getField_f(this.caze, "timeout", 1492589217, true)) ), ((global::tink.testrunner.TimerManager) (this.timers) ), ((object) (global::haxe.lang.Runtime.getField(this.caze, "pos", 5594516, true)) ))) ), ((global::haxe.lang.Function) (new global::tink.testrunner.Runner_runCase_105__Fun(this.timers, this.reporter, this.caze)) ), default(global::haxe.lang.Null<bool>))) ), ((global::haxe.lang.Function) (new global::tink.testrunner.Runner_runCase_118__Fun(this.timers, this.suite, this.caze)) ), default(global::haxe.lang.Null<bool>))) ).handle(new global::tink.testrunner.Runner_runCase_119__Fun(this.reporter, this.cb, this.caze));
			return null;
		}
		
		
		public global::tink.testrunner.TimerManager timers;
		
		public global::tink.testrunner.SuiteObject suite;
		
		public global::tink.testrunner.Reporter reporter;
		
		public global::haxe.lang.Function cb;
		
		public global::tink.testrunner.CaseObject caze;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class Runner_runCase_137__Fun : global::haxe.lang.Function {
		
		public Runner_runCase_137__Fun(object results2, global::haxe.lang.Function cb) : base(1, 0) {
			this.results2 = results2;
			this.cb = cb;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::tink.core.TinkNoise _6 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.TinkNoise) (((object) (__fn_float1) )) )) : (((global::tink.core.TinkNoise) (__fn_dyn1) )) );
			this.cb.__hx_invoke1_o(default(double), this.results2);
			return null;
		}
		
		
		public object results2;
		
		public global::haxe.lang.Function cb;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class Runner_runCase_132__Fun : global::haxe.lang.Function {
		
		public Runner_runCase_132__Fun(global::tink.testrunner.Reporter reporter, global::haxe.lang.Function cb, global::tink.testrunner.CaseObject caze) : base(1, 0) {
			this.reporter = reporter;
			this.cb = cb;
			this.caze = caze;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::tink.core.TinkNoise _5 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.TinkNoise) (((object) (__fn_float1) )) )) : (((global::tink.core.TinkNoise) (__fn_dyn1) )) );
			object results2 = null;
			{
				object __temp_odecl1 = global::haxe.lang.Runtime.getField(this.caze, "info", 1169897582, true);
				results2 = new global::haxe.lang.DynamicObject(new int[]{142895325, 1169897582}, new object[]{global::tink.testrunner.CaseResultType.Excluded, __temp_odecl1}, new int[]{}, new double[]{});
			}
			
			this.reporter.report(global::tink.testrunner.ReportType.CaseFinish(results2)).handle(new global::tink.testrunner.Runner_runCase_137__Fun(results2, this.cb));
			return null;
		}
		
		
		public global::tink.testrunner.Reporter reporter;
		
		public global::haxe.lang.Function cb;
		
		public global::tink.testrunner.CaseObject caze;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class Runner_runCase_101__Fun : global::haxe.lang.Function {
		
		public Runner_runCase_101__Fun(global::tink.testrunner.TimerManager timers, global::tink.testrunner.SuiteObject suite, bool shouldRun, global::tink.testrunner.Reporter reporter, global::tink.testrunner.CaseObject caze) : base(1, 0) {
			this.timers = timers;
			this.suite = suite;
			this.shouldRun = shouldRun;
			this.reporter = reporter;
			this.caze = caze;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::haxe.lang.Function cb = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (((global::haxe.lang.Function) (__fn_dyn1) )) );
			if (this.shouldRun) {
				this.reporter.report(global::tink.testrunner.ReportType.CaseStart(global::haxe.lang.Runtime.getField(this.caze, "info", 1169897582, true), this.shouldRun)).handle(new global::tink.testrunner.Runner_runCase_103__Fun(this.timers, this.suite, this.reporter, cb, this.caze));
			}
			else {
				this.reporter.report(global::tink.testrunner.ReportType.CaseStart(global::haxe.lang.Runtime.getField(this.caze, "info", 1169897582, true), this.shouldRun)).handle(new global::tink.testrunner.Runner_runCase_132__Fun(this.reporter, cb, this.caze));
			}
			
			return null;
		}
		
		
		public global::tink.testrunner.TimerManager timers;
		
		public global::tink.testrunner.SuiteObject suite;
		
		public bool shouldRun;
		
		public global::tink.testrunner.Reporter reporter;
		
		public global::tink.testrunner.CaseObject caze;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class TimeoutHelper : global::haxe.lang.HxObject {
		
		public TimeoutHelper(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TimeoutHelper() {
			global::tink.testrunner.TimeoutHelper.__hx_ctor_tink_testrunner_TimeoutHelper(this);
		}
		
		
		protected static void __hx_ctor_tink_testrunner_TimeoutHelper(global::tink.testrunner.TimeoutHelper __hx_this) {
		}
		
		
		public static global::tink.core._Future.FutureObject<object> timeout<T>(global::tink.core._Future.FutureObject<object> promise, int ms, global::tink.testrunner.TimerManager timers, object pos) {
			return global::tink.core._Future.Future_Impl_.async<object>(((global::haxe.lang.Function) (new global::tink.testrunner.TimeoutHelper_timeout_147__Fun<T>(timers, promise, pos, ms)) ), default(global::haxe.lang.Null<bool>));
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class TimeoutHelper_timeout_150__Fun<T> : global::haxe.lang.Function {
		
		public TimeoutHelper_timeout_150__Fun(object[] timer, bool[] done, global::haxe.lang.Function cb) : base(1, 0) {
			this.timer = timer;
			this.done = done;
			this.cb = cb;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::tink.core.Outcome o = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.Outcome) (((object) (__fn_float1) )) )) : (((global::tink.core.Outcome) (__fn_dyn1) )) );
			this.done[0] = true;
			if (( this.timer[0] != null )) {
				object __temp_expr1 = ((object) (global::haxe.lang.Runtime.callField(this.timer[0], "stop", 1281093634, null)) );
			}
			
			this.cb.__hx_invoke1_o(default(double), o);
			return null;
		}
		
		
		public object[] timer;
		
		public bool[] done;
		
		public global::haxe.lang.Function cb;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class TimeoutHelper_timeout_156__Fun<T> : global::haxe.lang.Function {
		
		public TimeoutHelper_timeout_156__Fun(object pos, int ms, global::tink.core._Callback.LinkObject link, global::haxe.lang.Function cb) : base(0, 0) {
			this.pos = pos;
			this.ms = ms;
			this.link = link;
			this.cb = cb;
		}
		
		
		public override object __hx_invoke0_o() {
			if (( ((global::tink.core._Callback.LinkObject) (this.link) ) != null )) {
				((global::tink.core._Callback.LinkObject) (this.link) ).cancel();
			}
			
			global::tink.core.Outcome tmp1 = global::tink.core.Outcome.Failure(new global::tink.core.TypedError<object>(default(global::haxe.lang.Null<int>), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Timed out after ", global::haxe.lang.Runtime.toString(this.ms)), " ms"), this.pos));
			this.cb.__hx_invoke1_o(default(double), tmp1);
			return null;
		}
		
		
		public object pos;
		
		public int ms;
		
		public global::tink.core._Callback.LinkObject link;
		
		public global::haxe.lang.Function cb;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class TimeoutHelper_timeout_147__Fun<T> : global::haxe.lang.Function {
		
		public TimeoutHelper_timeout_147__Fun(global::tink.testrunner.TimerManager timers, global::tink.core._Future.FutureObject<object> promise, object pos, int ms) : base(1, 0) {
			this.timers = timers;
			this.promise = promise;
			this.pos = pos;
			this.ms = ms;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::haxe.lang.Function cb = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (((global::haxe.lang.Function) (__fn_dyn1) )) );
			bool[] done = new bool[]{false};
			object[] timer = new object[]{null};
			global::tink.core._Callback.LinkObject link = ((global::tink.core._Future.FutureObject<object>) (this.promise) ).handle(new global::tink.testrunner.TimeoutHelper_timeout_150__Fun<T>(timer, done, cb));
			if ((  ! (done[0])  && ( this.timers != null ) )) {
				global::tink.testrunner.Timer tmp = this.timers.schedule(this.ms, new global::tink.testrunner.TimeoutHelper_timeout_156__Fun<T>(this.pos, this.ms, link, cb));
				timer[0] = tmp;
			}
			
			return null;
		}
		
		
		public global::tink.testrunner.TimerManager timers;
		
		public global::tink.core._Future.FutureObject<object> promise;
		
		public object pos;
		
		public int ms;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner._Runner {
	public sealed class BatchResult_Impl_ {
		
		public static object summary(global::Array<object> this1) {
			unchecked {
				object ret = new global::haxe.lang.DynamicObject(new int[]{69718249, 1563501425}, new object[]{new global::Array<object>(new object[]{}), new global::Array<object>(new object[]{})}, new int[]{}, new double[]{});
				global::haxe.lang.Function handleCases = new global::tink.testrunner._Runner.BatchResult_Impl__summary_173__Fun(ret);
				{
					int _g2 = 0;
					while (( _g2 < this1.length )) {
						object s = this1[_g2];
						 ++ _g2;
						{
							global::tink.testrunner.SuiteResultType _g3 = ((global::tink.testrunner.SuiteResultType) (global::haxe.lang.Runtime.getField(s, "result", 142895325, true)) );
							switch (_g3._hx_index) {
								case 0:
								{
									global::Array<object> cases1 = ( _g3 as global::tink.testrunner.SuiteResultType_Success ).cases;
									handleCases.__hx_invoke1_o(default(double), cases1);
									break;
								}
								
								
								case 1:
								{
									global::tink.core.TypedError e1 = ( _g3 as global::tink.testrunner.SuiteResultType_SetupFailed ).e;
									((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(ret, "failures", 69718249, true)) ))) ).push(global::tink.testrunner.FailureType.SuiteFailed(e1));
									break;
								}
								
								
								case 2:
								{
									global::Array<object> cases2 = ( _g3 as global::tink.testrunner.SuiteResultType_TeardownFailed ).cases;
									global::tink.core.TypedError e2 = ( _g3 as global::tink.testrunner.SuiteResultType_TeardownFailed ).e;
									{
										handleCases.__hx_invoke1_o(default(double), cases2);
										((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(ret, "failures", 69718249, true)) ))) ).push(global::tink.testrunner.FailureType.SuiteFailed(e2));
									}
									
									break;
								}
								
								
							}
							
						}
						
					}
					
				}
				
				return ret;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner._Runner {
	public class BatchResult_Impl__summary_179__Fun : global::haxe.lang.Function {
		
		public BatchResult_Impl__summary_179__Fun() : base(1, 0) {
		}
		
		
		public static global::tink.testrunner._Runner.BatchResult_Impl__summary_179__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::tink.testrunner.Assertion a1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.testrunner.Assertion) (((object) (__fn_float1) )) )) : (((global::tink.testrunner.Assertion) (__fn_dyn1) )) );
			return global::tink.testrunner.FailureType.AssertionFailed(a1);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner._Runner {
	public class BatchResult_Impl__summary_178__Fun : global::haxe.lang.Function {
		
		public BatchResult_Impl__summary_178__Fun() : base(1, 0) {
		}
		
		
		public static global::tink.testrunner._Runner.BatchResult_Impl__summary_178__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::tink.testrunner.Assertion a = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.testrunner.Assertion) (((object) (__fn_float1) )) )) : (((global::tink.testrunner.Assertion) (__fn_dyn1) )) );
			return  ! (global::tink.core.OutcomeTools.isSuccess<object, object>(((global::tink.core.Outcome) (a.holds) ))) ;
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner._Runner {
	public class BatchResult_Impl__summary_173__Fun : global::haxe.lang.Function {
		
		public BatchResult_Impl__summary_173__Fun(object ret) : base(1, 0) {
			this.ret = ret;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::Array<object> cases = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (__fn_dyn1) ))) )) );
				int _g = 0;
				while (( _g < cases.length )) {
					object c = cases[_g];
					 ++ _g;
					{
						global::tink.testrunner.CaseResultType _g1 = ((global::tink.testrunner.CaseResultType) (global::haxe.lang.Runtime.getField(c, "result", 142895325, true)) );
						switch (_g1._hx_index) {
							case 0:
							{
								global::Array<object> assertions = ( _g1 as global::tink.testrunner.CaseResultType_Succeeded ).assertions;
								{
									global::Array<object> __temp_expr1 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.setField(this.ret, "assertions", 1563501425, ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(this.ret, "assertions", 1563501425, true)) ))) ).concat(assertions))) ))) );
									global::Array<object> ret1 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(this.ret, "failures", 69718249, true)) ))) );
									global::Array<object> handleCases1 = assertions.filter(( (( global::tink.testrunner._Runner.BatchResult_Impl__summary_178__Fun.__hx_current != null )) ? (global::tink.testrunner._Runner.BatchResult_Impl__summary_178__Fun.__hx_current) : (global::tink.testrunner._Runner.BatchResult_Impl__summary_178__Fun.__hx_current = ((global::tink.testrunner._Runner.BatchResult_Impl__summary_178__Fun) (new global::tink.testrunner._Runner.BatchResult_Impl__summary_178__Fun()) )) )).map<object>(((global::haxe.lang.Function) (( (( global::tink.testrunner._Runner.BatchResult_Impl__summary_179__Fun.__hx_current != null )) ? (global::tink.testrunner._Runner.BatchResult_Impl__summary_179__Fun.__hx_current) : (global::tink.testrunner._Runner.BatchResult_Impl__summary_179__Fun.__hx_current = ((global::tink.testrunner._Runner.BatchResult_Impl__summary_179__Fun) (new global::tink.testrunner._Runner.BatchResult_Impl__summary_179__Fun()) )) )) ));
									global::Array<object> __temp_expr2 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.setField(this.ret, "failures", 69718249, ret1.concat(handleCases1))) ))) );
								}
								
								break;
							}
							
							
							case 1:
							{
								global::tink.core.TypedError e = ( _g1 as global::tink.testrunner.CaseResultType_Failed ).e;
								((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(this.ret, "failures", 69718249, true)) ))) ).push(global::tink.testrunner.FailureType.CaseFailed(e));
								break;
							}
							
							
							case 2:
							{
								break;
							}
							
							
						}
						
					}
					
				}
				
				return null;
			}
		}
		
		
		public object ret;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class SuiteResultType : global::haxe.lang.Enum {
		
		protected SuiteResultType(int index) : base(index) {
		}
		
		
		public static global::tink.testrunner.SuiteResultType Success(global::Array<object> cases) {
			return new global::tink.testrunner.SuiteResultType_Success(cases);
		}
		
		
		public static global::tink.testrunner.SuiteResultType SetupFailed(global::tink.core.TypedError e) {
			return new global::tink.testrunner.SuiteResultType_SetupFailed(e);
		}
		
		
		public static global::tink.testrunner.SuiteResultType TeardownFailed(global::tink.core.TypedError e, global::Array<object> cases) {
			return new global::tink.testrunner.SuiteResultType_TeardownFailed(e, cases);
		}
		
		
		protected static readonly string[] __hx_constructs = new string[]{"Success", "SetupFailed", "TeardownFailed"};
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public sealed class SuiteResultType_Success : global::tink.testrunner.SuiteResultType {
		
		public SuiteResultType_Success(global::Array<object> cases) : base(0) {
			this.cases = cases;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.cases});
		}
		
		
		public override string getTag() {
			return "Success";
		}
		
		
		public override int GetHashCode() {
			return global::haxe.lang.Enum.paramsGetHashCode(0, new object[]{this.cases});
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::tink.testrunner.SuiteResultType_Success en = ( other as global::tink.testrunner.SuiteResultType_Success );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.cases) ), ((object) (en.cases) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("Success", new object[]{this.cases});
		}
		
		
		public readonly global::Array<object> cases;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public sealed class SuiteResultType_SetupFailed : global::tink.testrunner.SuiteResultType {
		
		public SuiteResultType_SetupFailed(global::tink.core.TypedError e) : base(1) {
			this.e = e;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.e});
		}
		
		
		public override string getTag() {
			return "SetupFailed";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(1, new object[]{this.e});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::tink.testrunner.SuiteResultType_SetupFailed en = ( other as global::tink.testrunner.SuiteResultType_SetupFailed );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.e) ), ((object) (en.e) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("SetupFailed", new object[]{this.e});
		}
		
		
		public readonly global::tink.core.TypedError e;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public sealed class SuiteResultType_TeardownFailed : global::tink.testrunner.SuiteResultType {
		
		public SuiteResultType_TeardownFailed(global::tink.core.TypedError e, global::Array<object> cases) : base(2) {
			this.e = e;
			this.cases = cases;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.e, this.cases});
		}
		
		
		public override string getTag() {
			return "TeardownFailed";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(2, new object[]{this.e, this.cases});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::tink.testrunner.SuiteResultType_TeardownFailed en = ( other as global::tink.testrunner.SuiteResultType_TeardownFailed );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.e) ), ((object) (en.e) ))) ) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.cases) ), ((object) (en.cases) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("TeardownFailed", new object[]{this.e, this.cases});
		}
		
		
		public readonly global::tink.core.TypedError e;
		
		public readonly global::Array<object> cases;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class CaseResultType : global::haxe.lang.Enum {
		
		protected CaseResultType(int index) : base(index) {
		}
		
		
		public static global::tink.testrunner.CaseResultType Succeeded(global::Array<object> assertions) {
			return new global::tink.testrunner.CaseResultType_Succeeded(assertions);
		}
		
		
		public static global::tink.testrunner.CaseResultType Failed(global::tink.core.TypedError e) {
			return new global::tink.testrunner.CaseResultType_Failed(e);
		}
		
		
		public static readonly global::tink.testrunner.CaseResultType Excluded = new global::tink.testrunner.CaseResultType_Excluded();
		
		protected static readonly string[] __hx_constructs = new string[]{"Succeeded", "Failed", "Excluded"};
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public sealed class CaseResultType_Succeeded : global::tink.testrunner.CaseResultType {
		
		public CaseResultType_Succeeded(global::Array<object> assertions) : base(0) {
			this.assertions = assertions;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.assertions});
		}
		
		
		public override string getTag() {
			return "Succeeded";
		}
		
		
		public override int GetHashCode() {
			return global::haxe.lang.Enum.paramsGetHashCode(0, new object[]{this.assertions});
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::tink.testrunner.CaseResultType_Succeeded en = ( other as global::tink.testrunner.CaseResultType_Succeeded );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.assertions) ), ((object) (en.assertions) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("Succeeded", new object[]{this.assertions});
		}
		
		
		public readonly global::Array<object> assertions;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public sealed class CaseResultType_Failed : global::tink.testrunner.CaseResultType {
		
		public CaseResultType_Failed(global::tink.core.TypedError e) : base(1) {
			this.e = e;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.e});
		}
		
		
		public override string getTag() {
			return "Failed";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(1, new object[]{this.e});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::tink.testrunner.CaseResultType_Failed en = ( other as global::tink.testrunner.CaseResultType_Failed );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.e) ), ((object) (en.e) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("Failed", new object[]{this.e});
		}
		
		
		public readonly global::tink.core.TypedError e;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public sealed class CaseResultType_Excluded : global::tink.testrunner.CaseResultType {
		
		public CaseResultType_Excluded() : base(2) {
		}
		
		
		public override string getTag() {
			return "Excluded";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class FailureType : global::haxe.lang.Enum {
		
		protected FailureType(int index) : base(index) {
		}
		
		
		public static global::tink.testrunner.FailureType AssertionFailed(global::tink.testrunner.Assertion assertion) {
			return new global::tink.testrunner.FailureType_AssertionFailed(assertion);
		}
		
		
		public static global::tink.testrunner.FailureType CaseFailed(global::tink.core.TypedError err) {
			return new global::tink.testrunner.FailureType_CaseFailed(err);
		}
		
		
		public static global::tink.testrunner.FailureType SuiteFailed(global::tink.core.TypedError err) {
			return new global::tink.testrunner.FailureType_SuiteFailed(err);
		}
		
		
		protected static readonly string[] __hx_constructs = new string[]{"AssertionFailed", "CaseFailed", "SuiteFailed"};
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public sealed class FailureType_AssertionFailed : global::tink.testrunner.FailureType {
		
		public FailureType_AssertionFailed(global::tink.testrunner.Assertion assertion) : base(0) {
			this.assertion = assertion;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.assertion});
		}
		
		
		public override string getTag() {
			return "AssertionFailed";
		}
		
		
		public override int GetHashCode() {
			return global::haxe.lang.Enum.paramsGetHashCode(0, new object[]{this.assertion});
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::tink.testrunner.FailureType_AssertionFailed en = ( other as global::tink.testrunner.FailureType_AssertionFailed );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.assertion) ), ((object) (en.assertion) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("AssertionFailed", new object[]{this.assertion});
		}
		
		
		public readonly global::tink.testrunner.Assertion assertion;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public sealed class FailureType_CaseFailed : global::tink.testrunner.FailureType {
		
		public FailureType_CaseFailed(global::tink.core.TypedError err) : base(1) {
			this.err = err;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.err});
		}
		
		
		public override string getTag() {
			return "CaseFailed";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(1, new object[]{this.err});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::tink.testrunner.FailureType_CaseFailed en = ( other as global::tink.testrunner.FailureType_CaseFailed );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.err) ), ((object) (en.err) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("CaseFailed", new object[]{this.err});
		}
		
		
		public readonly global::tink.core.TypedError err;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public sealed class FailureType_SuiteFailed : global::tink.testrunner.FailureType {
		
		public FailureType_SuiteFailed(global::tink.core.TypedError err) : base(2) {
			this.err = err;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.err});
		}
		
		
		public override string getTag() {
			return "SuiteFailed";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(2, new object[]{this.err});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::tink.testrunner.FailureType_SuiteFailed en = ( other as global::tink.testrunner.FailureType_SuiteFailed );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.err) ), ((object) (en.err) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("SuiteFailed", new object[]{this.err});
		}
		
		
		public readonly global::tink.core.TypedError err;
		
	}
}


