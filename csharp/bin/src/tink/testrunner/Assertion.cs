// Generated by Haxe 4.0.0-rc.2+77068e10c

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class Assertion : global::haxe.lang.HxObject {
		
		public Assertion(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Assertion(global::tink.core.Outcome holds, string description, object pos) {
			global::tink.testrunner.Assertion.__hx_ctor_tink_testrunner_Assertion(this, holds, description, pos);
		}
		
		
		protected static void __hx_ctor_tink_testrunner_Assertion(global::tink.testrunner.Assertion __hx_this, global::tink.core.Outcome holds, string description, object pos) {
			__hx_this.holds = holds;
			__hx_this.description = description;
			__hx_this.pos = pos;
		}
		
		
		public global::tink.core.Outcome holds;
		
		public string description;
		
		public object pos;
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 5594516:
					{
						this.pos = ((object) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 5594516:
					{
						this.pos = ((object) (@value) );
						return @value;
					}
					
					
					case 1595738364:
					{
						this.description = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					case 727535188:
					{
						this.holds = ((global::tink.core.Outcome) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 5594516:
					{
						return this.pos;
					}
					
					
					case 1595738364:
					{
						return this.description;
					}
					
					
					case 727535188:
					{
						return this.holds;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 5594516:
					{
						return ((double) (global::haxe.lang.Runtime.toDouble(this.pos)) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("pos");
			baseArr.push("description");
			baseArr.push("holds");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner._Assertion {
	public sealed class AssertionResult_Impl_ {
		
		public static global::tink.core.Outcome ofBool(bool v) {
			if (v) {
				return global::tink.core.Outcome.Success(global::tink.core.TinkNoise.Noise);
			}
			else {
				return global::tink.core.Outcome.Failure(null);
			}
			
		}
		
		
		public static global::tink.core.Outcome ofOutcome<T>(global::tink.core.Outcome v) {
			unchecked {
				switch (v._hx_index) {
					case 0:
					{
						return global::tink.core.Outcome.Success(global::tink.core.TinkNoise.Noise);
					}
					
					
					case 1:
					{
						global::tink.core.TypedError e = ((global::tink.core.TypedError) (( v as global::tink.core.Outcome_Failure ).failure) );
						return global::tink.core.Outcome.Failure(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("", e.toString()), " "), global::Std.@string(global::haxe.lang.Runtime.getField(e, "data", 1113806378, true))));
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public static bool toBool(global::tink.core.Outcome this1) {
			return global::tink.core.OutcomeTools.isSuccess<object, object>(((global::tink.core.Outcome) (this1) ));
		}
		
		
		public static bool not(global::tink.core.Outcome this1) {
			return  ! (global::tink.core.OutcomeTools.isSuccess<object, object>(((global::tink.core.Outcome) (this1) ))) ;
		}
		
		
		public static bool and_(global::tink.core.Outcome a, bool b) {
			if (global::tink.core.OutcomeTools.isSuccess<object, object>(((global::tink.core.Outcome) (a) ))) {
				return b;
			}
			else {
				return false;
			}
			
		}
		
		
		public static bool or_(global::tink.core.Outcome a, bool b) {
			if ( ! (global::tink.core.OutcomeTools.isSuccess<object, object>(((global::tink.core.Outcome) (a) ))) ) {
				return b;
			}
			else {
				return true;
			}
			
		}
		
		
		public static bool _and(bool a, global::tink.core.Outcome b) {
			if (a) {
				return global::tink.core.OutcomeTools.isSuccess<object, object>(((global::tink.core.Outcome) (b) ));
			}
			else {
				return false;
			}
			
		}
		
		
		public static bool _or(bool a, global::tink.core.Outcome b) {
			if ( ! (a) ) {
				return global::tink.core.OutcomeTools.isSuccess<object, object>(((global::tink.core.Outcome) (b) ));
			}
			else {
				return true;
			}
			
		}
		
		
	}
}


