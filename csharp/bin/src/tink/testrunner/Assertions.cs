// Generated by Haxe 4.0.0-rc.2+77068e10c

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner._Assertions {
	public sealed class Assertions_Impl_ {
		
		public static global::tink.streams.StreamObject<object, object> ofAssertion(global::tink.testrunner.Assertion o) {
			return global::tink.streams._Stream.Stream_Impl_.ofIterator<object, object>(((object) (new global::_Array.ArrayIterator<object>(((global::Array<object>) (new global::Array<object>(new object[]{o})) ))) ));
		}
		
		
		public static global::tink.streams.StreamObject<object, object> ofArray(global::Array<object> o) {
			return global::tink.streams._Stream.Stream_Impl_.ofIterator<object, object>(((object) (new global::_Array.ArrayIterator<object>(((global::Array<object>) (o) ))) ));
		}
		
		
		public static global::tink.streams.StreamObject<object, object> ofPromiseArray(global::tink.core._Future.FutureObject<object> o) {
			return ((global::tink.streams.StreamObject<object, object>) (global::tink.streams._Stream.Stream_Impl_.promise<object, object>(((global::tink.core._Future.FutureObject<object>) (global::tink.core._Promise.Promise_Impl_.next<object, object>(((global::tink.core._Future.FutureObject<object>) (o) ), ((global::haxe.lang.Function) (global::tink.core._Promise.Next_Impl_.ofSafeSync<object, object>(((global::haxe.lang.Function) (( (( global::tink.testrunner._Assertions.Assertions_Impl__ofPromiseArray_22__Fun.__hx_current != null )) ? (global::tink.testrunner._Assertions.Assertions_Impl__ofPromiseArray_22__Fun.__hx_current) : (global::tink.testrunner._Assertions.Assertions_Impl__ofPromiseArray_22__Fun.__hx_current = ((global::tink.testrunner._Assertions.Assertions_Impl__ofPromiseArray_22__Fun) (new global::tink.testrunner._Assertions.Assertions_Impl__ofPromiseArray_22__Fun()) )) )) ))) ), default(global::haxe.lang.Null<bool>))) ))) );
		}
		
		
		public static global::tink.streams.StreamObject<object, object> ofFutureAssertion(global::tink.core._Future.FutureObject<object> p) {
			global::tink.core._Future.FutureObject<object> ret = ((global::tink.core._Future.FutureObject<object>) (p) ).map<object>(((global::haxe.lang.Function) (( (( global::tink.testrunner._Assertions.Assertions_Impl__ofFutureAssertion_30__Fun.__hx_current != null )) ? (global::tink.testrunner._Assertions.Assertions_Impl__ofFutureAssertion_30__Fun.__hx_current) : (global::tink.testrunner._Assertions.Assertions_Impl__ofFutureAssertion_30__Fun.__hx_current = ((global::tink.testrunner._Assertions.Assertions_Impl__ofFutureAssertion_30__Fun) (new global::tink.testrunner._Assertions.Assertions_Impl__ofFutureAssertion_30__Fun()) )) )) ));
			return ((global::tink.streams.StreamObject<object, object>) (global::tink.streams._Stream.Stream_Impl_.promise<object, object>(((global::tink.core._Future.FutureObject<object>) (ret.gather()) ))) );
		}
		
		
		public static global::tink.streams.StreamObject<object, object> ofFutureAssertions(global::tink.core._Future.FutureObject<object> p) {
			global::tink.core._Future.FutureObject<object> ret = ((global::tink.core._Future.FutureObject<object>) (p) ).map<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::tink.core.Outcome), "Success", 94326179)) ));
			return ((global::tink.streams.StreamObject<object, object>) (global::tink.streams._Stream.Stream_Impl_.promise<object, object>(((global::tink.core._Future.FutureObject<object>) (ret.gather()) ))) );
		}
		
		
		public static global::tink.streams.StreamObject<object, object> ofSurpriseAssertion(global::tink.core._Future.FutureObject<object> p) {
			return ((global::tink.streams.StreamObject<object, object>) (global::tink.streams._Stream.Stream_Impl_.promise<object, object>(((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.Future_Impl_._tryMap<object, object, object>(((global::tink.core._Future.FutureObject<object>) (p) ), ((global::haxe.lang.Function) (( (( global::tink.testrunner._Assertions.Assertions_Impl__ofSurpriseAssertion_47__Fun.__hx_current != null )) ? (global::tink.testrunner._Assertions.Assertions_Impl__ofSurpriseAssertion_47__Fun.__hx_current) : (global::tink.testrunner._Assertions.Assertions_Impl__ofSurpriseAssertion_47__Fun.__hx_current = ((global::tink.testrunner._Assertions.Assertions_Impl__ofSurpriseAssertion_47__Fun) (new global::tink.testrunner._Assertions.Assertions_Impl__ofSurpriseAssertion_47__Fun()) )) )) ))) ))) );
		}
		
		
		public static global::tink.streams.StreamObject<object, object> ofOutcomeAssertions(global::tink.core.Outcome o) {
			return global::tink.streams._Stream.Stream_Impl_.promise<object, object>(((global::tink.core._Future.FutureObject<object>) (new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (o) ))) ))) ));
		}
		
		
		public static global::tink.streams.StreamObject<object, object> ofPromiseAssertions(global::tink.core._Future.FutureObject<object> p) {
			return ((global::tink.streams.StreamObject<object, object>) (global::tink.streams._Stream.Stream_Impl_.promise<object, object>(((global::tink.core._Future.FutureObject<object>) (p) ))) );
		}
		
		
		public static global::tink.streams.StreamObject<object, object> ofSurpriseAssertions(global::tink.core._Future.FutureObject<object> p) {
			return global::tink.streams._Stream.Stream_Impl_.promise<object, object>(((global::tink.core._Future.FutureObject<object>) (p) ));
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner._Assertions {
	public class Assertions_Impl__ofPromiseArray_22__Fun : global::haxe.lang.Function {
		
		public Assertions_Impl__ofPromiseArray_22__Fun() : base(1, 0) {
		}
		
		
		public static global::tink.testrunner._Assertions.Assertions_Impl__ofPromiseArray_22__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::Array<object> o1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (__fn_dyn1) ))) )) );
			return global::tink.streams._Stream.Stream_Impl_.ofIterator<object, object>(((object) (new global::_Array.ArrayIterator<object>(((global::Array<object>) (o1) ))) ));
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner._Assertions {
	public class Assertions_Impl__ofFutureAssertion_30__Fun : global::haxe.lang.Function {
		
		public Assertions_Impl__ofFutureAssertion_30__Fun() : base(1, 0) {
		}
		
		
		public static global::tink.testrunner._Assertions.Assertions_Impl__ofFutureAssertion_30__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::tink.testrunner.Assertion a = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.testrunner.Assertion) (((object) (__fn_float1) )) )) : (((global::tink.testrunner.Assertion) (__fn_dyn1) )) );
			return global::tink.core.Outcome.Success(global::tink.streams._Stream.Stream_Impl_.ofIterator<object, object>(((object) (new global::_Array.ArrayIterator<object>(((global::Array<object>) (new global::Array<object>(new object[]{a})) ))) )));
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner._Assertions {
	public class Assertions_Impl__ofSurpriseAssertion_47__Fun : global::haxe.lang.Function {
		
		public Assertions_Impl__ofSurpriseAssertion_47__Fun() : base(1, 0) {
		}
		
		
		public static global::tink.testrunner._Assertions.Assertions_Impl__ofSurpriseAssertion_47__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::tink.testrunner.Assertion o = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.testrunner.Assertion) (((object) (__fn_float1) )) )) : (((global::tink.testrunner.Assertion) (__fn_dyn1) )) );
			return global::tink.streams._Stream.Stream_Impl_.ofIterator<object, object>(((object) (new global::_Array.ArrayIterator<object>(((global::Array<object>) (new global::Array<object>(new object[]{o})) ))) ));
		}
		
		
	}
}


