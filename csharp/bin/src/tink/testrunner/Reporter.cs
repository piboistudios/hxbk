// Generated by Haxe 4.0.0-rc.2+77068e10c

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public interface Reporter : global::haxe.lang.IHxObject {
		
		global::tink.core._Future.FutureObject<object> report(global::tink.testrunner.ReportType type);
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class ReportType : global::haxe.lang.Enum {
		
		protected ReportType(int index) : base(index) {
		}
		
		
		public static readonly global::tink.testrunner.ReportType BatchStart = new global::tink.testrunner.ReportType_BatchStart();
		
		public static global::tink.testrunner.ReportType SuiteStart(object info, bool hasCasesToRun) {
			return new global::tink.testrunner.ReportType_SuiteStart(info, hasCasesToRun);
		}
		
		
		public static global::tink.testrunner.ReportType CaseStart(object info, bool shouldRun) {
			return new global::tink.testrunner.ReportType_CaseStart(info, shouldRun);
		}
		
		
		public static global::tink.testrunner.ReportType Assertion(global::tink.testrunner.Assertion assertion) {
			return new global::tink.testrunner.ReportType_Assertion(assertion);
		}
		
		
		public static global::tink.testrunner.ReportType CaseFinish(object result) {
			return new global::tink.testrunner.ReportType_CaseFinish(result);
		}
		
		
		public static global::tink.testrunner.ReportType SuiteFinish(object result) {
			return new global::tink.testrunner.ReportType_SuiteFinish(result);
		}
		
		
		public static global::tink.testrunner.ReportType BatchFinish(global::Array<object> result) {
			return new global::tink.testrunner.ReportType_BatchFinish(result);
		}
		
		
		protected static readonly string[] __hx_constructs = new string[]{"BatchStart", "SuiteStart", "CaseStart", "Assertion", "CaseFinish", "SuiteFinish", "BatchFinish"};
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public sealed class ReportType_BatchStart : global::tink.testrunner.ReportType {
		
		public ReportType_BatchStart() : base(0) {
		}
		
		
		public override string getTag() {
			return "BatchStart";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public sealed class ReportType_SuiteStart : global::tink.testrunner.ReportType {
		
		public ReportType_SuiteStart(object info, bool hasCasesToRun) : base(1) {
			this.info = info;
			this.hasCasesToRun = hasCasesToRun;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.info, this.hasCasesToRun});
		}
		
		
		public override string getTag() {
			return "SuiteStart";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(1, new object[]{this.info, this.hasCasesToRun});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::tink.testrunner.ReportType_SuiteStart en = ( other as global::tink.testrunner.ReportType_SuiteStart );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.info) ), ((object) (en.info) ))) ) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.hasCasesToRun) ), ((object) (en.hasCasesToRun) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("SuiteStart", new object[]{this.info, this.hasCasesToRun});
		}
		
		
		public readonly object info;
		
		public readonly bool hasCasesToRun;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public sealed class ReportType_CaseStart : global::tink.testrunner.ReportType {
		
		public ReportType_CaseStart(object info, bool shouldRun) : base(2) {
			this.info = info;
			this.shouldRun = shouldRun;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.info, this.shouldRun});
		}
		
		
		public override string getTag() {
			return "CaseStart";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(2, new object[]{this.info, this.shouldRun});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::tink.testrunner.ReportType_CaseStart en = ( other as global::tink.testrunner.ReportType_CaseStart );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.info) ), ((object) (en.info) ))) ) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.shouldRun) ), ((object) (en.shouldRun) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("CaseStart", new object[]{this.info, this.shouldRun});
		}
		
		
		public readonly object info;
		
		public readonly bool shouldRun;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public sealed class ReportType_Assertion : global::tink.testrunner.ReportType {
		
		public ReportType_Assertion(global::tink.testrunner.Assertion assertion) : base(3) {
			this.assertion = assertion;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.assertion});
		}
		
		
		public override string getTag() {
			return "Assertion";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(3, new object[]{this.assertion});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::tink.testrunner.ReportType_Assertion en = ( other as global::tink.testrunner.ReportType_Assertion );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.assertion) ), ((object) (en.assertion) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("Assertion", new object[]{this.assertion});
		}
		
		
		public readonly global::tink.testrunner.Assertion assertion;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public sealed class ReportType_CaseFinish : global::tink.testrunner.ReportType {
		
		public ReportType_CaseFinish(object result) : base(4) {
			this.result = result;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.result});
		}
		
		
		public override string getTag() {
			return "CaseFinish";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(4, new object[]{this.result});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::tink.testrunner.ReportType_CaseFinish en = ( other as global::tink.testrunner.ReportType_CaseFinish );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.result) ), ((object) (en.result) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("CaseFinish", new object[]{this.result});
		}
		
		
		public readonly object result;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public sealed class ReportType_SuiteFinish : global::tink.testrunner.ReportType {
		
		public ReportType_SuiteFinish(object result) : base(5) {
			this.result = result;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.result});
		}
		
		
		public override string getTag() {
			return "SuiteFinish";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(5, new object[]{this.result});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::tink.testrunner.ReportType_SuiteFinish en = ( other as global::tink.testrunner.ReportType_SuiteFinish );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.result) ), ((object) (en.result) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("SuiteFinish", new object[]{this.result});
		}
		
		
		public readonly object result;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public sealed class ReportType_BatchFinish : global::tink.testrunner.ReportType {
		
		public ReportType_BatchFinish(global::Array<object> result) : base(6) {
			this.result = result;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.result});
		}
		
		
		public override string getTag() {
			return "BatchFinish";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(6, new object[]{this.result});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::tink.testrunner.ReportType_BatchFinish en = ( other as global::tink.testrunner.ReportType_BatchFinish );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.result) ), ((object) (en.result) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("BatchFinish", new object[]{this.result});
		}
		
		
		public readonly global::Array<object> result;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public interface Formatter : global::haxe.lang.IHxObject {
		
		string success(string v);
		
		string error(string v);
		
		string warning(string v);
		
		string info(string v);
		
		string extra(string v);
		
		string mute(string v);
		
		string normal(string v);
		
		string color(string v, string color);
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class BasicFormatter : global::haxe.lang.HxObject, global::tink.testrunner.Formatter {
		
		public BasicFormatter(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public BasicFormatter() {
			global::tink.testrunner.BasicFormatter.__hx_ctor_tink_testrunner_BasicFormatter(this);
		}
		
		
		protected static void __hx_ctor_tink_testrunner_BasicFormatter(global::tink.testrunner.BasicFormatter __hx_this) {
		}
		
		
		public virtual string success(string v) {
			return this.color(v, "green");
		}
		
		
		public virtual string error(string v) {
			return this.color(v, "red");
		}
		
		
		public virtual string warning(string v) {
			return this.color(v, "yellow");
		}
		
		
		public virtual string info(string v) {
			return this.color(v, "yellow");
		}
		
		
		public virtual string extra(string v) {
			return this.color(v, "cyan");
		}
		
		
		public virtual string mute(string v) {
			return this.color(v, "blue");
		}
		
		
		public virtual string normal(string v) {
			return this.color(v, "");
		}
		
		
		public virtual string color(string v, string c) {
			return v;
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1247572323:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "color", 1247572323)) );
					}
					
					
					case 812216871:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "normal", 812216871)) );
					}
					
					
					case 1214607065:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "mute", 1214607065)) );
					}
					
					
					case 1998756496:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "extra", 1998756496)) );
					}
					
					
					case 1169897582:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "info", 1169897582)) );
					}
					
					
					case 164354652:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "warning", 164354652)) );
					}
					
					
					case 1932118984:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "error", 1932118984)) );
					}
					
					
					case 944645571:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "success", 944645571)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 1247572323:
					{
						return this.color(global::haxe.lang.Runtime.toString(dynargs[0]), global::haxe.lang.Runtime.toString(dynargs[1]));
					}
					
					
					case 812216871:
					{
						return this.normal(global::haxe.lang.Runtime.toString(dynargs[0]));
					}
					
					
					case 1214607065:
					{
						return this.mute(global::haxe.lang.Runtime.toString(dynargs[0]));
					}
					
					
					case 1998756496:
					{
						return this.extra(global::haxe.lang.Runtime.toString(dynargs[0]));
					}
					
					
					case 1169897582:
					{
						return this.info(global::haxe.lang.Runtime.toString(dynargs[0]));
					}
					
					
					case 164354652:
					{
						return this.warning(global::haxe.lang.Runtime.toString(dynargs[0]));
					}
					
					
					case 1932118984:
					{
						return this.error(global::haxe.lang.Runtime.toString(dynargs[0]));
					}
					
					
					case 944645571:
					{
						return this.success(global::haxe.lang.Runtime.toString(dynargs[0]));
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class AnsiFormatter : global::tink.testrunner.BasicFormatter {
		
		public AnsiFormatter(global::haxe.lang.EmptyObject empty) : base(global::haxe.lang.EmptyObject.EMPTY) {
		}
		
		
		public AnsiFormatter() : base(global::haxe.lang.EmptyObject.EMPTY) {
			global::tink.testrunner.AnsiFormatter.__hx_ctor_tink_testrunner_AnsiFormatter(this);
		}
		
		
		protected static void __hx_ctor_tink_testrunner_AnsiFormatter(global::tink.testrunner.AnsiFormatter __hx_this) {
			global::tink.testrunner.BasicFormatter.__hx_ctor_tink_testrunner_BasicFormatter(__hx_this);
		}
		
		
		public override string color(string v, string c) {
			switch (c) {
				case "blue":
				{
					return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::ANSI.aset(new global::Array<object>(new object[]{global::Attribute.Blue})), v), global::ANSI.aset(new global::Array<object>(new object[]{global::Attribute.DefaultForeground})));
				}
				
				
				case "cyan":
				{
					return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::ANSI.aset(new global::Array<object>(new object[]{global::Attribute.Cyan})), v), global::ANSI.aset(new global::Array<object>(new object[]{global::Attribute.DefaultForeground})));
				}
				
				
				case "green":
				{
					return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::ANSI.aset(new global::Array<object>(new object[]{global::Attribute.Green})), v), global::ANSI.aset(new global::Array<object>(new object[]{global::Attribute.DefaultForeground})));
				}
				
				
				case "magenta":
				{
					return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::ANSI.aset(new global::Array<object>(new object[]{global::Attribute.Magenta})), v), global::ANSI.aset(new global::Array<object>(new object[]{global::Attribute.DefaultForeground})));
				}
				
				
				case "red":
				{
					return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::ANSI.aset(new global::Array<object>(new object[]{global::Attribute.Red})), v), global::ANSI.aset(new global::Array<object>(new object[]{global::Attribute.DefaultForeground})));
				}
				
				
				case "yellow":
				{
					return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::ANSI.aset(new global::Array<object>(new object[]{global::Attribute.Yellow})), v), global::ANSI.aset(new global::Array<object>(new object[]{global::Attribute.DefaultForeground})));
				}
				
				
				default:
				{
					return global::haxe.lang.Runtime.concat(global::ANSI.aset(new global::Array<object>(new object[]{global::Attribute.DefaultForeground})), v);
				}
				
			}
			
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1247572323:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "color", 1247572323)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class BasicReporter : global::haxe.lang.HxObject, global::tink.testrunner.Reporter {
		
		public BasicReporter(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public BasicReporter(global::tink.testrunner.Formatter formatter) {
			global::tink.testrunner.BasicReporter.__hx_ctor_tink_testrunner_BasicReporter(this, formatter);
		}
		
		
		protected static void __hx_ctor_tink_testrunner_BasicReporter(global::tink.testrunner.BasicReporter __hx_this, global::tink.testrunner.Formatter formatter) {
			__hx_this.noise = ((global::tink.core._Future.FutureObject<object>) (new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (global::tink.core.TinkNoise.Noise) ))) ))) );
			{
				__hx_this.formatter = ( (( formatter != null )) ? (formatter) : (( (( global::Sys.systemName() == "Windows" )) ? ((global::tink.testrunner.Formatter) (new global::tink.testrunner.BasicFormatter()) ) : ((global::tink.testrunner.Formatter) (new global::tink.testrunner.AnsiFormatter()) ) )) );
			}
			
		}
		
		
		public global::tink.core._Future.FutureObject<object> noise;
		
		public global::tink.testrunner.Formatter formatter;
		
		public virtual global::tink.core._Future.FutureObject<object> report(global::tink.testrunner.ReportType type) {
			unchecked {
				switch (type._hx_index) {
					case 0:
					{
						break;
					}
					
					
					case 1:
					{
						bool hasCasesToRun = ( type as global::tink.testrunner.ReportType_SuiteStart ).hasCasesToRun;
						object info = ( type as global::tink.testrunner.ReportType_SuiteStart ).info;
						if (hasCasesToRun) {
							this.println(" ");
							string m = global::haxe.lang.Runtime.concat(this.formatter.info(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(info, "name", 1224700491, true))), ": ");
							if (( global::haxe.lang.Runtime.getField(info, "pos", 5594516, true) != null )) {
								m = global::haxe.lang.Runtime.concat(m, this.formatter.extra(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("[", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(global::haxe.lang.Runtime.getField(info, "pos", 5594516, true), "fileName", 1648581351, true))), ":"), global::haxe.lang.Runtime.toString(((int) (global::haxe.lang.Runtime.getField_f(global::haxe.lang.Runtime.getField(info, "pos", 5594516, true), "lineNumber", 1981972957, true)) ))), "]")));
							}
							
							this.println(m);
						}
						
						break;
					}
					
					
					case 2:
					{
						bool shouldRun = ( type as global::tink.testrunner.ReportType_CaseStart ).shouldRun;
						object info1 = ( type as global::tink.testrunner.ReportType_CaseStart ).info;
						if (shouldRun) {
							string m1 = global::haxe.lang.Runtime.concat(this.formatter.info(this.indent(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(info1, "name", 1224700491, true)), new global::haxe.lang.Null<int>(2, true))), ": ");
							if (( global::haxe.lang.Runtime.getField(info1, "pos", 5594516, true) != null )) {
								m1 = global::haxe.lang.Runtime.concat(m1, this.formatter.extra(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("[", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(global::haxe.lang.Runtime.getField(info1, "pos", 5594516, true), "fileName", 1648581351, true))), ":"), global::haxe.lang.Runtime.toString(((int) (global::haxe.lang.Runtime.getField_f(global::haxe.lang.Runtime.getField(info1, "pos", 5594516, true), "lineNumber", 1981972957, true)) ))), "] ")));
							}
							
							if (( global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(info1, "description", 1595738364, true)) != null )) {
								m1 = global::haxe.lang.Runtime.concat(m1, this.formatter.mute(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(info1, "description", 1595738364, true))));
							}
							
							this.println(m1);
						}
						
						break;
					}
					
					
					case 3:
					{
						global::tink.testrunner.Assertion assertion = ( type as global::tink.testrunner.ReportType_Assertion ).assertion;
						{
							string failure = null;
							string holds = null;
							global::tink.core.Outcome _g = assertion.holds;
							switch (_g._hx_index) {
								case 0:
								{
									holds = this.formatter.success("[OK]");
									break;
								}
								
								
								case 1:
								{
									string msg = global::haxe.lang.Runtime.toString(( ((global::tink.core.Outcome) (_g) ) as global::tink.core.Outcome_Failure ).failure);
									failure = msg;
									holds = this.formatter.error("[FAIL]");
									break;
								}
								
								
							}
							
							string pos = this.formatter.extra(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("[", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(assertion.pos, "fileName", 1648581351, true))), ":"), global::haxe.lang.Runtime.toString(((int) (global::haxe.lang.Runtime.getField_f(assertion.pos, "lineNumber", 1981972957, true)) ))), "]"));
							string m2 = this.indent(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("- ", holds), " "), pos), " "), assertion.description), new global::haxe.lang.Null<int>(4, true));
							this.println(m2);
							if (( failure != null )) {
								this.println(this.formatter.error(this.indent(failure, new global::haxe.lang.Null<int>(8, true))));
							}
							
						}
						
						break;
					}
					
					
					case 4:
					{
						global::tink.testrunner.CaseResultType result = ((global::tink.testrunner.CaseResultType) (global::haxe.lang.Runtime.getField(( type as global::tink.testrunner.ReportType_CaseFinish ).result, "result", 142895325, true)) );
						if (( result._hx_index == 1 )) {
							global::tink.core.TypedError e = ( result as global::tink.testrunner.CaseResultType_Failed ).e;
							this.println(this.formatter.error(this.indent(global::haxe.lang.Runtime.concat("- ", this.formatError(e)), new global::haxe.lang.Null<int>(4, true))));
						}
						
						break;
					}
					
					
					case 5:
					{
						object result1 = ( type as global::tink.testrunner.ReportType_SuiteFinish ).result;
						{
							global::tink.testrunner.SuiteResultType _g1 = ((global::tink.testrunner.SuiteResultType) (global::haxe.lang.Runtime.getField(result1, "result", 142895325, true)) );
							switch (_g1._hx_index) {
								case 0:
								{
									break;
								}
								
								
								case 1:
								{
									global::tink.core.TypedError e1 = ( _g1 as global::tink.testrunner.SuiteResultType_SetupFailed ).e;
									this.println(this.formatter.error(this.indent(global::haxe.lang.Runtime.concat("Setup Failed: ", this.formatError(e1)), new global::haxe.lang.Null<int>(2, true))));
									break;
								}
								
								
								case 2:
								{
									global::tink.core.TypedError e2 = ( _g1 as global::tink.testrunner.SuiteResultType_TeardownFailed ).e;
									this.println(this.formatter.error(this.indent(global::haxe.lang.Runtime.concat("Teardown Failed: ", this.formatError(e2)), new global::haxe.lang.Null<int>(2, true))));
									break;
								}
								
								
							}
							
						}
						
						break;
					}
					
					
					case 6:
					{
						global::Array<object> result2 = ( type as global::tink.testrunner.ReportType_BatchFinish ).result;
						{
							object summary = global::tink.testrunner._Runner.BatchResult_Impl_.summary(result2);
							int total = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(summary, "assertions", 1563501425, true)) ))) ).length;
							int failures = 0;
							int errors = 0;
							{
								int _g2 = 0;
								global::Array<object> _g11 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(summary, "failures", 69718249, true)) ))) );
								while (( _g2 < _g11.length )) {
									global::tink.testrunner.FailureType f = ((global::tink.testrunner.FailureType) (_g11[_g2]) );
									 ++ _g2;
									if (( f._hx_index == 0 )) {
										 ++ failures;
									}
									else {
										 ++ errors;
									}
									
								}
								
							}
							
							int success = ( total - failures );
							global::System.Text.StringBuilder m_b = new global::System.Text.StringBuilder();
							m_b.Append(((string) (global::Std.@string(total)) ));
							m_b.Append(((string) (" Assertion") ));
							if (( total > 1 )) {
								m_b.Append(((string) ("s") ));
							}
							
							m_b.Append(((string) ("   ") ));
							m_b.Append(((string) (global::Std.@string(success)) ));
							m_b.Append(((string) (" Success") ));
							m_b.Append(((string) ("   ") ));
							m_b.Append(((string) (global::Std.@string(failures)) ));
							m_b.Append(((string) (" Failure") ));
							if (( failures > 1 )) {
								m_b.Append(((string) ("s") ));
							}
							
							m_b.Append(((string) ("   ") ));
							m_b.Append(((string) (global::Std.@string(errors)) ));
							m_b.Append(((string) (" Error") ));
							if (( errors > 1 )) {
								m_b.Append(((string) ("s") ));
							}
							
							m_b.Append(((string) ("   ") ));
							string m3 = m_b.ToString();
							this.println(" ");
							this.println(( (( ( failures == 0 ) && ( errors == 0 ) )) ? (this.formatter.success(m3)) : (this.formatter.error(m3)) ));
							this.println(" ");
						}
						
						break;
					}
					
					
				}
				
				return this.noise;
			}
		}
		
		
		public virtual void println(string v) {
			global::System.Console.WriteLine(((object) (v) ));
		}
		
		
		public virtual string indent(string v, global::haxe.lang.Null<int> i) {
			int i1 = ( ( ! (i.hasValue) ) ? (0) : ((i).@value) );
			return global::haxe.lang.StringExt.split(v, "\n").map<object>(((global::haxe.lang.Function) (new global::tink.testrunner.BasicReporter_indent_189__Fun(i1)) )).@join("\n");
		}
		
		
		public virtual string formatError(global::tink.core.TypedError e) {
			string str = e.toString();
			if (( global::haxe.lang.Runtime.getField(e, "data", 1113806378, true) != null )) {
				str = global::haxe.lang.Runtime.concat(str, global::haxe.lang.Runtime.concat("\n", global::Std.@string(global::haxe.lang.Runtime.getField(e, "data", 1113806378, true))));
			}
			
			return str;
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 426240778:
					{
						this.formatter = ((global::tink.testrunner.Formatter) (@value) );
						return @value;
					}
					
					
					case 532844442:
					{
						this.noise = ((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (@value) ))) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 742597905:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "formatError", 742597905)) );
					}
					
					
					case 334695532:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "indent", 334695532)) );
					}
					
					
					case 70507503:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "println", 70507503)) );
					}
					
					
					case 109329588:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "report", 109329588)) );
					}
					
					
					case 426240778:
					{
						return this.formatter;
					}
					
					
					case 532844442:
					{
						return this.noise;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 742597905:
					{
						return this.formatError(((global::tink.core.TypedError) (dynargs[0]) ));
					}
					
					
					case 334695532:
					{
						return this.indent(global::haxe.lang.Runtime.toString(dynargs[0]), global::haxe.lang.Null<object>.ofDynamic<int>(dynargs[1]));
					}
					
					
					case 70507503:
					{
						this.println(global::haxe.lang.Runtime.toString(dynargs[0]));
						break;
					}
					
					
					case 109329588:
					{
						return this.report(((global::tink.testrunner.ReportType) (dynargs[0]) ));
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("formatter");
			baseArr.push("noise");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.testrunner {
	public class BasicReporter_indent_189__Fun : global::haxe.lang.Function {
		
		public BasicReporter_indent_189__Fun(int i1) : base(1, 0) {
			this.i1 = i1;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string line = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return global::haxe.lang.Runtime.concat(global::StringTools.lpad("", " ", this.i1), line);
		}
		
		
		public int i1;
		
	}
}


