// Generated by Haxe 4.0.0-rc.2+77068e10c

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._RealStream {
	public sealed class RealStream_Impl_ {
		
		public static global::tink.streams.StreamObject<Item, object> promiseOfIdealStream<Item>(global::tink.core._Future.FutureObject<object> p) {
			return ((global::tink.streams.StreamObject<Item, object>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Item, object>(((global::tink.streams.StreamObject) (global::tink.streams._Stream.Stream_Impl_.promise<Item, object>(((global::tink.core._Future.FutureObject<object>) (global::tink.core._Promise.Promise_Impl_.ofSpecific<object, object>(((global::tink.core._Future.FutureObject<object>) (p) ))) ))) ))) );
		}
		
		
		public static global::tink.streams.StreamObject<Item, object> promiseOfStreamNoise<Item>(global::tink.core._Future.FutureObject<object> p) {
			return ((global::tink.streams.StreamObject<Item, object>) (global::tink.streams._Stream.Stream_Impl_.promise<Item, object>(((global::tink.core._Future.FutureObject<object>) (p) ))) );
		}
		
		
		public static global::tink.streams.StreamObject<Item, object> promiseOfRealStream<Item>(global::tink.core._Future.FutureObject<object> p) {
			return ((global::tink.streams.StreamObject<Item, object>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Item, object>(((global::tink.streams.StreamObject) (global::tink.streams._Stream.Stream_Impl_.promise<Item, object>(((global::tink.core._Future.FutureObject<object>) (global::tink.core._Promise.Promise_Impl_.ofSpecific<object, object>(((global::tink.core._Future.FutureObject<object>) (p) ))) ))) ))) );
		}
		
		
		public static global::tink.streams.StreamObject<Item, object> promiseOfStreamError<Item>(global::tink.core._Future.FutureObject<object> p) {
			return ((global::tink.streams.StreamObject<Item, object>) (global::tink.streams._Stream.Stream_Impl_.promise<Item, object>(((global::tink.core._Future.FutureObject<object>) (p) ))) );
		}
		
		
		public static global::tink.core._Future.FutureObject<object> collect<Item>(global::tink.streams.StreamObject<Item, object> this1) {
			global::Array<Item> buf = new global::Array<Item>(new Item[]{});
			global::tink.core._Future.FutureObject<object> ret = ((global::tink.core._Future.FutureObject<object>) (this1.forEach<object>(((global::haxe.lang.Function) (global::tink.streams._Stream.Handler_Impl_.ofSafe<object>(((global::haxe.lang.Function) (new global::tink.streams._RealStream.RealStream_Impl__collect_27__Fun<Item>(buf)) ))) ))) ).map<object>(((global::haxe.lang.Function) (new global::tink.streams._RealStream.RealStream_Impl__collect_30__Fun<Item>(buf)) ));
			return ret.gather();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._RealStream {
	public class RealStream_Impl__collect_30__Fun<Item> : global::haxe.lang.Function {
		
		public RealStream_Impl__collect_30__Fun(global::Array<Item> buf) : base(1, 0) {
			this.buf = buf;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::tink.streams.Conclusion c = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.streams.Conclusion) (((object) (__fn_float1) )) )) : (((global::tink.streams.Conclusion) (__fn_dyn1) )) );
				switch (c._hx_index) {
					case 0:
					{
						throw global::haxe.lang.HaxeException.wrap("unreachable");
					}
					
					
					case 2:
					{
						global::tink.core.TypedError e = ( c as global::tink.streams.Conclusion_Failed ).error;
						return global::tink.core.Outcome.Failure(e);
					}
					
					
					case 3:
					{
						return global::tink.core.Outcome.Success(this.buf);
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public global::Array<Item> buf;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._RealStream {
	public class RealStream_Impl__collect_27__Fun<Item> : global::haxe.lang.Function {
		
		public RealStream_Impl__collect_27__Fun(global::Array<Item> buf) : base(1, 0) {
			this.buf = buf;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			Item x = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<Item>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<Item>(__fn_dyn1)) );
			this.buf.push(x);
			return ((global::tink.core._Future.FutureObject<object>) (new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (global::tink.streams.Handled.Resume) ))) ))) );
		}
		
		
		public global::Array<Item> buf;
		
	}
}


