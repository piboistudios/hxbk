// Generated by Haxe 4.0.0-rc.2+77068e10c

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._IdealStream {
	public sealed class IdealStream_Impl_ {
		
		public static global::tink.streams.StreamObject<Item, object> promiseOfIdealStream<Item>(global::tink.core._Future.FutureObject<object> p) {
			return ((global::tink.streams.StreamObject<Item, object>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Item, object>(((global::tink.streams.StreamObject) (global::tink.streams._Stream.Stream_Impl_.promise<Item, object>(((global::tink.core._Future.FutureObject<object>) (global::tink.core._Promise.Promise_Impl_.ofSpecific<object, object>(((global::tink.core._Future.FutureObject<object>) (p) ))) ))) ))) );
		}
		
		
		public static global::tink.streams.StreamObject<Item, object> promiseOfStreamNoise<Item>(global::tink.core._Future.FutureObject<object> p) {
			return ((global::tink.streams.StreamObject<Item, object>) (global::tink.streams._Stream.Stream_Impl_.promise<Item, object>(((global::tink.core._Future.FutureObject<object>) (p) ))) );
		}
		
		
		public static global::tink.core._Future.FutureObject<object> collect<Item>(global::tink.streams.StreamObject<Item, object> this1) {
			global::Array<Item> buf = new global::Array<Item>(new Item[]{});
			global::tink.core._Future.FutureObject<object> ret = ((global::tink.core._Future.FutureObject<object>) (this1.forEach<object>(((global::haxe.lang.Function) (global::tink.streams._Stream.Handler_Impl_.ofSafe<object>(((global::haxe.lang.Function) (new global::tink.streams._IdealStream.IdealStream_Impl__collect_19__Fun<Item>(buf)) ))) ))) ).map<object>(((global::haxe.lang.Function) (new global::tink.streams._IdealStream.IdealStream_Impl__collect_22__Fun<Item>(buf)) ));
			return ret.gather();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._IdealStream {
	public class IdealStream_Impl__collect_22__Fun<Item> : global::haxe.lang.Function {
		
		public IdealStream_Impl__collect_22__Fun(global::Array<Item> buf) : base(1, 0) {
			this.buf = buf;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::tink.streams.Conclusion c = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.streams.Conclusion) (((object) (__fn_float1) )) )) : (((global::tink.streams.Conclusion) (__fn_dyn1) )) );
			return this.buf;
		}
		
		
		public global::Array<Item> buf;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._IdealStream {
	public class IdealStream_Impl__collect_19__Fun<Item> : global::haxe.lang.Function {
		
		public IdealStream_Impl__collect_19__Fun(global::Array<Item> buf) : base(1, 0) {
			this.buf = buf;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			Item x = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<Item>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<Item>(__fn_dyn1)) );
			this.buf.push(x);
			return ((global::tink.core._Future.FutureObject<object>) (new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (global::tink.streams.Handled.Resume) ))) ))) );
		}
		
		
		public global::Array<Item> buf;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class IdealStreamBase<Item> : global::tink.streams.StreamBase<Item, object>, global::tink.streams.IdealStreamBase {
		
		public IdealStreamBase(global::haxe.lang.EmptyObject empty) : base(global::haxe.lang.EmptyObject.EMPTY) {
		}
		
		
		public IdealStreamBase() : base(global::haxe.lang.EmptyObject.EMPTY) {
			global::tink.streams.IdealStreamBase<object>.__hx_ctor_tink_streams_IdealStreamBase<Item>(((global::tink.streams.IdealStreamBase<Item>) (this) ));
		}
		
		
		protected static void __hx_ctor_tink_streams_IdealStreamBase<Item_c>(global::tink.streams.IdealStreamBase<Item_c> __hx_this) {
			global::tink.streams.StreamBase<object, object>.__hx_ctor_tink_streams_StreamBase<Item_c, object>(((global::tink.streams.StreamBase<Item_c, object>) (global::tink.streams.StreamBase<object, object>.__hx_cast<Item_c, object>(((global::tink.streams.StreamBase) (__hx_this) ))) ));
		}
		
		
		public static new object __hx_cast<Item_c_c>(global::tink.streams.IdealStreamBase me) {
			return ( (( me != null )) ? (me.tink_streams_IdealStreamBase_cast<Item_c_c>()) : default(object) );
		}
		
		
		public virtual object tink_streams_IdealStreamBase_cast<Item_c>() {
			if (global::haxe.lang.Runtime.eq(typeof(Item), typeof(Item_c))) {
				return this;
			}
			
			global::tink.streams.IdealStreamBase<Item_c> new_me = new global::tink.streams.IdealStreamBase<Item_c>(global::haxe.lang.EmptyObject.EMPTY);
			global::Array<object> fields = global::Reflect.fields(this);
			int i = 0;
			while (( i < fields.length )) {
				string field = global::haxe.lang.Runtime.toString(fields[i++]);
				global::Reflect.setField(new_me, field, global::Reflect.field(this, field));
			}
			
			return new_me;
		}
		
		
		public override object tink_streams_StreamObject_cast<Item_c, Quality_c>() {
			return this.tink_streams_IdealStreamBase_cast<Item>();
		}
		
		
		public override object tink_streams_StreamBase_cast<Item_c, Quality_c>() {
			return this.tink_streams_IdealStreamBase_cast<Item>();
		}
		
		
		public override global::tink.streams.StreamObject<Item, object> idealize(global::haxe.lang.Function rescue) {
			return this;
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 934283999:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "idealize", 934283999)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	[global::haxe.lang.GenericInterface(typeof(global::tink.streams.IdealStreamBase<object>))]
	public interface IdealStreamBase : global::haxe.lang.IHxObject, global::tink.streams.StreamBase, global::haxe.lang.IGenericObject {
		
		object tink_streams_IdealStreamBase_cast<Item_c>();
		
		object tink_streams_StreamBase_cast<Item_c, Quality_c>();
		
	}
}


