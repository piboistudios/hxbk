// Generated by Haxe 4.0.0-rc.2+77068e10c

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public interface StreamObject<Item, Quality> : global::haxe.lang.IHxObject, global::tink.streams.StreamObject {
		
		global::tink.core._Future.FutureObject<object> next();
		
		global::tink.streams.StreamObject<Ret, Quality> regroup<Ret>(object f);
		
		global::tink.streams.StreamObject<Ret, Quality> map<Ret>(object f);
		
		global::tink.streams.StreamObject<Item, Quality> filter(object f);
		
		global::tink.streams.StreamObject<Item, object> idealize(global::haxe.lang.Function rescue);
		
		global::tink.streams.StreamObject<Item, Quality> append(global::tink.streams.StreamObject<Item, Quality> other);
		
		global::tink.streams.StreamObject<Item, Quality> prepend(global::tink.streams.StreamObject<Item, Quality> other);
		
		global::tink.streams.StreamObject<Item, Quality> blend(global::tink.streams.StreamObject<Item, Quality> other);
		
		void decompose(global::Array<object> @into);
		
		global::tink.core._Future.FutureObject<object> forEach<Safety>(global::haxe.lang.Function handle);
		
		global::tink.core._Future.FutureObject<object> reduce<Safety, Result>(Result initial, global::haxe.lang.Function reducer);
		
	}
	public class StreamObject__Statics_{
		public static object __hx_cast<Item_c_c, Quality_c_c>(global::tink.streams.StreamObject me) {
			return ( (( me != null )) ? (me.tink_streams_StreamObject_cast<Item_c_c, Quality_c_c>()) : default(object) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	[global::haxe.lang.GenericInterface(typeof(global::tink.streams.StreamObject<object, object>))]
	public interface StreamObject : global::haxe.lang.IHxObject, global::haxe.lang.IGenericObject {
		
		object tink_streams_StreamObject_cast<Item_c, Quality_c>();
		
		bool get_depleted();
		
		global::haxe.lang.Function retain();
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class StreamBase<Item, Quality> : global::haxe.lang.HxObject, global::tink.streams.StreamBase, global::tink.streams.StreamObject<Item, Quality> {
		
		public StreamBase(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public StreamBase() {
			global::tink.streams.StreamBase<object, object>.__hx_ctor_tink_streams_StreamBase<Item, Quality>(((global::tink.streams.StreamBase<Item, Quality>) (this) ));
		}
		
		
		protected static void __hx_ctor_tink_streams_StreamBase<Item_c, Quality_c>(global::tink.streams.StreamBase<Item_c, Quality_c> __hx_this) {
			__hx_this.retainCount = 0;
			{
			}
			
		}
		
		
		public static object __hx_cast<Item_c_c, Quality_c_c>(global::tink.streams.StreamBase me) {
			return ( (( me != null )) ? (me.tink_streams_StreamBase_cast<Item_c_c, Quality_c_c>()) : default(object) );
		}
		
		
		public virtual object tink_streams_StreamBase_cast<Item_c, Quality_c>() {
			if (( global::haxe.lang.Runtime.eq(typeof(Item), typeof(Item_c)) && global::haxe.lang.Runtime.eq(typeof(Quality), typeof(Quality_c)) )) {
				return this;
			}
			
			global::tink.streams.StreamBase<Item_c, Quality_c> new_me = new global::tink.streams.StreamBase<Item_c, Quality_c>(global::haxe.lang.EmptyObject.EMPTY);
			global::Array<object> fields = global::Reflect.fields(this);
			int i = 0;
			while (( i < fields.length )) {
				string field = global::haxe.lang.Runtime.toString(fields[i++]);
				global::Reflect.setField(new_me, field, global::Reflect.field(this, field));
			}
			
			return new_me;
		}
		
		
		public virtual object tink_streams_StreamObject_cast<Item_c, Quality_c>() {
			return this.tink_streams_StreamBase_cast<Item, Quality>();
		}
		
		
		
		
		public virtual bool get_depleted() {
			return false;
		}
		
		
		public int retainCount;
		
		public virtual global::haxe.lang.Function retain() {
			global::tink.streams.StreamBase<Item, Quality> _gthis = this;
			this.retainCount++;
			bool[] retained = new bool[]{true};
			return new global::tink.streams.StreamBase_retain_340__Fun<Quality, Item>(retained, _gthis);
		}
		
		
		public virtual global::tink.core._Future.FutureObject<object> next() {
			throw global::haxe.lang.HaxeException.wrap("not implemented");
		}
		
		
		public virtual global::tink.streams.StreamObject<Ret, Quality> regroup<Ret>(object f) {
			return new global::tink.streams._Stream.RegroupStream<Item, Ret, Quality>(this, f, null);
		}
		
		
		public virtual global::tink.streams.StreamObject<Ret, Quality> map<Ret>(object f) {
			return this.regroup<Ret>(((object) (f) ));
		}
		
		
		public virtual global::tink.streams.StreamObject<Item, Quality> filter(object f) {
			return this.regroup<Item>(((object) (f) ));
		}
		
		
		public virtual void destroy() {
		}
		
		
		public virtual global::tink.streams.StreamObject<Item, Quality> append(global::tink.streams.StreamObject<Item, Quality> other) {
			if (this.get_depleted()) {
				return other;
			}
			else {
				return global::tink.streams._Stream.CompoundStream<object, object>.of<Item, Quality>(((global::Array<object>) (new global::Array<object>(new object[]{this, other})) ));
			}
			
		}
		
		
		public virtual global::tink.streams.StreamObject<Item, Quality> prepend(global::tink.streams.StreamObject<Item, Quality> other) {
			if (this.get_depleted()) {
				return other;
			}
			else {
				return global::tink.streams._Stream.CompoundStream<object, object>.of<Item, Quality>(((global::Array<object>) (new global::Array<object>(new object[]{other, this})) ));
			}
			
		}
		
		
		public virtual global::tink.streams.StreamObject<Item, Quality> blend(global::tink.streams.StreamObject<Item, Quality> other) {
			if (this.get_depleted()) {
				return other;
			}
			else {
				return new global::tink.streams.BlendStream<Item, Quality>(this, other);
			}
			
		}
		
		
		public virtual void decompose(global::Array<object> @into) {
			if ( ! (this.get_depleted()) ) {
				@into.push(this);
			}
			
		}
		
		
		public virtual global::tink.streams.StreamObject<Item, object> idealize(global::haxe.lang.Function rescue) {
			if (this.get_depleted()) {
				return ((global::tink.streams.StreamObject<Item, object>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Item, object>(((global::tink.streams.StreamObject) (((object) (global::tink.streams.Empty<object, object>.inst) )) ))) );
			}
			else {
				return new global::tink.streams.IdealizeStream<Item, Quality>(this, rescue);
			}
			
		}
		
		
		public virtual global::tink.core._Future.FutureObject<object> reduce<Safety, Result>(Result initial, global::haxe.lang.Function reducer) {
			Result[] initial1 = new Result[]{initial};
			global::tink.streams.StreamBase<Item, Quality> _gthis = this;
			return global::tink.core._Future.Future_Impl_.async<object>(((global::haxe.lang.Function) (new global::tink.streams.StreamBase_reduce_398__Fun<Result, Quality, Safety, Item>(reducer, initial1, _gthis)) ), new global::haxe.lang.Null<bool>(true, true));
		}
		
		
		public virtual global::tink.core._Future.FutureObject<object> forEach<Safety>(global::haxe.lang.Function handler) {
			throw global::haxe.lang.HaxeException.wrap("not implemented");
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1762523850:
					{
						this.retainCount = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1762523850:
					{
						this.retainCount = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1153313194:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "forEach", 1153313194)) );
					}
					
					
					case 2124033446:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "reduce", 2124033446)) );
					}
					
					
					case 934283999:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "idealize", 934283999)) );
					}
					
					
					case 2057814961:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "decompose", 2057814961)) );
					}
					
					
					case 888465489:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "blend", 888465489)) );
					}
					
					
					case 937465614:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "prepend", 937465614)) );
					}
					
					
					case 265544154:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "append", 265544154)) );
					}
					
					
					case 612773114:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "destroy", 612773114)) );
					}
					
					
					case 87367608:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "filter", 87367608)) );
					}
					
					
					case 5442204:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "map", 5442204)) );
					}
					
					
					case 9373356:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "regroup", 9373356)) );
					}
					
					
					case 1224901875:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "next", 1224901875)) );
					}
					
					
					case 152989637:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "retain", 152989637)) );
					}
					
					
					case 1762523850:
					{
						return this.retainCount;
					}
					
					
					case 790633684:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_depleted", 790633684)) );
					}
					
					
					case 2047240395:
					{
						return this.get_depleted();
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1762523850:
					{
						return ((double) (this.retainCount) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 1153313194:
					{
						return this.forEach<object>(((global::haxe.lang.Function) (dynargs[0]) ));
					}
					
					
					case 2124033446:
					{
						return this.reduce<object, object>(((object) (dynargs[0]) ), ((global::haxe.lang.Function) (dynargs[1]) ));
					}
					
					
					case 934283999:
					{
						return this.idealize(((global::haxe.lang.Function) (dynargs[0]) ));
					}
					
					
					case 2057814961:
					{
						this.decompose(((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (dynargs[0]) ))) ));
						break;
					}
					
					
					case 888465489:
					{
						return this.blend(((global::tink.streams.StreamObject<Item, Quality>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Item, Quality>(((global::tink.streams.StreamObject) (dynargs[0]) ))) ));
					}
					
					
					case 937465614:
					{
						return this.prepend(((global::tink.streams.StreamObject<Item, Quality>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Item, Quality>(((global::tink.streams.StreamObject) (dynargs[0]) ))) ));
					}
					
					
					case 265544154:
					{
						return this.append(((global::tink.streams.StreamObject<Item, Quality>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Item, Quality>(((global::tink.streams.StreamObject) (dynargs[0]) ))) ));
					}
					
					
					case 612773114:
					{
						this.destroy();
						break;
					}
					
					
					case 87367608:
					{
						return this.filter(dynargs[0]);
					}
					
					
					case 5442204:
					{
						return this.map<object>(((object) (dynargs[0]) ));
					}
					
					
					case 9373356:
					{
						return this.regroup<object>(((object) (dynargs[0]) ));
					}
					
					
					case 1224901875:
					{
						return this.next();
					}
					
					
					case 152989637:
					{
						return this.retain();
					}
					
					
					case 790633684:
					{
						return this.get_depleted();
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("retainCount");
			baseArr.push("depleted");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class StreamBase_retain_340__Fun<Quality, Item> : global::haxe.lang.Function {
		
		public StreamBase_retain_340__Fun(bool[] retained, global::tink.streams.StreamBase<Item, Quality> _gthis) : base(0, 0) {
			this.retained = retained;
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke0_o() {
			if (this.retained[0]) {
				this.retained[0] = false;
				if ((  -- this._gthis.retainCount == 0 )) {
					this._gthis.destroy();
				}
				
			}
			
			return null;
		}
		
		
		public bool[] retained;
		
		public global::tink.streams.StreamBase<Item, Quality> _gthis;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class StreamBase_reduce_405__Fun<Result, Quality, Safety, Item> : global::haxe.lang.Function {
		
		public StreamBase_reduce_405__Fun(Result[] initial1, global::haxe.lang.Function cb) : base(1, 0) {
			this.initial1 = initial1;
			this.cb = cb;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::tink.streams.Conclusion c = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.streams.Conclusion) (((object) (__fn_float1) )) )) : (((global::tink.streams.Conclusion) (__fn_dyn1) )) );
				switch (c._hx_index) {
					case 0:
					{
						throw global::haxe.lang.HaxeException.wrap("assert");
					}
					
					
					case 1:
					{
						global::tink.streams.StreamObject<Item, Quality> rest = ((global::tink.streams.StreamObject<Item, Quality>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Item, Quality>(((global::tink.streams.StreamObject) (( c as global::tink.streams.Conclusion_Clogged ).at) ))) );
						global::tink.core.TypedError e1 = ( c as global::tink.streams.Conclusion_Clogged ).error;
						this.cb.__hx_invoke1_o(default(double), global::tink.streams.Reduction.Crashed(e1, rest));
						break;
					}
					
					
					case 2:
					{
						global::tink.core.TypedError e2 = ( c as global::tink.streams.Conclusion_Failed ).error;
						this.cb.__hx_invoke1_o(default(double), global::tink.streams.Reduction.Failed(e2));
						break;
					}
					
					
					case 3:
					{
						this.cb.__hx_invoke1_o(default(double), global::tink.streams.Reduction.Reduced(this.initial1[0]));
						break;
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public Result[] initial1;
		
		public global::haxe.lang.Function cb;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class StreamBase_reduce_401__Fun<Result, Safety> : global::haxe.lang.Function {
		
		public StreamBase_reduce_401__Fun(Result[] initial1) : base(1, 0) {
			this.initial1 = initial1;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::tink.streams.ReductionStep o = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.streams.ReductionStep) (((object) (__fn_float1) )) )) : (((global::tink.streams.ReductionStep) (__fn_dyn1) )) );
				switch (o._hx_index) {
					case 0:
					{
						Result v = global::haxe.lang.Runtime.genericCast<Result>(( o as global::tink.streams.ReductionStep_Progress ).result);
						this.initial1[0] = v;
						return global::tink.streams.Handled.Resume;
					}
					
					
					case 1:
					{
						global::tink.core.TypedError e = ( o as global::tink.streams.ReductionStep_Crash ).e;
						return global::tink.streams.Handled.Clog(e);
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public Result[] initial1;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class StreamBase_reduce_399__Fun<Result, Safety, Item> : global::haxe.lang.Function {
		
		public StreamBase_reduce_399__Fun(global::haxe.lang.Function reducer, Result[] initial1) : base(1, 0) {
			this.reducer = reducer;
			this.initial1 = initial1;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			Item item = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<Item>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<Item>(__fn_dyn1)) );
			global::tink.core._Future.FutureObject<object> ret = ((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (((global::haxe.lang.Function) (this.reducer) ).__hx_invoke2_o(default(double), this.initial1[0], default(double), item)) ))) ).map<object>(((global::haxe.lang.Function) (new global::tink.streams.StreamBase_reduce_401__Fun<Result, Safety>(this.initial1)) ));
			return ret.gather();
		}
		
		
		public global::haxe.lang.Function reducer;
		
		public Result[] initial1;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class StreamBase_reduce_398__Fun<Result, Quality, Safety, Item> : global::haxe.lang.Function {
		
		public StreamBase_reduce_398__Fun(global::haxe.lang.Function reducer, Result[] initial1, global::tink.streams.StreamBase<Item, Quality> _gthis) : base(1, 0) {
			this.reducer = reducer;
			this.initial1 = initial1;
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::haxe.lang.Function cb = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (((global::haxe.lang.Function) (__fn_dyn1) )) );
			this._gthis.forEach<Safety>(((global::haxe.lang.Function) (global::tink.streams._Stream.Handler_Impl_.ofUnknown<object, object>(((global::haxe.lang.Function) (new global::tink.streams.StreamBase_reduce_399__Fun<Result, Safety, Item>(this.reducer, this.initial1)) ))) )).handle(new global::tink.streams.StreamBase_reduce_405__Fun<Result, Quality, Safety, Item>(this.initial1, cb));
			return null;
		}
		
		
		public global::haxe.lang.Function reducer;
		
		public Result[] initial1;
		
		public global::tink.streams.StreamBase<Item, Quality> _gthis;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	[global::haxe.lang.GenericInterface(typeof(global::tink.streams.StreamBase<object, object>))]
	public interface StreamBase : global::haxe.lang.IHxObject, global::haxe.lang.IGenericObject {
		
		object tink_streams_StreamBase_cast<Item_c, Quality_c>();
		
		object tink_streams_StreamObject_cast<Item_c, Quality_c>();
		
		bool get_depleted();
		
		global::haxe.lang.Function retain();
		
		void destroy();
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public sealed class Stream_Impl_ {
		
		
		
		public static bool get_depleted<Item, Quality>(global::tink.streams.StreamObject<Item, Quality> this1) {
			return this1.get_depleted();
		}
		
		
		public static global::tink.streams.StreamObject<Item, object> dirty<Item, Quality>(global::tink.streams.StreamObject<Item, Quality> this1) {
			return ((global::tink.streams.StreamObject<Item, object>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Item, object>(((global::tink.streams.StreamObject) (this1) ))) );
		}
		
		
		public static global::tink.streams.StreamObject<Item, Quality> single<Item, Quality>(Item i) {
			return new global::tink.streams.Single<Item, Quality>(((global::tink.core._Lazy.LazyObject<Item>) (new global::tink.core._Lazy.LazyConst<Item>(global::haxe.lang.Runtime.genericCast<Item>(i))) ));
		}
		
		
		public static global::tink.streams.StreamObject<Item, Quality> ofIterator<Item, Quality>(object i) {
			global::haxe.lang.Function[] next = new global::haxe.lang.Function[]{null};
			next[0] = new global::tink.streams._Stream.Stream_Impl__ofIterator_21__Fun<Quality, Item>(next, i);
			return global::tink.streams.Generator<object, object>.stream<Item, Quality>(((global::haxe.lang.Function) (next[0]) ));
		}
		
		
		public static global::tink.streams.StreamObject<Item, object> dirtyFlatten<Item>(global::tink.core._Future.FutureObject<object> f) {
			return new global::tink.streams.FutureStream<Item, object>(((global::tink.core._Future.FutureObject<object>) (f) ));
		}
		
		
		public static global::tink.streams.StreamObject<Item, Quality> flatten<Item, Quality>(global::tink.core._Future.FutureObject<object> f) {
			return new global::tink.streams.FutureStream<Item, Quality>(((global::tink.core._Future.FutureObject<object>) (f) ));
		}
		
		
		public static global::tink.streams.StreamObject<Item, object> dirtyPromise<Item>(global::tink.core._Future.FutureObject<object> f) {
			global::tink.core._Future.FutureObject<object> ret = ((global::tink.core._Future.FutureObject<object>) (f) ).map<object>(((global::haxe.lang.Function) (new global::tink.streams._Stream.Stream_Impl__dirtyPromise_40__Fun<Item>()) ));
			return global::tink.streams._Stream.Stream_Impl_.dirtyFlatten<Item>(((global::tink.core._Future.FutureObject<object>) (ret.gather()) ));
		}
		
		
		public static global::tink.streams.StreamObject<Item, object> promiseIdeal<Item>(global::tink.core._Future.FutureObject<object> f) {
			return ((global::tink.streams.StreamObject<Item, object>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Item, object>(((global::tink.streams.StreamObject) (global::tink.streams._Stream.Stream_Impl_.promise<Item, object>(((global::tink.core._Future.FutureObject<object>) (global::tink.core._Promise.Promise_Impl_.ofSpecific<object, object>(((global::tink.core._Future.FutureObject<object>) (f) ))) ))) ))) );
		}
		
		
		public static global::tink.streams.StreamObject<Item, object> promiseReal<Item>(global::tink.core._Future.FutureObject<object> f) {
			return ((global::tink.streams.StreamObject<Item, object>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Item, object>(((global::tink.streams.StreamObject) (global::tink.streams._Stream.Stream_Impl_.promise<Item, object>(((global::tink.core._Future.FutureObject<object>) (global::tink.core._Promise.Promise_Impl_.ofSpecific<object, object>(((global::tink.core._Future.FutureObject<object>) (f) ))) ))) ))) );
		}
		
		
		public static global::tink.streams.StreamObject<Item, object> promise<Item, Quality>(global::tink.core._Future.FutureObject<object> f) {
			global::tink.core._Future.FutureObject<object> ret = ((global::tink.core._Future.FutureObject<object>) (f) ).map<object>(((global::haxe.lang.Function) (new global::tink.streams._Stream.Stream_Impl__promise_53__Fun<Quality, Item>()) ));
			return global::tink.streams._Stream.Stream_Impl_.flatten<Item, object>(((global::tink.core._Future.FutureObject<object>) (ret.gather()) ));
		}
		
		
		public static global::tink.streams.StreamObject<Item, object> ofError<Item>(global::tink.core.TypedError e) {
			return new global::tink.streams._Stream.ErrorStream<Item>(((global::tink.core.TypedError) (e) ));
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class Stream_Impl__ofIterator_21__Fun<Quality, Item> : global::haxe.lang.Function {
		
		public Stream_Impl__ofIterator_21__Fun(global::haxe.lang.Function[] next, object i) : base(1, 0) {
			this.next = next;
			this.i = i;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::haxe.lang.Function step = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (((global::haxe.lang.Function) (__fn_dyn1) )) );
			step.__hx_invoke1_o(default(double), ( (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(this.i, "hasNext", 407283053, null))) ? (global::tink.streams.Step.Link(global::haxe.lang.Runtime.genericCast<Item>(global::haxe.lang.Runtime.callField(this.i, "next", 1224901875, null)), global::tink.streams.Generator<object, object>.stream<Item, Quality>(((global::haxe.lang.Function) (this.next[0]) )))) : (global::tink.streams.Step.End) ));
			return null;
		}
		
		
		public global::haxe.lang.Function[] next;
		
		public object i;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class Stream_Impl__dirtyPromise_40__Fun<Item> : global::haxe.lang.Function {
		
		public Stream_Impl__dirtyPromise_40__Fun() : base(1, 0) {
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::tink.core.Outcome o = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.Outcome) (((object) (__fn_float1) )) )) : (((global::tink.core.Outcome) (__fn_dyn1) )) );
				switch (o._hx_index) {
					case 0:
					{
						global::tink.streams.StreamObject<Item, object> s = ((global::tink.streams.StreamObject<Item, object>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Item, object>(((global::tink.streams.StreamObject) (( o as global::tink.core.Outcome_Success ).data) ))) );
						return s;
					}
					
					
					case 1:
					{
						global::tink.core.TypedError e = ((global::tink.core.TypedError) (( o as global::tink.core.Outcome_Failure ).failure) );
						return global::tink.streams._Stream.Stream_Impl_.ofError<Item>(((global::tink.core.TypedError) (e) ));
					}
					
					
				}
				
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class Stream_Impl__promise_53__Fun<Quality, Item> : global::haxe.lang.Function {
		
		public Stream_Impl__promise_53__Fun() : base(1, 0) {
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::tink.core.Outcome o = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.Outcome) (((object) (__fn_float1) )) )) : (((global::tink.core.Outcome) (__fn_dyn1) )) );
				switch (o._hx_index) {
					case 0:
					{
						global::tink.streams.StreamObject<Item, Quality> s = ((global::tink.streams.StreamObject<Item, Quality>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Item, Quality>(((global::tink.streams.StreamObject) (( o as global::tink.core.Outcome_Success ).data) ))) );
						return global::tink.streams._Stream.Stream_Impl_.dirty<Item, Quality>(((global::tink.streams.StreamObject<Item, Quality>) (s) ));
					}
					
					
					case 1:
					{
						global::tink.core.TypedError e = ((global::tink.core.TypedError) (( o as global::tink.core.Outcome_Failure ).failure) );
						return global::tink.streams._Stream.Stream_Impl_.ofError<Item>(((global::tink.core.TypedError) (e) ));
					}
					
					
				}
				
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class RegroupStatus : global::haxe.lang.Enum {
		
		protected RegroupStatus(int index) : base(index) {
		}
		
		
		public static readonly global::tink.streams.RegroupStatus Flowing = new global::tink.streams.RegroupStatus_Flowing();
		
		public static global::tink.streams.RegroupStatus Errored(global::tink.core.TypedError e) {
			return new global::tink.streams.RegroupStatus_Errored(e);
		}
		
		
		public static readonly global::tink.streams.RegroupStatus Ended = new global::tink.streams.RegroupStatus_Ended();
		
		protected static readonly string[] __hx_constructs = new string[]{"Flowing", "Errored", "Ended"};
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public sealed class RegroupStatus_Flowing : global::tink.streams.RegroupStatus {
		
		public RegroupStatus_Flowing() : base(0) {
		}
		
		
		public override string getTag() {
			return "Flowing";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public sealed class RegroupStatus_Errored : global::tink.streams.RegroupStatus {
		
		public RegroupStatus_Errored(global::tink.core.TypedError e) : base(1) {
			this.e = e;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.e});
		}
		
		
		public override string getTag() {
			return "Errored";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(1, new object[]{this.e});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::tink.streams.RegroupStatus_Errored en = ( other as global::tink.streams.RegroupStatus_Errored );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.e) ), ((object) (en.e) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("Errored", new object[]{this.e});
		}
		
		
		public readonly global::tink.core.TypedError e;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public sealed class RegroupStatus_Ended : global::tink.streams.RegroupStatus {
		
		public RegroupStatus_Ended() : base(2) {
		}
		
		
		public override string getTag() {
			return "Ended";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class RegroupResult : global::haxe.lang.Enum {
		
		protected RegroupResult(int index) : base(index) {
		}
		
		
		public static global::tink.streams.RegroupResult Converted(global::tink.streams.StreamObject data) {
			return new global::tink.streams.RegroupResult_Converted(data);
		}
		
		
		public static global::tink.streams.RegroupResult Terminated(global::haxe.ds.Option data) {
			return new global::tink.streams.RegroupResult_Terminated(data);
		}
		
		
		public static readonly global::tink.streams.RegroupResult Untouched = new global::tink.streams.RegroupResult_Untouched();
		
		public static global::tink.streams.RegroupResult Errored(global::tink.core.TypedError e) {
			return new global::tink.streams.RegroupResult_Errored(e);
		}
		
		
		protected static readonly string[] __hx_constructs = new string[]{"Converted", "Terminated", "Untouched", "Errored"};
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public sealed class RegroupResult_Converted : global::tink.streams.RegroupResult {
		
		public RegroupResult_Converted(global::tink.streams.StreamObject data) : base(0) {
			this.data = data;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.data});
		}
		
		
		public override string getTag() {
			return "Converted";
		}
		
		
		public override int GetHashCode() {
			return global::haxe.lang.Enum.paramsGetHashCode(0, new object[]{this.data});
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::tink.streams.RegroupResult_Converted en = ( other as global::tink.streams.RegroupResult_Converted );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.data) ), ((object) (en.data) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("Converted", new object[]{this.data});
		}
		
		
		public readonly global::tink.streams.StreamObject data;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public sealed class RegroupResult_Terminated : global::tink.streams.RegroupResult {
		
		public RegroupResult_Terminated(global::haxe.ds.Option data) : base(1) {
			this.data = data;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.data});
		}
		
		
		public override string getTag() {
			return "Terminated";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(1, new object[]{this.data});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::tink.streams.RegroupResult_Terminated en = ( other as global::tink.streams.RegroupResult_Terminated );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.data) ), ((object) (en.data) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("Terminated", new object[]{this.data});
		}
		
		
		public readonly global::haxe.ds.Option data;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public sealed class RegroupResult_Untouched : global::tink.streams.RegroupResult {
		
		public RegroupResult_Untouched() : base(2) {
		}
		
		
		public override string getTag() {
			return "Untouched";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public sealed class RegroupResult_Errored : global::tink.streams.RegroupResult {
		
		public RegroupResult_Errored(global::tink.core.TypedError e) : base(3) {
			this.e = e;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.e});
		}
		
		
		public override string getTag() {
			return "Errored";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(3, new object[]{this.e});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::tink.streams.RegroupResult_Errored en = ( other as global::tink.streams.RegroupResult_Errored );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.e) ), ((object) (en.e) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("Errored", new object[]{this.e});
		}
		
		
		public readonly global::tink.core.TypedError e;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public sealed class Regrouper_Impl_ {
		
		public static object ofIgnorance<In, Out, Quality>(global::haxe.lang.Function f) {
			{
				global::haxe.lang.Function __temp_odecl1 = new global::tink.streams._Stream.Regrouper_Impl__ofIgnorance_80__Fun<Out, Quality, In>(f);
				return new global::haxe.lang.DynamicObject(new int[]{607880558}, new object[]{__temp_odecl1}, new int[]{}, new double[]{});
			}
			
		}
		
		
		public static object ofIgnoranceSync<In, Out, Quality>(global::haxe.lang.Function f) {
			{
				global::haxe.lang.Function __temp_odecl1 = new global::tink.streams._Stream.Regrouper_Impl__ofIgnoranceSync_83__Fun<Out, Quality, In>(f);
				return new global::haxe.lang.DynamicObject(new int[]{607880558}, new object[]{__temp_odecl1}, new int[]{}, new double[]{});
			}
			
		}
		
		
		public static object ofFunc<In, Out, Quality>(global::haxe.lang.Function f) {
			return new global::haxe.lang.DynamicObject(new int[]{607880558}, new object[]{f}, new int[]{}, new double[]{});
		}
		
		
		public static object ofFuncSync<In, Out, Quality>(global::haxe.lang.Function f) {
			{
				global::haxe.lang.Function __temp_odecl1 = new global::tink.streams._Stream.Regrouper_Impl__ofFuncSync_89__Fun<Out, Quality, In>(f);
				return new global::haxe.lang.DynamicObject(new int[]{607880558}, new object[]{__temp_odecl1}, new int[]{}, new double[]{});
			}
			
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class Regrouper_Impl__ofIgnorance_80__Fun<Out, Quality, In> : global::haxe.lang.Function {
		
		public Regrouper_Impl__ofIgnorance_80__Fun(global::haxe.lang.Function f) : base(2, 0) {
			this.f = f;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::tink.streams.RegroupStatus _ = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.streams.RegroupStatus) (((object) (__fn_float2) )) )) : (((global::tink.streams.RegroupStatus) (__fn_dyn2) )) );
			global::Array<In> i = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<In>) (global::Array<object>.__hx_cast<In>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<In>) (global::Array<object>.__hx_cast<In>(((global::Array) (__fn_dyn1) ))) )) );
			return ((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (this.f.__hx_invoke1_o(default(double), i)) ))) );
		}
		
		
		public global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class Regrouper_Impl__ofIgnoranceSync_83__Fun<Out, Quality, In> : global::haxe.lang.Function {
		
		public Regrouper_Impl__ofIgnoranceSync_83__Fun(global::haxe.lang.Function f) : base(2, 0) {
			this.f = f;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::tink.streams.RegroupStatus _ = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.streams.RegroupStatus) (((object) (__fn_float2) )) )) : (((global::tink.streams.RegroupStatus) (__fn_dyn2) )) );
			global::Array<In> i = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<In>) (global::Array<object>.__hx_cast<In>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<In>) (global::Array<object>.__hx_cast<In>(((global::Array) (__fn_dyn1) ))) )) );
			return new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((global::tink.streams.RegroupResult) (this.f.__hx_invoke1_o(default(double), i)) ))) ));
		}
		
		
		public global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class Regrouper_Impl__ofFuncSync_89__Fun<Out, Quality, In> : global::haxe.lang.Function {
		
		public Regrouper_Impl__ofFuncSync_89__Fun(global::haxe.lang.Function f) : base(2, 0) {
			this.f = f;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::tink.streams.RegroupStatus s = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.streams.RegroupStatus) (((object) (__fn_float2) )) )) : (((global::tink.streams.RegroupStatus) (__fn_dyn2) )) );
			global::Array<In> i = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<In>) (global::Array<object>.__hx_cast<In>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<In>) (global::Array<object>.__hx_cast<In>(((global::Array) (__fn_dyn1) ))) )) );
			return new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((global::tink.streams.RegroupResult) (this.f.__hx_invoke2_o(default(double), i, default(double), s)) ))) ));
		}
		
		
		public global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class CompoundStream<Item, Quality> : global::tink.streams.StreamBase<Item, Quality>, global::tink.streams._Stream.CompoundStream {
		
		public CompoundStream(global::haxe.lang.EmptyObject empty) : base(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) )) {
		}
		
		
		public CompoundStream(global::Array parts) {
			global::tink.streams._Stream.CompoundStream<object, object>.__hx_ctor_tink_streams__Stream_CompoundStream<Item, Quality>(((global::tink.streams._Stream.CompoundStream<Item, Quality>) (this) ), ((global::Array) (parts) ));
		}
		
		
		protected static void __hx_ctor_tink_streams__Stream_CompoundStream<Item_c, Quality_c>(global::tink.streams._Stream.CompoundStream<Item_c, Quality_c> __hx_this, global::Array parts) {
			__hx_this.parts = parts;
		}
		
		
		public static new object __hx_cast<Item_c_c, Quality_c_c>(global::tink.streams._Stream.CompoundStream me) {
			return ( (( me != null )) ? (me.tink_streams__Stream_CompoundStream_cast<Item_c_c, Quality_c_c>()) : default(object) );
		}
		
		
		public static void consumeParts<Item1, Quality2, Safety>(global::Array parts, global::haxe.lang.Function handler, global::haxe.lang.Function cb) {
			global::Array[] parts1 = new global::Array[]{parts};
			if (( ((int) (global::haxe.lang.Runtime.getField_f(((global::Array) (parts1[0]) ), "length", 520590566, true)) ) == 0 )) {
				cb.__hx_invoke1_o(default(double), global::tink.streams.Conclusion.Depleted);
			}
			else {
				((global::tink.streams.StreamObject<Item1, Quality2>) (global::tink.streams._Stream.Parts_Impl_.@get<Item1, Quality2>(((global::Array) (parts1[0]) ), ((int) (0) ))) ).forEach<Safety>(((global::haxe.lang.Function) (handler) )).handle(new global::tink.streams._Stream.CompoundStream_consumeParts_589__Fun<Quality2, Safety, Item1>(parts1, handler, cb));
			}
			
		}
		
		
		public static global::tink.streams.StreamObject<Item3, Quality4> of<Item3, Quality4>(global::Array<object> streams) {
			global::Array<object> ret = new global::Array<object>(new object[]{});
			{
				int _g = 0;
				while (( _g < streams.length )) {
					global::tink.streams.StreamObject<Item3, Quality4> s = ((global::tink.streams.StreamObject<Item3, Quality4>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Item3, Quality4>(((global::tink.streams.StreamObject) (streams[_g]) ))) );
					 ++ _g;
					s.decompose(ret);
				}
				
			}
			
			if (( ret.length == 0 )) {
				return ((global::tink.streams.StreamObject<Item3, Quality4>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Item3, Quality4>(((global::tink.streams.StreamObject) (((object) (global::tink.streams.Empty<object, object>.inst) )) ))) );
			}
			else {
				return new global::tink.streams._Stream.CompoundStream<Item3, Quality4>(((global::Array) (global::tink.streams._Stream.Parts_Impl_.ofArray<object, object>(((global::Array<object>) (ret) ))) ));
			}
			
		}
		
		
		public virtual object tink_streams__Stream_CompoundStream_cast<Item_c, Quality_c>() {
			if (( global::haxe.lang.Runtime.eq(typeof(Item), typeof(Item_c)) && global::haxe.lang.Runtime.eq(typeof(Quality), typeof(Quality_c)) )) {
				return this;
			}
			
			global::tink.streams._Stream.CompoundStream<Item_c, Quality_c> new_me = new global::tink.streams._Stream.CompoundStream<Item_c, Quality_c>(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
			global::Array<object> fields = global::Reflect.fields(this);
			int i = 0;
			while (( i < fields.length )) {
				string field = global::haxe.lang.Runtime.toString(fields[i++]);
				global::Reflect.setField(new_me, field, global::Reflect.field(this, field));
			}
			
			return new_me;
		}
		
		
		public override object tink_streams_StreamObject_cast<Item_c, Quality_c>() {
			return this.tink_streams__Stream_CompoundStream_cast<Item, Quality>();
		}
		
		
		public override object tink_streams_StreamBase_cast<Item_c, Quality_c>() {
			return this.tink_streams__Stream_CompoundStream_cast<Item, Quality>();
		}
		
		
		public global::Array parts;
		
		public override bool get_depleted() {
			unchecked {
				switch (((int) (global::haxe.lang.Runtime.getField_f(((global::Array) (this.parts) ), "length", 520590566, true)) )) {
					case 0:
					{
						return true;
					}
					
					
					case 1:
					{
						return ((global::tink.streams.StreamObject<Item, Quality>) (global::tink.streams._Stream.Parts_Impl_.@get<Item, Quality>(((global::Array) (this.parts) ), ((int) (0) ))) ).get_depleted();
					}
					
					
					default:
					{
						return false;
					}
					
				}
				
			}
		}
		
		
		public override global::tink.core._Future.FutureObject<object> next() {
			global::tink.streams._Stream.CompoundStream<Item, Quality> _gthis = this;
			if (( ((int) (global::haxe.lang.Runtime.getField_f(((global::Array) (this.parts) ), "length", 520590566, true)) ) == 0 )) {
				return ((global::tink.core._Future.FutureObject<object>) (new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (global::tink.streams.Step.End) ))) ))) );
			}
			else {
				global::tink.core._Future.FutureObject<object> ret = ((global::tink.core._Future.FutureObject<object>) (global::tink.streams._Stream.Parts_Impl_.@get<Item, Quality>(((global::Array) (this.parts) ), ((int) (0) )).next()) ).flatMap<object>(((global::haxe.lang.Function) (new global::tink.streams._Stream.CompoundStream_next_568__Fun<Quality, Item>(_gthis)) ));
				return ret.gather();
			}
			
		}
		
		
		public override void decompose(global::Array<object> @into) {
			int _g = 0;
			global::Array _g1 = this.parts;
			while (( _g < ((int) (global::haxe.lang.Runtime.getField_f(((global::Array) (_g1) ), "length", 520590566, true)) ) )) {
				global::tink.streams.StreamObject<Item, Quality> p = global::tink.streams._Stream.Parts_Impl_.@get<Item, Quality>(((global::Array) (_g1) ), ((int) (_g) ));
				 ++ _g;
				p.decompose(@into);
			}
			
		}
		
		
		public override global::tink.core._Future.FutureObject<object> forEach<Safety>(global::haxe.lang.Function handler) {
			global::Array parts = ((global::Array) (this.parts) );
			global::haxe.lang.Function handler1 = handler;
			return global::tink.core._Future.Future_Impl_.async<object>(((global::haxe.lang.Function) (new global::tink.streams._Stream.CompoundStream_forEach_583__Fun<Quality, Safety, Item>(parts, handler1)) ), default(global::haxe.lang.Null<bool>));
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1029017888:
					{
						this.parts = ((global::Array) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1153313194:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "forEach", 1153313194)) );
					}
					
					
					case 2057814961:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "decompose", 2057814961)) );
					}
					
					
					case 1224901875:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "next", 1224901875)) );
					}
					
					
					case 790633684:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_depleted", 790633684)) );
					}
					
					
					case 1029017888:
					{
						return this.parts;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("parts");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class CompoundStream_next_568__Fun<Quality, Item> : global::haxe.lang.Function {
		
		public CompoundStream_next_568__Fun(global::tink.streams._Stream.CompoundStream<Item, Quality> _gthis) : base(1, 0) {
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::tink.streams.Step v = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.streams.Step) (((object) (__fn_float1) )) )) : (((global::tink.streams.Step) (__fn_dyn1) )) );
				switch (v._hx_index) {
					case 0:
					{
						global::tink.streams.StreamObject<Item, Quality> rest = ((global::tink.streams.StreamObject<Item, Quality>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Item, Quality>(((global::tink.streams.StreamObject) (( v as global::tink.streams.Step_Link ).next) ))) );
						Item v1 = global::haxe.lang.Runtime.genericCast<Item>(( v as global::tink.streams.Step_Link ).@value);
						global::Array copy = global::tink.streams._Stream.Parts_Impl_.copy<Item, Quality>(((global::Array) (this._gthis.parts) ));
						global::tink.streams._Stream.Parts_Impl_.@set<Item, Quality>(((global::Array) (copy) ), ((int) (0) ), ((global::tink.streams.StreamObject<Item, Quality>) (rest) ));
						return new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (global::tink.streams.Step.Link(v1, new global::tink.streams._Stream.CompoundStream<Item, Quality>(((global::Array) (copy) )))) ))) ));
					}
					
					
					case 2:
					{
						if (( ((int) (global::haxe.lang.Runtime.getField_f(((global::Array) (this._gthis.parts) ), "length", 520590566, true)) ) > 1 )) {
							return global::tink.streams._Stream.Parts_Impl_.@get<Item, Quality>(((global::Array) (this._gthis.parts) ), ((int) (1) )).next();
						}
						else {
							return ((global::tink.core._Future.FutureObject<object>) (new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (v) ))) ))) );
						}
						
					}
					
					
					default:
					{
						return ((global::tink.core._Future.FutureObject<object>) (new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (v) ))) ))) );
					}
					
				}
				
			}
		}
		
		
		public global::tink.streams._Stream.CompoundStream<Item, Quality> _gthis;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class CompoundStream_forEach_583__Fun<Quality, Safety, Item> : global::haxe.lang.Function {
		
		public CompoundStream_forEach_583__Fun(global::Array parts, global::haxe.lang.Function handler1) : base(1, 0) {
			this.parts = parts;
			this.handler1 = handler1;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::haxe.lang.Function cb = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (((global::haxe.lang.Function) (__fn_dyn1) )) );
			global::tink.streams._Stream.CompoundStream<object, object>.consumeParts<Item, Quality, Safety>(((global::Array) (this.parts) ), ((global::haxe.lang.Function) (this.handler1) ), ((global::haxe.lang.Function) (cb) ));
			return null;
		}
		
		
		public global::Array parts;
		
		public global::haxe.lang.Function handler1;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class CompoundStream_consumeParts_589__Fun<Quality2, Safety, Item1> : global::haxe.lang.Function {
		
		public CompoundStream_consumeParts_589__Fun(global::Array[] parts1, global::haxe.lang.Function handler, global::haxe.lang.Function cb) : base(1, 0) {
			this.parts1 = parts1;
			this.handler = handler;
			this.cb = cb;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::tink.streams.Conclusion o = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.streams.Conclusion) (((object) (__fn_float1) )) )) : (((global::tink.streams.Conclusion) (__fn_dyn1) )) );
				switch (o._hx_index) {
					case 0:
					{
						global::tink.streams.StreamObject<Item1, Quality2> rest = ((global::tink.streams.StreamObject<Item1, Quality2>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Item1, Quality2>(((global::tink.streams.StreamObject) (( o as global::tink.streams.Conclusion_Halted ).rest) ))) );
						{
							global::Array tmp = global::tink.streams._Stream.Parts_Impl_.copy<Item1, Quality2>(((global::Array) (this.parts1[0]) ));
							this.parts1[0] = tmp;
							global::tink.streams._Stream.Parts_Impl_.@set<Item1, Quality2>(((global::Array) (this.parts1[0]) ), ((int) (0) ), ((global::tink.streams.StreamObject<Item1, Quality2>) (rest) ));
							global::tink.streams.Conclusion tmp1 = global::tink.streams.Conclusion.Halted(new global::tink.streams._Stream.CompoundStream<Item1, Quality2>(((global::Array) (this.parts1[0]) )));
							this.cb.__hx_invoke1_o(default(double), tmp1);
						}
						
						break;
					}
					
					
					case 1:
					{
						global::tink.streams.StreamObject<Item1, Quality2> at = ((global::tink.streams.StreamObject<Item1, Quality2>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Item1, Quality2>(((global::tink.streams.StreamObject) (( o as global::tink.streams.Conclusion_Clogged ).at) ))) );
						global::tink.core.TypedError e = ( o as global::tink.streams.Conclusion_Clogged ).error;
						{
							if (((global::tink.streams.StreamObject<Item1, Quality2>) (at) ).get_depleted()) {
								global::Array tmp2 = global::tink.streams._Stream.Parts_Impl_.slice<Item1, Quality2>(((global::Array) (this.parts1[0]) ), ((int) (1) ), default(global::haxe.lang.Null<int>));
								this.parts1[0] = tmp2;
							}
							else {
								global::Array tmp3 = global::tink.streams._Stream.Parts_Impl_.copy<Item1, Quality2>(((global::Array) (this.parts1[0]) ));
								this.parts1[0] = tmp3;
								global::tink.streams._Stream.Parts_Impl_.@set<Item1, Quality2>(((global::Array) (this.parts1[0]) ), ((int) (0) ), ((global::tink.streams.StreamObject<Item1, Quality2>) (at) ));
							}
							
							global::tink.streams.Conclusion tmp4 = global::tink.streams.Conclusion.Clogged(e, new global::tink.streams._Stream.CompoundStream<Item1, Quality2>(((global::Array) (this.parts1[0]) )));
							this.cb.__hx_invoke1_o(default(double), tmp4);
						}
						
						break;
					}
					
					
					case 2:
					{
						global::tink.core.TypedError e1 = ( o as global::tink.streams.Conclusion_Failed ).error;
						this.cb.__hx_invoke1_o(default(double), global::tink.streams.Conclusion.Failed(e1));
						break;
					}
					
					
					case 3:
					{
						global::tink.streams._Stream.CompoundStream<object, object>.consumeParts<object, object, object>(((global::Array) (global::tink.streams._Stream.Parts_Impl_.slice<object, object>(((global::Array) (this.parts1[0]) ), ((int) (1) ), default(global::haxe.lang.Null<int>))) ), ((global::haxe.lang.Function) (this.handler) ), ((global::haxe.lang.Function) (this.cb) ));
						break;
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public global::Array[] parts1;
		
		public global::haxe.lang.Function handler;
		
		public global::haxe.lang.Function cb;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	[global::haxe.lang.GenericInterface(typeof(global::tink.streams._Stream.CompoundStream<object, object>))]
	public interface CompoundStream : global::haxe.lang.IHxObject, global::tink.streams.StreamBase, global::haxe.lang.IGenericObject {
		
		object tink_streams__Stream_CompoundStream_cast<Item_c, Quality_c>();
		
		object tink_streams_StreamBase_cast<Item_c, Quality_c>();
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class RegroupStream<In, Out, Quality> : global::tink.streams._Stream.CompoundStream<Out, Quality>, global::tink.streams._Stream.RegroupStream {
		
		public RegroupStream(global::haxe.lang.EmptyObject empty) : base(global::haxe.lang.EmptyObject.EMPTY) {
		}
		
		
		public RegroupStream(global::tink.streams.StreamObject<In, Quality> source, object f, global::tink.streams.StreamObject<Out, Quality> prev) : base(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) )) {
			global::tink.streams._Stream.RegroupStream<object, object, object>.__hx_ctor_tink_streams__Stream_RegroupStream<In, Out, Quality>(((global::tink.streams._Stream.RegroupStream<In, Out, Quality>) (this) ), ((global::tink.streams.StreamObject<In, Quality>) (source) ), ((object) (f) ), ((global::tink.streams.StreamObject<Out, Quality>) (prev) ));
		}
		
		
		protected static void __hx_ctor_tink_streams__Stream_RegroupStream<In_c, Out_c, Quality_c>(global::tink.streams._Stream.RegroupStream<In_c, Out_c, Quality_c> __hx_this, global::tink.streams.StreamObject<In_c, Quality_c> source, object f, global::tink.streams.StreamObject<Out_c, Quality_c> prev) {
			if (( prev == null )) {
				prev = ((global::tink.streams.StreamObject<Out_c, Quality_c>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Out_c, Quality_c>(((global::tink.streams.StreamObject) (((object) (global::tink.streams.Empty<object, object>.inst) )) ))) );
			}
			
			global::tink.streams.StreamObject<Out_c, Quality_c>[] ret = new global::tink.streams.StreamObject<Out_c, Quality_c>[]{null};
			bool[] terminated = new bool[]{false};
			global::Array<In_c> buf = new global::Array<In_c>(new In_c[]{});
			global::tink.core._Future.FutureObject<object> ret1 = ((global::tink.core._Future.FutureObject<object>) (source.forEach<object>(((global::haxe.lang.Function) (global::tink.streams._Stream.Handler_Impl_.ofUnknown<object, object>(((global::haxe.lang.Function) (new global::tink.streams._Stream.RegroupStream___hx_ctor_tink_streams__Stream_RegroupStream_103__Fun<Quality_c, Out_c, In_c>(terminated, ret, f, buf)) ))) ))) ).map<object>(((global::haxe.lang.Function) (new global::tink.streams._Stream.RegroupStream___hx_ctor_tink_streams__Stream_RegroupStream_118__Fun<Out_c, Quality_c, In_c>(terminated, ret, f, ((global::Array<In_c>) (global::Array<object>.__hx_cast<In_c>(((global::Array) (buf) ))) ))) ));
			global::tink.streams.StreamObject<Out_c, Quality_c> next = global::tink.streams._Stream.Stream_Impl_.flatten<Out_c, Quality_c>(((global::tink.core._Future.FutureObject<object>) (ret1.gather()) ));
			global::tink.streams._Stream.CompoundStream<object, object>.__hx_ctor_tink_streams__Stream_CompoundStream<Out_c, Quality_c>(((global::tink.streams._Stream.CompoundStream<Out_c, Quality_c>) (__hx_this) ), ((global::Array) (global::tink.streams._Stream.Parts_Impl_.ofArray<object, object>(((global::Array<object>) (new global::Array<object>(new object[]{prev, next})) ))) ));
		}
		
		
		public static new object __hx_cast<In_c_c, Out_c_c, Quality_c_c>(global::tink.streams._Stream.RegroupStream me) {
			return ( (( me != null )) ? (me.tink_streams__Stream_RegroupStream_cast<In_c_c, Out_c_c, Quality_c_c>()) : default(object) );
		}
		
		
		public virtual object tink_streams__Stream_RegroupStream_cast<In_c, Out_c, Quality_c>() {
			if (( global::haxe.lang.Runtime.eq(typeof(In), typeof(In_c)) && ( global::haxe.lang.Runtime.eq(typeof(Out), typeof(Out_c)) && global::haxe.lang.Runtime.eq(typeof(Quality), typeof(Quality_c)) ) )) {
				return this;
			}
			
			global::tink.streams._Stream.RegroupStream<In_c, Out_c, Quality_c> new_me = new global::tink.streams._Stream.RegroupStream<In_c, Out_c, Quality_c>(global::haxe.lang.EmptyObject.EMPTY);
			global::Array<object> fields = global::Reflect.fields(this);
			int i = 0;
			while (( i < fields.length )) {
				string field = global::haxe.lang.Runtime.toString(fields[i++]);
				global::Reflect.setField(new_me, field, global::Reflect.field(this, field));
			}
			
			return new_me;
		}
		
		
		public override object tink_streams_StreamObject_cast<Item_c, Quality_c>() {
			return this.tink_streams__Stream_RegroupStream_cast<In, Out, Quality>();
		}
		
		
		public override object tink_streams_StreamBase_cast<Item_c, Quality_c>() {
			return this.tink_streams__Stream_RegroupStream_cast<In, Out, Quality>();
		}
		
		
		public override object tink_streams__Stream_CompoundStream_cast<Item_c, Quality_c>() {
			return this.tink_streams__Stream_RegroupStream_cast<In, Out, Quality>();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class RegroupStream___hx_ctor_tink_streams__Stream_RegroupStream_122__Fun<Out_c> : global::haxe.lang.Function {
		
		public RegroupStream___hx_ctor_tink_streams__Stream_RegroupStream_122__Fun() : base(1, 0) {
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::tink.streams.RegroupResult o2 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.streams.RegroupResult) (((object) (__fn_float1) )) )) : (((global::tink.streams.RegroupResult) (__fn_dyn1) )) );
				switch (o2._hx_index) {
					case 0:
					{
						global::tink.streams.StreamObject<Out_c, object> v3 = ((global::tink.streams.StreamObject<Out_c, object>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Out_c, object>(((global::tink.streams.StreamObject) (( o2 as global::tink.streams.RegroupResult_Converted ).data) ))) );
						return v3;
					}
					
					
					case 1:
					{
						global::haxe.ds.Option v4 = ( o2 as global::tink.streams.RegroupResult_Terminated ).data;
						global::tink.core._Lazy.LazyObject<object> l1 = ((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyFunc<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::tink.streams.Empty<object, object>), "make", 1213610478)) ))) );
						if (( v4._hx_index == 0 )) {
							global::tink.streams.StreamObject<Out_c, object> v5 = ((global::tink.streams.StreamObject<Out_c, object>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Out_c, object>(((global::tink.streams.StreamObject) (( v4 as global::haxe.ds.Option_Some ).v) ))) );
							return v5;
						}
						else {
							return ((global::tink.streams.StreamObject<Out_c, object>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Out_c, object>(((global::tink.streams.StreamObject) (((global::tink.core._Lazy.LazyObject<object>) (l1) ).@get()) ))) );
						}
						
					}
					
					
					case 2:
					{
						return ((global::tink.streams.StreamObject<Out_c, object>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Out_c, object>(((global::tink.streams.StreamObject) (((object) (global::tink.streams.Empty<object, object>.inst) )) ))) );
					}
					
					
					case 3:
					{
						global::tink.core.TypedError e3 = ( o2 as global::tink.streams.RegroupResult_Errored ).e;
						return ((global::tink.streams.StreamObject<Out_c, object>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Out_c, object>(((global::tink.streams.StreamObject) (global::tink.streams._Stream.Stream_Impl_.ofError<object>(((global::tink.core.TypedError) (e3) ))) ))) );
					}
					
					
				}
				
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class RegroupStream___hx_ctor_tink_streams__Stream_RegroupStream_118__Fun<Out_c, Quality_c, In_c> : global::haxe.lang.Function {
		
		public RegroupStream___hx_ctor_tink_streams__Stream_RegroupStream_118__Fun(bool[] terminated, global::tink.streams.StreamObject<Out_c, Quality_c>[] ret, object f, global::Array<In_c> buf) : base(1, 0) {
			this.terminated = terminated;
			this.ret = ret;
			this.f = f;
			this.buf = buf;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::tink.streams.Conclusion o1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.streams.Conclusion) (((object) (__fn_float1) )) )) : (((global::tink.streams.Conclusion) (__fn_dyn1) )) );
				switch (o1._hx_index) {
					case 0:
					{
						if (this.terminated[0]) {
							return this.ret[0];
						}
						else {
							global::tink.streams.StreamObject<In_c, Quality_c> rest = ((global::tink.streams.StreamObject<In_c, Quality_c>) (global::tink.streams.StreamObject__Statics_.__hx_cast<In_c, Quality_c>(((global::tink.streams.StreamObject) (( o1 as global::tink.streams.Conclusion_Halted ).rest) ))) );
							return new global::tink.streams._Stream.RegroupStream<In_c, Out_c, Quality_c>(rest, this.f, this.ret[0]);
						}
						
					}
					
					
					case 1:
					{
						global::tink.streams.StreamObject<In_c, Quality_c> rest1 = ((global::tink.streams.StreamObject<In_c, Quality_c>) (global::tink.streams.StreamObject__Statics_.__hx_cast<In_c, Quality_c>(((global::tink.streams.StreamObject) (( o1 as global::tink.streams.Conclusion_Clogged ).at) ))) );
						global::tink.core.TypedError e1 = ( o1 as global::tink.streams.Conclusion_Clogged ).error;
						return ((global::tink.streams.StreamObject<Out_c, Quality_c>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Out_c, Quality_c>(((global::tink.streams.StreamObject) (((object) (new global::tink.streams._Stream.CloggedStream<object>(((global::tink.streams.StreamObject<object, object>) (global::tink.streams.StreamObject__Statics_.__hx_cast<object, object>(((global::tink.streams.StreamObject) (global::tink.streams._Stream.Stream_Impl_.ofError<object>(((global::tink.core.TypedError) (e1) ))) ))) ), ((global::tink.core.TypedError) (((object) (rest1) )) ))) )) ))) );
					}
					
					
					case 2:
					{
						global::tink.core.TypedError e2 = ( o1 as global::tink.streams.Conclusion_Failed ).error;
						return global::tink.streams._Stream.Stream_Impl_.ofError<Out_c>(((global::tink.core.TypedError) (e2) ));
					}
					
					
					case 3:
					{
						if (( ((int) (global::haxe.lang.Runtime.getField_f(this.buf, "length", 520590566, true)) ) == 0 )) {
							return ((global::tink.streams.StreamObject) (((object) (global::tink.streams.Empty<object, object>.inst) )) );
						}
						else {
							global::tink.core._Future.FutureObject<object> ret4 = ((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (global::haxe.lang.Runtime.callField(this.f, "apply", 607880558, new object[]{this.buf, global::tink.streams.RegroupStatus.Ended})) ))) ).map<object>(((global::haxe.lang.Function) (new global::tink.streams._Stream.RegroupStream___hx_ctor_tink_streams__Stream_RegroupStream_122__Fun<Out_c>()) ));
							return global::tink.streams._Stream.Stream_Impl_.flatten<Out_c, object>(((global::tink.core._Future.FutureObject<object>) (ret4.gather()) ));
						}
						
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public bool[] terminated;
		
		public global::tink.streams.StreamObject<Out_c, Quality_c>[] ret;
		
		public object f;
		
		public global::Array<In_c> buf;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class RegroupStream___hx_ctor_tink_streams__Stream_RegroupStream_105__Fun<Quality_c, Out_c> : global::haxe.lang.Function {
		
		public RegroupStream___hx_ctor_tink_streams__Stream_RegroupStream_105__Fun(bool[] terminated, global::tink.streams.StreamObject<Out_c, Quality_c>[] ret) : base(1, 0) {
			this.terminated = terminated;
			this.ret = ret;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::tink.streams.RegroupResult o = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.streams.RegroupResult) (((object) (__fn_float1) )) )) : (((global::tink.streams.RegroupResult) (__fn_dyn1) )) );
				switch (o._hx_index) {
					case 0:
					{
						global::tink.streams.StreamObject<Out_c, Quality_c> v = ((global::tink.streams.StreamObject<Out_c, Quality_c>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Out_c, Quality_c>(((global::tink.streams.StreamObject) (( o as global::tink.streams.RegroupResult_Converted ).data) ))) );
						this.ret[0] = v;
						return global::tink.streams.Handled.Finish;
					}
					
					
					case 1:
					{
						global::haxe.ds.Option v1 = ( o as global::tink.streams.RegroupResult_Terminated ).data;
						global::tink.core._Lazy.LazyObject<object> l = ((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyFunc<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::tink.streams.Empty<object, object>), "make", 1213610478)) ))) );
						global::tink.streams.StreamObject<Out_c, Quality_c> ret3 = null;
						if (( v1._hx_index == 0 )) {
							global::tink.streams.StreamObject<Out_c, Quality_c> v2 = ((global::tink.streams.StreamObject<Out_c, Quality_c>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Out_c, Quality_c>(((global::tink.streams.StreamObject) (( v1 as global::haxe.ds.Option_Some ).v) ))) );
							ret3 = v2;
						}
						else {
							ret3 = ((global::tink.streams.StreamObject<Out_c, Quality_c>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Out_c, Quality_c>(((global::tink.streams.StreamObject) (((global::tink.core._Lazy.LazyObject<object>) (l) ).@get()) ))) );
						}
						
						this.ret[0] = ret3;
						this.terminated[0] = true;
						return global::tink.streams.Handled.Finish;
					}
					
					
					case 2:
					{
						return global::tink.streams.Handled.Resume;
					}
					
					
					case 3:
					{
						global::tink.core.TypedError e = ( o as global::tink.streams.RegroupResult_Errored ).e;
						return global::tink.streams.Handled.Clog(e);
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public bool[] terminated;
		
		public global::tink.streams.StreamObject<Out_c, Quality_c>[] ret;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class RegroupStream___hx_ctor_tink_streams__Stream_RegroupStream_103__Fun<Quality_c, Out_c, In_c> : global::haxe.lang.Function {
		
		public RegroupStream___hx_ctor_tink_streams__Stream_RegroupStream_103__Fun(bool[] terminated, global::tink.streams.StreamObject<Out_c, Quality_c>[] ret, object f, global::Array<In_c> buf) : base(1, 0) {
			this.terminated = terminated;
			this.ret = ret;
			this.f = f;
			this.buf = buf;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			In_c item = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<In_c>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<In_c>(__fn_dyn1)) );
			this.buf.push(item);
			global::tink.core._Future.FutureObject<object> ret2 = ((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (global::haxe.lang.Runtime.callField(this.f, "apply", 607880558, new object[]{this.buf, global::tink.streams.RegroupStatus.Flowing})) ))) ).map<object>(((global::haxe.lang.Function) (new global::tink.streams._Stream.RegroupStream___hx_ctor_tink_streams__Stream_RegroupStream_105__Fun<Quality_c, Out_c>(this.terminated, this.ret)) ));
			return ret2.gather();
		}
		
		
		public bool[] terminated;
		
		public global::tink.streams.StreamObject<Out_c, Quality_c>[] ret;
		
		public object f;
		
		public global::Array<In_c> buf;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	[global::haxe.lang.GenericInterface(typeof(global::tink.streams._Stream.RegroupStream<object, object, object>))]
	public interface RegroupStream : global::haxe.lang.IHxObject, global::tink.streams._Stream.CompoundStream, global::haxe.lang.IGenericObject {
		
		object tink_streams__Stream_RegroupStream_cast<In_c, Out_c, Quality_c>();
		
		object tink_streams__Stream_CompoundStream_cast<Item_c, Quality_c>();
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class Handled : global::haxe.lang.Enum {
		
		protected Handled(int index) : base(index) {
		}
		
		
		public static readonly global::tink.streams.Handled BackOff = new global::tink.streams.Handled_BackOff();
		
		public static readonly global::tink.streams.Handled Finish = new global::tink.streams.Handled_Finish();
		
		public static readonly global::tink.streams.Handled Resume = new global::tink.streams.Handled_Resume();
		
		public static global::tink.streams.Handled Clog(global::tink.core.TypedError e) {
			return new global::tink.streams.Handled_Clog(e);
		}
		
		
		protected static readonly string[] __hx_constructs = new string[]{"BackOff", "Finish", "Resume", "Clog"};
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public sealed class Handled_BackOff : global::tink.streams.Handled {
		
		public Handled_BackOff() : base(0) {
		}
		
		
		public override string getTag() {
			return "BackOff";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public sealed class Handled_Finish : global::tink.streams.Handled {
		
		public Handled_Finish() : base(1) {
		}
		
		
		public override string getTag() {
			return "Finish";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public sealed class Handled_Resume : global::tink.streams.Handled {
		
		public Handled_Resume() : base(2) {
		}
		
		
		public override string getTag() {
			return "Resume";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public sealed class Handled_Clog : global::tink.streams.Handled {
		
		public Handled_Clog(global::tink.core.TypedError e) : base(3) {
			this.e = e;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.e});
		}
		
		
		public override string getTag() {
			return "Clog";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(3, new object[]{this.e});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::tink.streams.Handled_Clog en = ( other as global::tink.streams.Handled_Clog );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.e) ), ((object) (en.e) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("Clog", new object[]{this.e});
		}
		
		
		public readonly global::tink.core.TypedError e;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class Conclusion : global::haxe.lang.Enum {
		
		protected Conclusion(int index) : base(index) {
		}
		
		
		public static global::tink.streams.Conclusion Halted(global::tink.streams.StreamObject rest) {
			return new global::tink.streams.Conclusion_Halted(rest);
		}
		
		
		public static global::tink.streams.Conclusion Clogged(global::tink.core.TypedError error, global::tink.streams.StreamObject at) {
			return new global::tink.streams.Conclusion_Clogged(error, at);
		}
		
		
		public static global::tink.streams.Conclusion Failed(global::tink.core.TypedError error) {
			return new global::tink.streams.Conclusion_Failed(error);
		}
		
		
		public static readonly global::tink.streams.Conclusion Depleted = new global::tink.streams.Conclusion_Depleted();
		
		protected static readonly string[] __hx_constructs = new string[]{"Halted", "Clogged", "Failed", "Depleted"};
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public sealed class Conclusion_Halted : global::tink.streams.Conclusion {
		
		public Conclusion_Halted(global::tink.streams.StreamObject rest) : base(0) {
			this.rest = rest;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.rest});
		}
		
		
		public override string getTag() {
			return "Halted";
		}
		
		
		public override int GetHashCode() {
			return global::haxe.lang.Enum.paramsGetHashCode(0, new object[]{this.rest});
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::tink.streams.Conclusion_Halted en = ( other as global::tink.streams.Conclusion_Halted );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.rest) ), ((object) (en.rest) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("Halted", new object[]{this.rest});
		}
		
		
		public readonly global::tink.streams.StreamObject rest;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public sealed class Conclusion_Clogged : global::tink.streams.Conclusion {
		
		public Conclusion_Clogged(global::tink.core.TypedError error, global::tink.streams.StreamObject at) : base(1) {
			this.error = error;
			this.at = at;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.error, this.at});
		}
		
		
		public override string getTag() {
			return "Clogged";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(1, new object[]{this.error, this.at});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::tink.streams.Conclusion_Clogged en = ( other as global::tink.streams.Conclusion_Clogged );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.error) ), ((object) (en.error) ))) ) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.at) ), ((object) (en.at) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("Clogged", new object[]{this.error, this.at});
		}
		
		
		public readonly global::tink.core.TypedError error;
		
		public readonly global::tink.streams.StreamObject at;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public sealed class Conclusion_Failed : global::tink.streams.Conclusion {
		
		public Conclusion_Failed(global::tink.core.TypedError error) : base(2) {
			this.error = error;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.error});
		}
		
		
		public override string getTag() {
			return "Failed";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(2, new object[]{this.error});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::tink.streams.Conclusion_Failed en = ( other as global::tink.streams.Conclusion_Failed );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.error) ), ((object) (en.error) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("Failed", new object[]{this.error});
		}
		
		
		public readonly global::tink.core.TypedError error;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public sealed class Conclusion_Depleted : global::tink.streams.Conclusion {
		
		public Conclusion_Depleted() : base(3) {
		}
		
		
		public override string getTag() {
			return "Depleted";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class ReductionStep : global::haxe.lang.Enum {
		
		protected ReductionStep(int index) : base(index) {
		}
		
		
		public static global::tink.streams.ReductionStep Progress(object result) {
			return new global::tink.streams.ReductionStep_Progress(result);
		}
		
		
		public static global::tink.streams.ReductionStep Crash(global::tink.core.TypedError e) {
			return new global::tink.streams.ReductionStep_Crash(e);
		}
		
		
		protected static readonly string[] __hx_constructs = new string[]{"Progress", "Crash"};
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public sealed class ReductionStep_Progress : global::tink.streams.ReductionStep {
		
		public ReductionStep_Progress(object result) : base(0) {
			this.result = result;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.result});
		}
		
		
		public override string getTag() {
			return "Progress";
		}
		
		
		public override int GetHashCode() {
			return global::haxe.lang.Enum.paramsGetHashCode(0, new object[]{this.result});
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::tink.streams.ReductionStep_Progress en = ( other as global::tink.streams.ReductionStep_Progress );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.result) ), ((object) (en.result) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("Progress", new object[]{this.result});
		}
		
		
		public readonly object result;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public sealed class ReductionStep_Crash : global::tink.streams.ReductionStep {
		
		public ReductionStep_Crash(global::tink.core.TypedError e) : base(1) {
			this.e = e;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.e});
		}
		
		
		public override string getTag() {
			return "Crash";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(1, new object[]{this.e});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::tink.streams.ReductionStep_Crash en = ( other as global::tink.streams.ReductionStep_Crash );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.e) ), ((object) (en.e) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("Crash", new object[]{this.e});
		}
		
		
		public readonly global::tink.core.TypedError e;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class Reduction : global::haxe.lang.Enum {
		
		protected Reduction(int index) : base(index) {
		}
		
		
		public static global::tink.streams.Reduction Crashed(global::tink.core.TypedError error, global::tink.streams.StreamObject at) {
			return new global::tink.streams.Reduction_Crashed(error, at);
		}
		
		
		public static global::tink.streams.Reduction Failed(global::tink.core.TypedError error) {
			return new global::tink.streams.Reduction_Failed(error);
		}
		
		
		public static global::tink.streams.Reduction Reduced(object result) {
			return new global::tink.streams.Reduction_Reduced(result);
		}
		
		
		protected static readonly string[] __hx_constructs = new string[]{"Crashed", "Failed", "Reduced"};
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public sealed class Reduction_Crashed : global::tink.streams.Reduction {
		
		public Reduction_Crashed(global::tink.core.TypedError error, global::tink.streams.StreamObject at) : base(0) {
			this.error = error;
			this.at = at;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.error, this.at});
		}
		
		
		public override string getTag() {
			return "Crashed";
		}
		
		
		public override int GetHashCode() {
			return global::haxe.lang.Enum.paramsGetHashCode(0, new object[]{this.error, this.at});
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::tink.streams.Reduction_Crashed en = ( other as global::tink.streams.Reduction_Crashed );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.error) ), ((object) (en.error) ))) ) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.at) ), ((object) (en.at) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("Crashed", new object[]{this.error, this.at});
		}
		
		
		public readonly global::tink.core.TypedError error;
		
		public readonly global::tink.streams.StreamObject at;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public sealed class Reduction_Failed : global::tink.streams.Reduction {
		
		public Reduction_Failed(global::tink.core.TypedError error) : base(1) {
			this.error = error;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.error});
		}
		
		
		public override string getTag() {
			return "Failed";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(1, new object[]{this.error});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::tink.streams.Reduction_Failed en = ( other as global::tink.streams.Reduction_Failed );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.error) ), ((object) (en.error) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("Failed", new object[]{this.error});
		}
		
		
		public readonly global::tink.core.TypedError error;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public sealed class Reduction_Reduced : global::tink.streams.Reduction {
		
		public Reduction_Reduced(object result) : base(2) {
			this.result = result;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.result});
		}
		
		
		public override string getTag() {
			return "Reduced";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(2, new object[]{this.result});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::tink.streams.Reduction_Reduced en = ( other as global::tink.streams.Reduction_Reduced );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.result) ), ((object) (en.result) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("Reduced", new object[]{this.result});
		}
		
		
		public readonly object result;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class CloggedStream<Item> : global::tink.streams.StreamBase<Item, object>, global::tink.streams._Stream.CloggedStream {
		
		public CloggedStream(global::haxe.lang.EmptyObject empty) : base(global::haxe.lang.EmptyObject.EMPTY) {
		}
		
		
		public CloggedStream(global::tink.streams.StreamObject<Item, object> rest, global::tink.core.TypedError error) {
			global::tink.streams._Stream.CloggedStream<object>.__hx_ctor_tink_streams__Stream_CloggedStream<Item>(((global::tink.streams._Stream.CloggedStream<Item>) (this) ), ((global::tink.streams.StreamObject<Item, object>) (rest) ), ((global::tink.core.TypedError) (error) ));
		}
		
		
		protected static void __hx_ctor_tink_streams__Stream_CloggedStream<Item_c>(global::tink.streams._Stream.CloggedStream<Item_c> __hx_this, global::tink.streams.StreamObject<Item_c, object> rest, global::tink.core.TypedError error) {
			__hx_this.rest = rest;
			__hx_this.error = error;
		}
		
		
		public static new object __hx_cast<Item_c_c>(global::tink.streams._Stream.CloggedStream me) {
			return ( (( me != null )) ? (me.tink_streams__Stream_CloggedStream_cast<Item_c_c>()) : default(object) );
		}
		
		
		public virtual object tink_streams__Stream_CloggedStream_cast<Item_c>() {
			if (global::haxe.lang.Runtime.eq(typeof(Item), typeof(Item_c))) {
				return this;
			}
			
			global::tink.streams._Stream.CloggedStream<Item_c> new_me = new global::tink.streams._Stream.CloggedStream<Item_c>(global::haxe.lang.EmptyObject.EMPTY);
			global::Array<object> fields = global::Reflect.fields(this);
			int i = 0;
			while (( i < fields.length )) {
				string field = global::haxe.lang.Runtime.toString(fields[i++]);
				global::Reflect.setField(new_me, field, global::Reflect.field(this, field));
			}
			
			return new_me;
		}
		
		
		public override object tink_streams_StreamObject_cast<Item_c, Quality_c>() {
			return this.tink_streams__Stream_CloggedStream_cast<Item>();
		}
		
		
		public override object tink_streams_StreamBase_cast<Item_c, Quality_c>() {
			return this.tink_streams__Stream_CloggedStream_cast<Item>();
		}
		
		
		public global::tink.streams.StreamObject<Item, object> rest;
		
		public global::tink.core.TypedError error;
		
		public override global::tink.core._Future.FutureObject<object> next() {
			return new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (global::tink.streams.Step.Fail(this.error)) ))) ));
		}
		
		
		public override global::tink.core._Future.FutureObject<object> forEach<Safety>(global::haxe.lang.Function handler) {
			return new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((global::tink.streams.Conclusion) (global::tink.streams.Conclusion.Clogged(this.error, this.rest)) ))) ));
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1932118984:
					{
						this.error = ((global::tink.core.TypedError) (@value) );
						return @value;
					}
					
					
					case 1269259028:
					{
						this.rest = ((global::tink.streams.StreamObject<Item, object>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Item, object>(((global::tink.streams.StreamObject) (@value) ))) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1153313194:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "forEach", 1153313194)) );
					}
					
					
					case 1224901875:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "next", 1224901875)) );
					}
					
					
					case 1932118984:
					{
						return this.error;
					}
					
					
					case 1269259028:
					{
						return this.rest;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("error");
			baseArr.push("rest");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	[global::haxe.lang.GenericInterface(typeof(global::tink.streams._Stream.CloggedStream<object>))]
	public interface CloggedStream : global::haxe.lang.IHxObject, global::tink.streams.StreamBase, global::haxe.lang.IGenericObject {
		
		object tink_streams__Stream_CloggedStream_cast<Item_c>();
		
		object tink_streams_StreamBase_cast<Item_c, Quality_c>();
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class ErrorStream<Item> : global::tink.streams.StreamBase<Item, object>, global::tink.streams._Stream.ErrorStream {
		
		public ErrorStream(global::haxe.lang.EmptyObject empty) : base(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) )) {
		}
		
		
		public ErrorStream(global::tink.core.TypedError error) {
			global::tink.streams._Stream.ErrorStream<object>.__hx_ctor_tink_streams__Stream_ErrorStream<Item>(((global::tink.streams._Stream.ErrorStream<Item>) (this) ), ((global::tink.core.TypedError) (error) ));
		}
		
		
		protected static void __hx_ctor_tink_streams__Stream_ErrorStream<Item_c>(global::tink.streams._Stream.ErrorStream<Item_c> __hx_this, global::tink.core.TypedError error) {
			__hx_this.error = error;
		}
		
		
		public static new object __hx_cast<Item_c_c>(global::tink.streams._Stream.ErrorStream me) {
			return ( (( me != null )) ? (me.tink_streams__Stream_ErrorStream_cast<Item_c_c>()) : default(object) );
		}
		
		
		public virtual object tink_streams__Stream_ErrorStream_cast<Item_c>() {
			if (global::haxe.lang.Runtime.eq(typeof(Item), typeof(Item_c))) {
				return this;
			}
			
			global::tink.streams._Stream.ErrorStream<Item_c> new_me = new global::tink.streams._Stream.ErrorStream<Item_c>(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
			global::Array<object> fields = global::Reflect.fields(this);
			int i = 0;
			while (( i < fields.length )) {
				string field = global::haxe.lang.Runtime.toString(fields[i++]);
				global::Reflect.setField(new_me, field, global::Reflect.field(this, field));
			}
			
			return new_me;
		}
		
		
		public override object tink_streams_StreamObject_cast<Item_c, Quality_c>() {
			return this.tink_streams__Stream_ErrorStream_cast<Item>();
		}
		
		
		public override object tink_streams_StreamBase_cast<Item_c, Quality_c>() {
			return this.tink_streams__Stream_ErrorStream_cast<Item>();
		}
		
		
		public global::tink.core.TypedError error;
		
		public override global::tink.core._Future.FutureObject<object> next() {
			return new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (global::tink.streams.Step.Fail(this.error)) ))) ));
		}
		
		
		public override global::tink.core._Future.FutureObject<object> forEach<Safety>(global::haxe.lang.Function handler) {
			return new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (global::tink.streams.Conclusion.Failed(this.error)) ))) ));
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1932118984:
					{
						this.error = ((global::tink.core.TypedError) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1153313194:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "forEach", 1153313194)) );
					}
					
					
					case 1224901875:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "next", 1224901875)) );
					}
					
					
					case 1932118984:
					{
						return this.error;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("error");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	[global::haxe.lang.GenericInterface(typeof(global::tink.streams._Stream.ErrorStream<object>))]
	public interface ErrorStream : global::haxe.lang.IHxObject, global::tink.streams.StreamBase, global::haxe.lang.IGenericObject {
		
		object tink_streams__Stream_ErrorStream_cast<Item_c>();
		
		object tink_streams_StreamBase_cast<Item_c, Quality_c>();
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class Empty<Item, Quality> : global::tink.streams.StreamBase<Item, Quality>, global::tink.streams.Empty {
		
		static Empty() {
			global::tink.streams.Empty<object, object>.inst = new global::tink.streams.Empty<object, object>();
		}
		
		
		public Empty(global::haxe.lang.EmptyObject empty) : base(global::haxe.lang.EmptyObject.EMPTY) {
		}
		
		
		public Empty() {
			global::tink.streams.Empty<object, object>.__hx_ctor_tink_streams_Empty<Item, Quality>(((global::tink.streams.Empty<Item, Quality>) (this) ));
		}
		
		
		protected static void __hx_ctor_tink_streams_Empty<Item_c, Quality_c>(global::tink.streams.Empty<Item_c, Quality_c> __hx_this) {
		}
		
		
		public static new object __hx_cast<Item_c_c, Quality_c_c>(global::tink.streams.Empty me) {
			return ( (( me != null )) ? (me.tink_streams_Empty_cast<Item_c_c, Quality_c_c>()) : default(object) );
		}
		
		
		public static global::tink.streams.Empty inst;
		
		public static global::tink.streams.StreamObject<Item1, Quality2> make<Item1, Quality2>() {
			return ((global::tink.streams.StreamObject<Item1, Quality2>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Item1, Quality2>(((global::tink.streams.StreamObject) (((object) (global::tink.streams.Empty<object, object>.inst) )) ))) );
		}
		
		
		public virtual object tink_streams_Empty_cast<Item_c, Quality_c>() {
			if (( global::haxe.lang.Runtime.eq(typeof(Item), typeof(Item_c)) && global::haxe.lang.Runtime.eq(typeof(Quality), typeof(Quality_c)) )) {
				return this;
			}
			
			global::tink.streams.Empty<Item_c, Quality_c> new_me = new global::tink.streams.Empty<Item_c, Quality_c>(global::haxe.lang.EmptyObject.EMPTY);
			global::Array<object> fields = global::Reflect.fields(this);
			int i = 0;
			while (( i < fields.length )) {
				string field = global::haxe.lang.Runtime.toString(fields[i++]);
				global::Reflect.setField(new_me, field, global::Reflect.field(this, field));
			}
			
			return new_me;
		}
		
		
		public override object tink_streams_StreamObject_cast<Item_c, Quality_c>() {
			return this.tink_streams_Empty_cast<Item, Quality>();
		}
		
		
		public override object tink_streams_StreamBase_cast<Item_c, Quality_c>() {
			return this.tink_streams_Empty_cast<Item, Quality>();
		}
		
		
		public override bool get_depleted() {
			return true;
		}
		
		
		public override global::tink.core._Future.FutureObject<object> next() {
			return ((global::tink.core._Future.FutureObject<object>) (new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (global::tink.streams.Step.End) ))) ))) );
		}
		
		
		public override global::tink.core._Future.FutureObject<object> forEach<Safety>(global::haxe.lang.Function handler) {
			return ((global::tink.core._Future.FutureObject<object>) (new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (global::tink.streams.Conclusion.Depleted) ))) ))) );
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1153313194:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "forEach", 1153313194)) );
					}
					
					
					case 1224901875:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "next", 1224901875)) );
					}
					
					
					case 790633684:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_depleted", 790633684)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	[global::haxe.lang.GenericInterface(typeof(global::tink.streams.Empty<object, object>))]
	public interface Empty : global::haxe.lang.IHxObject, global::tink.streams.StreamBase, global::haxe.lang.IGenericObject {
		
		object tink_streams_Empty_cast<Item_c, Quality_c>();
		
		object tink_streams_StreamBase_cast<Item_c, Quality_c>();
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public sealed class Mapping_Impl_ {
		
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
		public static object _new<In, Out, Quality>(object o) {
			object this1 = o;
			return ((object) (this1) );
		}
		
		
		public static object ofNext<In, Out>(global::haxe.lang.Function n) {
			object this1 = null;
			{
				global::haxe.lang.Function __temp_odecl1 = new global::tink.streams._Stream.Mapping_Impl__ofNext_277__Fun<Out, In>(n);
				this1 = new global::haxe.lang.DynamicObject(new int[]{607880558}, new object[]{__temp_odecl1}, new int[]{}, new double[]{});
			}
			
			return ((object) (this1) );
		}
		
		
		public static object ofAsync<In, Out, Quality>(global::haxe.lang.Function f) {
			object this1 = null;
			{
				global::haxe.lang.Function __temp_odecl1 = new global::tink.streams._Stream.Mapping_Impl__ofAsync_282__Fun<Out, Quality, In>(f);
				this1 = new global::haxe.lang.DynamicObject(new int[]{607880558}, new object[]{__temp_odecl1}, new int[]{}, new double[]{});
			}
			
			return ((object) (this1) );
		}
		
		
		public static object ofSync<In, Out>(global::haxe.lang.Function f) {
			object this1 = null;
			{
				global::haxe.lang.Function __temp_odecl1 = new global::tink.streams._Stream.Mapping_Impl__ofSync_287__Fun<Out, In>(f);
				this1 = new global::haxe.lang.DynamicObject(new int[]{607880558}, new object[]{__temp_odecl1}, new int[]{}, new double[]{});
			}
			
			return ((object) (this1) );
		}
		
		
		public static object ofPlain<In, Out, Quality>(global::haxe.lang.Function f) {
			object this1 = null;
			{
				global::haxe.lang.Function __temp_odecl1 = new global::tink.streams._Stream.Mapping_Impl__ofPlain_295__Fun<Out, Quality, In>(f);
				this1 = new global::haxe.lang.DynamicObject(new int[]{607880558}, new object[]{__temp_odecl1}, new int[]{}, new double[]{});
			}
			
			return ((object) (this1) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class Mapping_Impl__ofNext_277__Fun_1<Out> : global::haxe.lang.Function {
		
		public Mapping_Impl__ofNext_277__Fun_1() : base(1, 0) {
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			Out o = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<Out>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<Out>(__fn_dyn1)) );
			return ((global::tink.core._Future.FutureObject<object>) (new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (global::tink.core.Outcome.Success(global::tink.streams.RegroupResult.Converted(global::tink.streams._Stream.Stream_Impl_.single<Out, object>(global::haxe.lang.Runtime.genericCast<Out>(o))))) ))) ))) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class Mapping_Impl__ofNext_277__Fun_0<Out> : global::haxe.lang.Function {
		
		public Mapping_Impl__ofNext_277__Fun_0(global::haxe.lang.Function f) : base(1, 0) {
			this.f = f;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::tink.core.Outcome o1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.Outcome) (((object) (__fn_float1) )) )) : (((global::tink.core.Outcome) (__fn_dyn1) )) );
				switch (o1._hx_index) {
					case 0:
					{
						global::tink.streams.RegroupResult d = ((global::tink.streams.RegroupResult) (( o1 as global::tink.core.Outcome_Success ).data) );
						return ((global::tink.core._Future.FutureObject<object>) (new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (d) ))) ))) );
					}
					
					
					case 1:
					{
						global::tink.core.TypedError e = ((global::tink.core.TypedError) (( o1 as global::tink.core.Outcome_Failure ).failure) );
						return ((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (this.f.__hx_invoke1_o(default(double), e)) ))) );
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class Mapping_Impl__ofNext_277__Fun<Out, In> : global::haxe.lang.Function {
		
		public Mapping_Impl__ofNext_277__Fun(global::haxe.lang.Function n) : base(2, 0) {
			this.n = n;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::tink.streams.RegroupStatus _ = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.streams.RegroupStatus) (((object) (__fn_float2) )) )) : (((global::tink.streams.RegroupStatus) (__fn_dyn2) )) );
			global::Array<In> i = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<In>) (global::Array<object>.__hx_cast<In>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<In>) (global::Array<object>.__hx_cast<In>(((global::Array) (__fn_dyn1) ))) )) );
			global::tink.core._Future.FutureObject<object> this2 = global::tink.core._Promise.Promise_Impl_.next<object, Out>(((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (this.n.__hx_invoke1_o(default(double), i[0])) ))) ), ((global::haxe.lang.Function) (new global::tink.streams._Stream.Mapping_Impl__ofNext_277__Fun_1<Out>()) ), default(global::haxe.lang.Null<bool>));
			global::haxe.lang.Function f = global::tink.core._Promise.Recover_Impl_.ofSync<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::tink.streams.RegroupResult), "Errored", 928763399)) ));
			global::tink.core._Future.FutureObject<object> ret = ((global::tink.core._Future.FutureObject<object>) (this2) ).flatMap<object>(((global::haxe.lang.Function) (new global::tink.streams._Stream.Mapping_Impl__ofNext_277__Fun_0<Out>(f)) ));
			return ret.gather();
		}
		
		
		public global::haxe.lang.Function n;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class Mapping_Impl__ofAsync_282__Fun_0<Quality, Out> : global::haxe.lang.Function {
		
		public Mapping_Impl__ofAsync_282__Fun_0() : base(1, 0) {
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			Out o = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<Out>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<Out>(__fn_dyn1)) );
			return global::tink.streams.RegroupResult.Converted(global::tink.streams._Stream.Stream_Impl_.single<Out, Quality>(global::haxe.lang.Runtime.genericCast<Out>(o)));
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class Mapping_Impl__ofAsync_282__Fun<Out, Quality, In> : global::haxe.lang.Function {
		
		public Mapping_Impl__ofAsync_282__Fun(global::haxe.lang.Function f) : base(2, 0) {
			this.f = f;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::tink.streams.RegroupStatus _ = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.streams.RegroupStatus) (((object) (__fn_float2) )) )) : (((global::tink.streams.RegroupStatus) (__fn_dyn2) )) );
			global::Array<In> i = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<In>) (global::Array<object>.__hx_cast<In>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<In>) (global::Array<object>.__hx_cast<In>(((global::Array) (__fn_dyn1) ))) )) );
			global::tink.core._Future.FutureObject<object> ret = ((global::tink.core._Future.FutureObject<Out>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<Out>(((global::tink.core._Future.FutureObject) (this.f.__hx_invoke1_o(default(double), i[0])) ))) ).map<object>(((global::haxe.lang.Function) (new global::tink.streams._Stream.Mapping_Impl__ofAsync_282__Fun_0<Quality, Out>()) ));
			return ret.gather();
		}
		
		
		public global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class Mapping_Impl__ofSync_287__Fun<Out, In> : global::haxe.lang.Function {
		
		public Mapping_Impl__ofSync_287__Fun(global::haxe.lang.Function f) : base(2, 0) {
			this.f = f;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			unchecked {
				global::tink.streams.RegroupStatus _ = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.streams.RegroupStatus) (((object) (__fn_float2) )) )) : (((global::tink.streams.RegroupStatus) (__fn_dyn2) )) );
				global::Array<In> i = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<In>) (global::Array<object>.__hx_cast<In>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<In>) (global::Array<object>.__hx_cast<In>(((global::Array) (__fn_dyn1) ))) )) );
				global::tink.streams.RegroupResult v = null;
				global::tink.core.Outcome _g = ((global::tink.core.Outcome) (this.f.__hx_invoke1_o(default(double), i[0])) );
				switch (_g._hx_index) {
					case 0:
					{
						Out v1 = global::haxe.lang.Runtime.genericCast<Out>(( _g as global::tink.core.Outcome_Success ).data);
						v = global::tink.streams.RegroupResult.Converted(global::tink.streams._Stream.Stream_Impl_.single<Out, object>(global::haxe.lang.Runtime.genericCast<Out>(v1)));
						break;
					}
					
					
					case 1:
					{
						global::tink.core.TypedError e = ((global::tink.core.TypedError) (( _g as global::tink.core.Outcome_Failure ).failure) );
						v = global::tink.streams.RegroupResult.Errored(e);
						break;
					}
					
					
				}
				
				return new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (v) ))) ));
			}
		}
		
		
		public global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class Mapping_Impl__ofPlain_295__Fun<Out, Quality, In> : global::haxe.lang.Function {
		
		public Mapping_Impl__ofPlain_295__Fun(global::haxe.lang.Function f) : base(2, 0) {
			this.f = f;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::tink.streams.RegroupStatus _ = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.streams.RegroupStatus) (((object) (__fn_float2) )) )) : (((global::tink.streams.RegroupStatus) (__fn_dyn2) )) );
			global::Array<In> i = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<In>) (global::Array<object>.__hx_cast<In>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<In>) (global::Array<object>.__hx_cast<In>(((global::Array) (__fn_dyn1) ))) )) );
			return new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (global::tink.streams.RegroupResult.Converted(global::tink.streams._Stream.Stream_Impl_.single<Out, Quality>(global::haxe.lang.Runtime.genericCast<Out>(this.f.__hx_invoke1_o(default(double), i[0]))))) ))) ));
		}
		
		
		public global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public sealed class Filter_Impl_ {
		
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
		public static object _new<T, Quality>(object o) {
			object this1 = o;
			return ((object) (this1) );
		}
		
		
		public static object ofNext<T>(global::haxe.lang.Function n) {
			object this1 = null;
			{
				global::haxe.lang.Function __temp_odecl1 = new global::tink.streams._Stream.Filter_Impl__ofNext_307__Fun<T>(n);
				this1 = new global::haxe.lang.DynamicObject(new int[]{607880558}, new object[]{__temp_odecl1}, new int[]{}, new double[]{});
			}
			
			return ((object) (this1) );
		}
		
		
		public static object ofAsync<T, Quality>(global::haxe.lang.Function f) {
			object this1 = null;
			{
				global::haxe.lang.Function __temp_odecl1 = new global::tink.streams._Stream.Filter_Impl__ofAsync_312__Fun<Quality, T>(f);
				this1 = new global::haxe.lang.DynamicObject(new int[]{607880558}, new object[]{__temp_odecl1}, new int[]{}, new double[]{});
			}
			
			return ((object) (this1) );
		}
		
		
		public static object ofSync<T>(global::haxe.lang.Function f) {
			object this1 = null;
			{
				global::haxe.lang.Function __temp_odecl1 = new global::tink.streams._Stream.Filter_Impl__ofSync_317__Fun<T>(f);
				this1 = new global::haxe.lang.DynamicObject(new int[]{607880558}, new object[]{__temp_odecl1}, new int[]{}, new double[]{});
			}
			
			return ((object) (this1) );
		}
		
		
		public static object ofPlain<T, Quality>(global::haxe.lang.Function f) {
			object this1 = null;
			{
				global::haxe.lang.Function __temp_odecl1 = new global::tink.streams._Stream.Filter_Impl__ofPlain_325__Fun<Quality, T>(f);
				this1 = new global::haxe.lang.DynamicObject(new int[]{607880558}, new object[]{__temp_odecl1}, new int[]{}, new double[]{});
			}
			
			return ((object) (this1) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class Filter_Impl__ofNext_307__Fun_1<T> : global::haxe.lang.Function {
		
		public Filter_Impl__ofNext_307__Fun_1(global::Array<T> i) : base(1, 0) {
			this.i = i;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			bool matched = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toBool(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.toBool(__fn_dyn1)) );
			return ((global::tink.core._Future.FutureObject<object>) (new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (global::tink.core.Outcome.Success(global::tink.streams.RegroupResult.Converted(( (matched) ? (global::tink.streams._Stream.Stream_Impl_.single<T, object>(global::haxe.lang.Runtime.genericCast<T>(this.i[0]))) : (((global::tink.streams.StreamObject<T, object>) (global::tink.streams.StreamObject__Statics_.__hx_cast<T, object>(((global::tink.streams.StreamObject) (((object) (global::tink.streams.Empty<object, object>.inst) )) ))) )) )))) ))) ))) );
		}
		
		
		public global::Array<T> i;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class Filter_Impl__ofNext_307__Fun_0<T> : global::haxe.lang.Function {
		
		public Filter_Impl__ofNext_307__Fun_0(global::haxe.lang.Function f) : base(1, 0) {
			this.f = f;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::tink.core.Outcome o = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.Outcome) (((object) (__fn_float1) )) )) : (((global::tink.core.Outcome) (__fn_dyn1) )) );
				switch (o._hx_index) {
					case 0:
					{
						global::tink.streams.RegroupResult d = ((global::tink.streams.RegroupResult) (( o as global::tink.core.Outcome_Success ).data) );
						return ((global::tink.core._Future.FutureObject<object>) (new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (d) ))) ))) );
					}
					
					
					case 1:
					{
						global::tink.core.TypedError e = ((global::tink.core.TypedError) (( o as global::tink.core.Outcome_Failure ).failure) );
						return ((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (this.f.__hx_invoke1_o(default(double), e)) ))) );
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class Filter_Impl__ofNext_307__Fun<T> : global::haxe.lang.Function {
		
		public Filter_Impl__ofNext_307__Fun(global::haxe.lang.Function n) : base(2, 0) {
			this.n = n;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::tink.streams.RegroupStatus _ = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.streams.RegroupStatus) (((object) (__fn_float2) )) )) : (((global::tink.streams.RegroupStatus) (__fn_dyn2) )) );
			global::Array<T> i = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<T>) (global::Array<object>.__hx_cast<T>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<T>) (global::Array<object>.__hx_cast<T>(((global::Array) (__fn_dyn1) ))) )) );
			global::tink.core._Future.FutureObject<object> this2 = global::tink.core._Promise.Promise_Impl_.next<object, bool>(((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (this.n.__hx_invoke1_o(default(double), i[0])) ))) ), ((global::haxe.lang.Function) (new global::tink.streams._Stream.Filter_Impl__ofNext_307__Fun_1<T>(i)) ), default(global::haxe.lang.Null<bool>));
			global::haxe.lang.Function f = global::tink.core._Promise.Recover_Impl_.ofSync<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::tink.streams.RegroupResult), "Errored", 928763399)) ));
			global::tink.core._Future.FutureObject<object> ret = ((global::tink.core._Future.FutureObject<object>) (this2) ).flatMap<object>(((global::haxe.lang.Function) (new global::tink.streams._Stream.Filter_Impl__ofNext_307__Fun_0<T>(f)) ));
			return ret.gather();
		}
		
		
		public global::haxe.lang.Function n;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class Filter_Impl__ofAsync_312__Fun_0<Quality, T> : global::haxe.lang.Function {
		
		public Filter_Impl__ofAsync_312__Fun_0(global::Array<T> i) : base(1, 0) {
			this.i = i;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			bool matched = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toBool(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.toBool(__fn_dyn1)) );
			return global::tink.streams.RegroupResult.Converted(( (matched) ? (global::tink.streams._Stream.Stream_Impl_.single<T, Quality>(global::haxe.lang.Runtime.genericCast<T>(this.i[0]))) : (((global::tink.streams.StreamObject<T, Quality>) (global::tink.streams.StreamObject__Statics_.__hx_cast<T, Quality>(((global::tink.streams.StreamObject) (((object) (global::tink.streams.Empty<object, object>.inst) )) ))) )) ));
		}
		
		
		public global::Array<T> i;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class Filter_Impl__ofAsync_312__Fun<Quality, T> : global::haxe.lang.Function {
		
		public Filter_Impl__ofAsync_312__Fun(global::haxe.lang.Function f) : base(2, 0) {
			this.f = f;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::tink.streams.RegroupStatus _ = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.streams.RegroupStatus) (((object) (__fn_float2) )) )) : (((global::tink.streams.RegroupStatus) (__fn_dyn2) )) );
			global::Array<T> i = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<T>) (global::Array<object>.__hx_cast<T>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<T>) (global::Array<object>.__hx_cast<T>(((global::Array) (__fn_dyn1) ))) )) );
			global::tink.core._Future.FutureObject<object> ret = ((global::tink.core._Future.FutureObject<bool>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<bool>(((global::tink.core._Future.FutureObject) (this.f.__hx_invoke1_o(default(double), i[0])) ))) ).map<object>(((global::haxe.lang.Function) (new global::tink.streams._Stream.Filter_Impl__ofAsync_312__Fun_0<Quality, T>(i)) ));
			return ret.gather();
		}
		
		
		public global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class Filter_Impl__ofSync_317__Fun<T> : global::haxe.lang.Function {
		
		public Filter_Impl__ofSync_317__Fun(global::haxe.lang.Function f) : base(2, 0) {
			this.f = f;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			unchecked {
				global::tink.streams.RegroupStatus _ = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.streams.RegroupStatus) (((object) (__fn_float2) )) )) : (((global::tink.streams.RegroupStatus) (__fn_dyn2) )) );
				global::Array<T> i = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<T>) (global::Array<object>.__hx_cast<T>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<T>) (global::Array<object>.__hx_cast<T>(((global::Array) (__fn_dyn1) ))) )) );
				global::tink.streams.RegroupResult v = null;
				global::tink.core.Outcome _g = ((global::tink.core.Outcome) (this.f.__hx_invoke1_o(default(double), i[0])) );
				switch (_g._hx_index) {
					case 0:
					{
						bool v1 = global::haxe.lang.Runtime.toBool(( _g as global::tink.core.Outcome_Success ).data);
						v = global::tink.streams.RegroupResult.Converted(( (v1) ? (global::tink.streams._Stream.Stream_Impl_.single<T, object>(global::haxe.lang.Runtime.genericCast<T>(i[0]))) : (((global::tink.streams.StreamObject<T, object>) (global::tink.streams.StreamObject__Statics_.__hx_cast<T, object>(((global::tink.streams.StreamObject) (((object) (global::tink.streams.Empty<object, object>.inst) )) ))) )) ));
						break;
					}
					
					
					case 1:
					{
						global::tink.core.TypedError e = ((global::tink.core.TypedError) (( _g as global::tink.core.Outcome_Failure ).failure) );
						v = global::tink.streams.RegroupResult.Errored(e);
						break;
					}
					
					
				}
				
				return new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (v) ))) ));
			}
		}
		
		
		public global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class Filter_Impl__ofPlain_325__Fun<Quality, T> : global::haxe.lang.Function {
		
		public Filter_Impl__ofPlain_325__Fun(global::haxe.lang.Function f) : base(2, 0) {
			this.f = f;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::tink.streams.RegroupStatus _ = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.streams.RegroupStatus) (((object) (__fn_float2) )) )) : (((global::tink.streams.RegroupStatus) (__fn_dyn2) )) );
			global::Array<T> i = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<T>) (global::Array<object>.__hx_cast<T>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<T>) (global::Array<object>.__hx_cast<T>(((global::Array) (__fn_dyn1) ))) )) );
			return new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (global::tink.streams.RegroupResult.Converted(( (global::haxe.lang.Runtime.toBool(this.f.__hx_invoke1_o(default(double), i[0]))) ? (global::tink.streams._Stream.Stream_Impl_.single<T, Quality>(global::haxe.lang.Runtime.genericCast<T>(i[0]))) : (((global::tink.streams.StreamObject<T, Quality>) (global::tink.streams.StreamObject__Statics_.__hx_cast<T, Quality>(((global::tink.streams.StreamObject) (((object) (global::tink.streams.Empty<object, object>.inst) )) ))) )) ))) ))) ));
		}
		
		
		public global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class IdealizeStream<Item, Quality> : global::tink.streams.IdealStreamBase<Item>, global::tink.streams.IdealizeStream {
		
		public IdealizeStream(global::haxe.lang.EmptyObject empty) : base(global::haxe.lang.EmptyObject.EMPTY) {
		}
		
		
		public IdealizeStream(global::tink.streams.StreamObject<Item, Quality> target, global::haxe.lang.Function rescue) {
			global::tink.streams.IdealizeStream<object, object>.__hx_ctor_tink_streams_IdealizeStream<Item, Quality>(((global::tink.streams.IdealizeStream<Item, Quality>) (this) ), ((global::tink.streams.StreamObject<Item, Quality>) (target) ), ((global::haxe.lang.Function) (rescue) ));
		}
		
		
		protected static void __hx_ctor_tink_streams_IdealizeStream<Item_c, Quality_c>(global::tink.streams.IdealizeStream<Item_c, Quality_c> __hx_this, global::tink.streams.StreamObject<Item_c, Quality_c> target, global::haxe.lang.Function rescue) {
			__hx_this.target = target;
			__hx_this.rescue = rescue;
		}
		
		
		public static new object __hx_cast<Item_c_c, Quality_c_c>(global::tink.streams.IdealizeStream me) {
			return ( (( me != null )) ? (me.tink_streams_IdealizeStream_cast<Item_c_c, Quality_c_c>()) : default(object) );
		}
		
		
		public virtual object tink_streams_IdealizeStream_cast<Item_c, Quality_c>() {
			if (( global::haxe.lang.Runtime.eq(typeof(Item), typeof(Item_c)) && global::haxe.lang.Runtime.eq(typeof(Quality), typeof(Quality_c)) )) {
				return this;
			}
			
			global::tink.streams.IdealizeStream<Item_c, Quality_c> new_me = new global::tink.streams.IdealizeStream<Item_c, Quality_c>(global::haxe.lang.EmptyObject.EMPTY);
			global::Array<object> fields = global::Reflect.fields(this);
			int i = 0;
			while (( i < fields.length )) {
				string field = global::haxe.lang.Runtime.toString(fields[i++]);
				global::Reflect.setField(new_me, field, global::Reflect.field(this, field));
			}
			
			return new_me;
		}
		
		
		public override object tink_streams_StreamObject_cast<Item_c, Quality_c>() {
			return this.tink_streams_IdealizeStream_cast<Item, Quality>();
		}
		
		
		public override object tink_streams_StreamBase_cast<Item_c, Quality_c>() {
			return this.tink_streams_IdealizeStream_cast<Item, Quality>();
		}
		
		
		public override object tink_streams_IdealStreamBase_cast<Item_c>() {
			return this.tink_streams_IdealizeStream_cast<Item, Quality>();
		}
		
		
		public global::tink.streams.StreamObject<Item, Quality> target;
		
		public global::haxe.lang.Function rescue;
		
		public override bool get_depleted() {
			return ((global::tink.streams.StreamObject<Item, Quality>) (this.target) ).get_depleted();
		}
		
		
		public override global::tink.core._Future.FutureObject<object> next() {
			global::tink.streams.IdealizeStream<Item, Quality> _gthis = this;
			global::tink.core._Future.FutureObject<object> ret = ((global::tink.core._Future.FutureObject<object>) (this.target.next()) ).flatMap<object>(((global::haxe.lang.Function) (new global::tink.streams.IdealizeStream_next_431__Fun<Quality, Item>(_gthis)) ));
			return ret.gather();
		}
		
		
		public override global::tink.core._Future.FutureObject<object> forEach<Safety>(global::haxe.lang.Function handler) {
			global::tink.streams.IdealizeStream<Item, Quality> _gthis = this;
			return global::tink.core._Future.Future_Impl_.async<object>(((global::haxe.lang.Function) (new global::tink.streams.IdealizeStream_forEach_438__Fun<Quality, Safety, Item>(handler, _gthis)) ), default(global::haxe.lang.Null<bool>));
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 142002195:
					{
						this.rescue = ((global::haxe.lang.Function) (@value) );
						return @value;
					}
					
					
					case 116192081:
					{
						this.target = ((global::tink.streams.StreamObject<Item, Quality>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Item, Quality>(((global::tink.streams.StreamObject) (@value) ))) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1153313194:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "forEach", 1153313194)) );
					}
					
					
					case 1224901875:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "next", 1224901875)) );
					}
					
					
					case 790633684:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_depleted", 790633684)) );
					}
					
					
					case 142002195:
					{
						return this.rescue;
					}
					
					
					case 116192081:
					{
						return this.target;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("rescue");
			baseArr.push("target");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class IdealizeStream_next_431__Fun<Quality, Item> : global::haxe.lang.Function {
		
		public IdealizeStream_next_431__Fun(global::tink.streams.IdealizeStream<Item, Quality> _gthis) : base(1, 0) {
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::tink.streams.Step v = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.streams.Step) (((object) (__fn_float1) )) )) : (((global::tink.streams.Step) (__fn_dyn1) )) );
				if (( v._hx_index == 1 )) {
					global::tink.core.TypedError e = ( v as global::tink.streams.Step_Fail ).e;
					return ((global::tink.streams.StreamObject<Item, Quality>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Item, Quality>(((global::tink.streams.StreamObject) (this._gthis.rescue.__hx_invoke1_o(default(double), e)) ))) ).idealize(this._gthis.rescue).next();
				}
				else {
					return ((global::tink.core._Future.FutureObject<object>) (new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((global::tink.streams.Step) (v) ))) ))) );
				}
				
			}
		}
		
		
		public global::tink.streams.IdealizeStream<Item, Quality> _gthis;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class IdealizeStream_forEach_439__Fun<Quality, Safety, Item> : global::haxe.lang.Function {
		
		public IdealizeStream_forEach_439__Fun(global::haxe.lang.Function handler, global::haxe.lang.Function cb, global::tink.streams.IdealizeStream<Item, Quality> _gthis) : base(1, 0) {
			this.handler = handler;
			this.cb = cb;
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::tink.streams.Conclusion end = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.streams.Conclusion) (((object) (__fn_float1) )) )) : (((global::tink.streams.Conclusion) (__fn_dyn1) )) );
				switch (end._hx_index) {
					case 0:
					{
						global::tink.streams.StreamObject<Item, Quality> rest = ((global::tink.streams.StreamObject<Item, Quality>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Item, Quality>(((global::tink.streams.StreamObject) (( end as global::tink.streams.Conclusion_Halted ).rest) ))) );
						global::tink.streams.Conclusion tmp = global::tink.streams.Conclusion.Halted(rest.idealize(this._gthis.rescue));
						this.cb.__hx_invoke1_o(default(double), tmp);
						break;
					}
					
					
					case 1:
					{
						global::tink.streams.StreamObject<Item, Quality> at = ((global::tink.streams.StreamObject<Item, Quality>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Item, Quality>(((global::tink.streams.StreamObject) (( end as global::tink.streams.Conclusion_Clogged ).at) ))) );
						global::tink.core.TypedError e = ( end as global::tink.streams.Conclusion_Clogged ).error;
						global::tink.streams.Conclusion tmp1 = global::tink.streams.Conclusion.Clogged(e, at.idealize(this._gthis.rescue));
						this.cb.__hx_invoke1_o(default(double), tmp1);
						break;
					}
					
					
					case 2:
					{
						global::tink.core.TypedError e1 = ( end as global::tink.streams.Conclusion_Failed ).error;
						((global::tink.streams.StreamObject<Item, Quality>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Item, Quality>(((global::tink.streams.StreamObject) (this._gthis.rescue.__hx_invoke1_o(default(double), e1)) ))) ).idealize(this._gthis.rescue).forEach<Safety>(((global::haxe.lang.Function) (this.handler) )).handle(this.cb);
						break;
					}
					
					
					case 3:
					{
						this.cb.__hx_invoke1_o(default(double), global::tink.streams.Conclusion.Depleted);
						break;
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public global::haxe.lang.Function handler;
		
		public global::haxe.lang.Function cb;
		
		public global::tink.streams.IdealizeStream<Item, Quality> _gthis;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class IdealizeStream_forEach_438__Fun<Quality, Safety, Item> : global::haxe.lang.Function {
		
		public IdealizeStream_forEach_438__Fun(global::haxe.lang.Function handler, global::tink.streams.IdealizeStream<Item, Quality> _gthis) : base(1, 0) {
			this.handler = handler;
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::haxe.lang.Function cb = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (((global::haxe.lang.Function) (__fn_dyn1) )) );
			this._gthis.target.forEach<Safety>(((global::haxe.lang.Function) (this.handler) )).handle(new global::tink.streams.IdealizeStream_forEach_439__Fun<Quality, Safety, Item>(this.handler, cb, this._gthis));
			return null;
		}
		
		
		public global::haxe.lang.Function handler;
		
		public global::tink.streams.IdealizeStream<Item, Quality> _gthis;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	[global::haxe.lang.GenericInterface(typeof(global::tink.streams.IdealizeStream<object, object>))]
	public interface IdealizeStream : global::haxe.lang.IHxObject, global::tink.streams.IdealStreamBase, global::haxe.lang.IGenericObject {
		
		object tink_streams_IdealizeStream_cast<Item_c, Quality_c>();
		
		object tink_streams_IdealStreamBase_cast<Item_c>();
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class Single<Item, Quality> : global::tink.streams.StreamBase<Item, Quality>, global::tink.streams.Single {
		
		public Single(global::haxe.lang.EmptyObject empty) : base(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) )) {
		}
		
		
		public Single(global::tink.core._Lazy.LazyObject<Item> @value) {
			global::tink.streams.Single<object, object>.__hx_ctor_tink_streams_Single<Item, Quality>(((global::tink.streams.Single<Item, Quality>) (this) ), ((global::tink.core._Lazy.LazyObject<Item>) (@value) ));
		}
		
		
		protected static void __hx_ctor_tink_streams_Single<Item_c, Quality_c>(global::tink.streams.Single<Item_c, Quality_c> __hx_this, global::tink.core._Lazy.LazyObject<Item_c> @value) {
			__hx_this.@value = @value;
		}
		
		
		public static new object __hx_cast<Item_c_c, Quality_c_c>(global::tink.streams.Single me) {
			return ( (( me != null )) ? (me.tink_streams_Single_cast<Item_c_c, Quality_c_c>()) : default(object) );
		}
		
		
		public virtual object tink_streams_Single_cast<Item_c, Quality_c>() {
			if (( global::haxe.lang.Runtime.eq(typeof(Item), typeof(Item_c)) && global::haxe.lang.Runtime.eq(typeof(Quality), typeof(Quality_c)) )) {
				return this;
			}
			
			global::tink.streams.Single<Item_c, Quality_c> new_me = new global::tink.streams.Single<Item_c, Quality_c>(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
			global::Array<object> fields = global::Reflect.fields(this);
			int i = 0;
			while (( i < fields.length )) {
				string field = global::haxe.lang.Runtime.toString(fields[i++]);
				global::Reflect.setField(new_me, field, global::Reflect.field(this, field));
			}
			
			return new_me;
		}
		
		
		public override object tink_streams_StreamObject_cast<Item_c, Quality_c>() {
			return this.tink_streams_Single_cast<Item, Quality>();
		}
		
		
		public override object tink_streams_StreamBase_cast<Item_c, Quality_c>() {
			return this.tink_streams_Single_cast<Item, Quality>();
		}
		
		
		public global::tink.core._Lazy.LazyObject<Item> @value;
		
		public override global::tink.core._Future.FutureObject<object> next() {
			return new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (global::tink.streams.Step.Link(((global::tink.core._Lazy.LazyObject<Item>) (this.@value) ).@get(), ((global::tink.streams.StreamObject<Item, Quality>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Item, Quality>(((global::tink.streams.StreamObject) (((object) (global::tink.streams.Empty<object, object>.inst) )) ))) ))) ))) ));
		}
		
		
		public override global::tink.core._Future.FutureObject<object> forEach<Safety>(global::haxe.lang.Function handle) {
			global::tink.streams.Single<Item, Quality> _gthis = this;
			global::tink.core._Future.FutureObject<object> ret = ((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (((global::haxe.lang.Function) (handle) ).__hx_invoke1_o(default(double), ((global::tink.core._Lazy.LazyObject<Item>) (this.@value) ).@get())) ))) ).map<object>(((global::haxe.lang.Function) (new global::tink.streams.Single_forEach_463__Fun<Quality, Item, Safety>(_gthis)) ));
			return ret.gather();
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 834174833:
					{
						this.@value = ((global::tink.core._Lazy.LazyObject<Item>) (global::tink.core._Lazy.LazyObject__Statics_.__hx_cast<Item>(((global::tink.core._Lazy.LazyObject) (@value) ))) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1153313194:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "forEach", 1153313194)) );
					}
					
					
					case 1224901875:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "next", 1224901875)) );
					}
					
					
					case 834174833:
					{
						return this.@value;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("value");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class Single_forEach_463__Fun<Quality, Item, Safety> : global::haxe.lang.Function {
		
		public Single_forEach_463__Fun(global::tink.streams.Single<Item, Quality> _gthis) : base(1, 0) {
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::tink.streams.Handled step = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.streams.Handled) (((object) (__fn_float1) )) )) : (((global::tink.streams.Handled) (__fn_dyn1) )) );
				switch (step._hx_index) {
					case 0:
					{
						return global::tink.streams.Conclusion.Halted(this._gthis);
					}
					
					
					case 1:
					{
						return global::tink.streams.Conclusion.Halted(((global::tink.streams.StreamObject<Item, Quality>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Item, Quality>(((global::tink.streams.StreamObject) (((object) (global::tink.streams.Empty<object, object>.inst) )) ))) ));
					}
					
					
					case 2:
					{
						return global::tink.streams.Conclusion.Depleted;
					}
					
					
					case 3:
					{
						global::tink.core.TypedError e = ( step as global::tink.streams.Handled_Clog ).e;
						return global::tink.streams.Conclusion.Clogged(e, this._gthis);
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public global::tink.streams.Single<Item, Quality> _gthis;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	[global::haxe.lang.GenericInterface(typeof(global::tink.streams.Single<object, object>))]
	public interface Single : global::haxe.lang.IHxObject, global::tink.streams.StreamBase, global::haxe.lang.IGenericObject {
		
		object tink_streams_Single_cast<Item_c, Quality_c>();
		
		object tink_streams_StreamBase_cast<Item_c, Quality_c>();
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public sealed class Handler_Impl_ {
		
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
		public static global::haxe.lang.Function _new<Item, Safety>(global::haxe.lang.Function f) {
			global::haxe.lang.Function this1 = f;
			return ((global::haxe.lang.Function) (this1) );
		}
		
		
		public static global::tink.core._Future.FutureObject<object> apply<Item, Safety>(global::haxe.lang.Function this1, Item item) {
			return ((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (this1.__hx_invoke1_o(default(double), item)) ))) );
		}
		
		
		public static global::haxe.lang.Function ofSafeSync<Item>(global::haxe.lang.Function f) {
			global::haxe.lang.Function this1 = new global::tink.streams._Stream.Handler_Impl__ofSafeSync_483__Fun<Item>(f);
			return ((global::haxe.lang.Function) (this1) );
		}
		
		
		public static global::haxe.lang.Function ofUnknownSync<Item, Q>(global::haxe.lang.Function f) {
			global::haxe.lang.Function this1 = new global::tink.streams._Stream.Handler_Impl__ofUnknownSync_486__Fun<Q, Item>(f);
			return ((global::haxe.lang.Function) (this1) );
		}
		
		
		public static global::haxe.lang.Function ofSafe<Item>(global::haxe.lang.Function f) {
			global::haxe.lang.Function this1 = f;
			return ((global::haxe.lang.Function) (this1) );
		}
		
		
		public static global::haxe.lang.Function ofUnknown<Item, Q>(global::haxe.lang.Function f) {
			global::haxe.lang.Function this1 = f;
			return ((global::haxe.lang.Function) (this1) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class Handler_Impl__ofSafeSync_483__Fun<Item> : global::haxe.lang.Function {
		
		public Handler_Impl__ofSafeSync_483__Fun(global::haxe.lang.Function f) : base(1, 0) {
			this.f = f;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			Item i = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<Item>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<Item>(__fn_dyn1)) );
			return new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((global::tink.streams.Handled) (this.f.__hx_invoke1_o(default(double), i)) ))) ));
		}
		
		
		public global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class Handler_Impl__ofUnknownSync_486__Fun<Q, Item> : global::haxe.lang.Function {
		
		public Handler_Impl__ofUnknownSync_486__Fun(global::haxe.lang.Function f) : base(1, 0) {
			this.f = f;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			Item i = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<Item>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<Item>(__fn_dyn1)) );
			return new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((global::tink.streams.Handled) (this.f.__hx_invoke1_o(default(double), i)) ))) ));
		}
		
		
		public global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public sealed class Reducer_Impl_ {
		
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
		public static global::haxe.lang.Function _new<Item, Safety, Result>(global::haxe.lang.Function f) {
			global::haxe.lang.Function this1 = f;
			return ((global::haxe.lang.Function) (this1) );
		}
		
		
		public static global::tink.core._Future.FutureObject<object> apply<Item, Safety, Result>(global::haxe.lang.Function this1, Result res, Item item) {
			return ((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (this1.__hx_invoke2_o(default(double), res, default(double), item)) ))) );
		}
		
		
		public static global::haxe.lang.Function ofSafeSync<Item, Result>(global::haxe.lang.Function f) {
			global::haxe.lang.Function this1 = new global::tink.streams._Stream.Reducer_Impl__ofSafeSync_503__Fun<Item, Result>(f);
			return ((global::haxe.lang.Function) (this1) );
		}
		
		
		public static global::haxe.lang.Function ofUnknownSync<Item, Q, Result>(global::haxe.lang.Function f) {
			global::haxe.lang.Function this1 = new global::tink.streams._Stream.Reducer_Impl__ofUnknownSync_506__Fun<Q, Item, Result>(f);
			return ((global::haxe.lang.Function) (this1) );
		}
		
		
		public static global::haxe.lang.Function ofSafe<Item, Result>(global::haxe.lang.Function f) {
			global::haxe.lang.Function this1 = f;
			return ((global::haxe.lang.Function) (this1) );
		}
		
		
		public static global::haxe.lang.Function ofPlainSync<Item, Result>(global::haxe.lang.Function f) {
			global::haxe.lang.Function this1 = new global::tink.streams._Stream.Reducer_Impl__ofPlainSync_512__Fun<Item, Result>(f);
			return ((global::haxe.lang.Function) (this1) );
		}
		
		
		public static global::haxe.lang.Function ofUnknown<Item, Q, Result>(global::haxe.lang.Function f) {
			global::haxe.lang.Function this1 = f;
			return ((global::haxe.lang.Function) (this1) );
		}
		
		
		public static global::haxe.lang.Function ofPromiseBased<Item, Result>(global::haxe.lang.Function f) {
			global::haxe.lang.Function this1 = new global::tink.streams._Stream.Reducer_Impl__ofPromiseBased_518__Fun<Item, Result>(f);
			return ((global::haxe.lang.Function) (this1) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class Reducer_Impl__ofSafeSync_503__Fun<Item, Result> : global::haxe.lang.Function {
		
		public Reducer_Impl__ofSafeSync_503__Fun(global::haxe.lang.Function f) : base(2, 0) {
			this.f = f;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			Item cur = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<Item>(((object) (__fn_float2) ))) : (global::haxe.lang.Runtime.genericCast<Item>(__fn_dyn2)) );
			Result res = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<Result>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<Result>(__fn_dyn1)) );
			return new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((global::tink.streams.ReductionStep) (this.f.__hx_invoke2_o(default(double), res, default(double), cur)) ))) ));
		}
		
		
		public global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class Reducer_Impl__ofUnknownSync_506__Fun<Q, Item, Result> : global::haxe.lang.Function {
		
		public Reducer_Impl__ofUnknownSync_506__Fun(global::haxe.lang.Function f) : base(2, 0) {
			this.f = f;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			Item cur = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<Item>(((object) (__fn_float2) ))) : (global::haxe.lang.Runtime.genericCast<Item>(__fn_dyn2)) );
			Result res = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<Result>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<Result>(__fn_dyn1)) );
			return new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((global::tink.streams.ReductionStep) (this.f.__hx_invoke2_o(default(double), res, default(double), cur)) ))) ));
		}
		
		
		public global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class Reducer_Impl__ofPlainSync_512__Fun<Item, Result> : global::haxe.lang.Function {
		
		public Reducer_Impl__ofPlainSync_512__Fun(global::haxe.lang.Function f) : base(2, 0) {
			this.f = f;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			Item cur = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<Item>(((object) (__fn_float2) ))) : (global::haxe.lang.Runtime.genericCast<Item>(__fn_dyn2)) );
			Result res = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<Result>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<Result>(__fn_dyn1)) );
			return new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (global::tink.streams.ReductionStep.Progress(global::haxe.lang.Runtime.genericCast<Result>(this.f.__hx_invoke2_o(default(double), res, default(double), cur)))) ))) ));
		}
		
		
		public global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class Reducer_Impl__ofPromiseBased_518__Fun_0<Result> : global::haxe.lang.Function {
		
		public Reducer_Impl__ofPromiseBased_518__Fun_0() : base(1, 0) {
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::tink.core.Outcome s = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.Outcome) (((object) (__fn_float1) )) )) : (((global::tink.core.Outcome) (__fn_dyn1) )) );
				switch (s._hx_index) {
					case 0:
					{
						Result r = global::haxe.lang.Runtime.genericCast<Result>(( s as global::tink.core.Outcome_Success ).data);
						return global::tink.streams.ReductionStep.Progress(r);
					}
					
					
					case 1:
					{
						global::tink.core.TypedError e = ((global::tink.core.TypedError) (( s as global::tink.core.Outcome_Failure ).failure) );
						return global::tink.streams.ReductionStep.Crash(e);
					}
					
					
				}
				
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public class Reducer_Impl__ofPromiseBased_518__Fun<Item, Result> : global::haxe.lang.Function {
		
		public Reducer_Impl__ofPromiseBased_518__Fun(global::haxe.lang.Function f) : base(2, 0) {
			this.f = f;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			Item cur = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<Item>(((object) (__fn_float2) ))) : (global::haxe.lang.Runtime.genericCast<Item>(__fn_dyn2)) );
			Result res = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<Result>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<Result>(__fn_dyn1)) );
			global::tink.core._Future.FutureObject<object> ret = ((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (this.f.__hx_invoke2_o(default(double), res, default(double), cur)) ))) ).map<object>(((global::haxe.lang.Function) (new global::tink.streams._Stream.Reducer_Impl__ofPromiseBased_518__Fun_0<Result>()) ));
			return ret.gather();
		}
		
		
		public global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams._Stream {
	public sealed class Parts_Impl_ {
		
		
		
		public static int get_length<I, Q>(global::Array this1) {
			return ((int) (global::haxe.lang.Runtime.getField_f(this1, "length", 520590566, true)) );
		}
		
		
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
		public static global::Array _new<I, Q>(global::Array<object> parts) {
			global::Array this1 = parts;
			return ((global::Array) (this1) );
		}
		
		
		public static global::tink.streams.StreamObject<I, Q> @get<I, Q>(global::Array this1, int index) {
			return ((global::tink.streams.StreamObject<I, Q>) (this1[index]) );
		}
		
		
		public static global::tink.streams.StreamObject<I, Q> @set<I, Q>(global::Array this1, int index, global::tink.streams.StreamObject<I, Q> @value) {
			return ((global::tink.streams.StreamObject<I, Q>) (this1[index] = @value) );
		}
		
		
		public static global::Array copy<I, Q>(global::Array this1) {
			return global::tink.streams._Stream.Parts_Impl_._new<I, Q>(((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (((global::Array) (global::haxe.lang.Runtime.callField(this1, "copy", 1103412149, null)) )) ))) ));
		}
		
		
		public static global::Array slice<I, Q>(global::Array this1, int start, global::haxe.lang.Null<int> end) {
			return global::tink.streams._Stream.Parts_Impl_._new<I, Q>(((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (((global::Array) (global::haxe.lang.Runtime.callField(this1, "slice", 2127021138, new object[]{start, (end).toDynamic()})) )) ))) ));
		}
		
		
		public static global::Array ofArray<I, Q>(global::Array<object> a) {
			return global::tink.streams._Stream.Parts_Impl_._new<I, Q>(((global::Array<object>) (a) ));
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class FutureStream<Item, Quality> : global::tink.streams.StreamBase<Item, Quality>, global::tink.streams.FutureStream {
		
		public FutureStream(global::haxe.lang.EmptyObject empty) : base(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) )) {
		}
		
		
		public FutureStream(global::tink.core._Future.FutureObject<object> f) {
			global::tink.streams.FutureStream<object, object>.__hx_ctor_tink_streams_FutureStream<Item, Quality>(((global::tink.streams.FutureStream<Item, Quality>) (this) ), ((global::tink.core._Future.FutureObject<object>) (f) ));
		}
		
		
		protected static void __hx_ctor_tink_streams_FutureStream<Item_c, Quality_c>(global::tink.streams.FutureStream<Item_c, Quality_c> __hx_this, global::tink.core._Future.FutureObject<object> f) {
			__hx_this.f = f;
		}
		
		
		public static new object __hx_cast<Item_c_c, Quality_c_c>(global::tink.streams.FutureStream me) {
			return ( (( me != null )) ? (me.tink_streams_FutureStream_cast<Item_c_c, Quality_c_c>()) : default(object) );
		}
		
		
		public virtual object tink_streams_FutureStream_cast<Item_c, Quality_c>() {
			if (( global::haxe.lang.Runtime.eq(typeof(Item), typeof(Item_c)) && global::haxe.lang.Runtime.eq(typeof(Quality), typeof(Quality_c)) )) {
				return this;
			}
			
			global::tink.streams.FutureStream<Item_c, Quality_c> new_me = new global::tink.streams.FutureStream<Item_c, Quality_c>(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
			global::Array<object> fields = global::Reflect.fields(this);
			int i = 0;
			while (( i < fields.length )) {
				string field = global::haxe.lang.Runtime.toString(fields[i++]);
				global::Reflect.setField(new_me, field, global::Reflect.field(this, field));
			}
			
			return new_me;
		}
		
		
		public override object tink_streams_StreamObject_cast<Item_c, Quality_c>() {
			return this.tink_streams_FutureStream_cast<Item, Quality>();
		}
		
		
		public override object tink_streams_StreamBase_cast<Item_c, Quality_c>() {
			return this.tink_streams_FutureStream_cast<Item, Quality>();
		}
		
		
		public global::tink.core._Future.FutureObject<object> f;
		
		public override global::tink.core._Future.FutureObject<object> next() {
			global::tink.core._Future.FutureObject<object> ret = ((global::tink.core._Future.FutureObject<object>) (this.f) ).flatMap<object>(((global::haxe.lang.Function) (new global::tink.streams.FutureStream_next_637__Fun<Quality, Item>()) ));
			return ret.gather();
		}
		
		
		public override global::tink.core._Future.FutureObject<object> forEach<Safety>(global::haxe.lang.Function handler) {
			global::tink.streams.FutureStream<Item, Quality> _gthis = this;
			return global::tink.core._Future.Future_Impl_.async<object>(((global::haxe.lang.Function) (new global::tink.streams.FutureStream_forEach_640__Fun<Quality, Safety, Item>(handler, _gthis)) ), default(global::haxe.lang.Null<bool>));
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 102:
					{
						this.f = ((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (@value) ))) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1153313194:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "forEach", 1153313194)) );
					}
					
					
					case 1224901875:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "next", 1224901875)) );
					}
					
					
					case 102:
					{
						return this.f;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("f");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class FutureStream_next_637__Fun<Quality, Item> : global::haxe.lang.Function {
		
		public FutureStream_next_637__Fun() : base(1, 0) {
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::tink.streams.StreamObject<Item, Quality> s = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.streams.StreamObject<Item, Quality>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Item, Quality>(((global::tink.streams.StreamObject) (((object) (__fn_float1) )) ))) )) : (((global::tink.streams.StreamObject<Item, Quality>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Item, Quality>(((global::tink.streams.StreamObject) (__fn_dyn1) ))) )) );
			return s.next();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class FutureStream_forEach_641__Fun<Safety, Quality, Item> : global::haxe.lang.Function {
		
		public FutureStream_forEach_641__Fun(global::haxe.lang.Function handler, global::haxe.lang.Function cb) : base(1, 0) {
			this.handler = handler;
			this.cb = cb;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::tink.streams.StreamObject<Item, Quality> s = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.streams.StreamObject<Item, Quality>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Item, Quality>(((global::tink.streams.StreamObject) (((object) (__fn_float1) )) ))) )) : (((global::tink.streams.StreamObject<Item, Quality>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Item, Quality>(((global::tink.streams.StreamObject) (__fn_dyn1) ))) )) );
			s.forEach<Safety>(((global::haxe.lang.Function) (this.handler) )).handle(this.cb);
			return null;
		}
		
		
		public global::haxe.lang.Function handler;
		
		public global::haxe.lang.Function cb;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class FutureStream_forEach_640__Fun<Quality, Safety, Item> : global::haxe.lang.Function {
		
		public FutureStream_forEach_640__Fun(global::haxe.lang.Function handler, global::tink.streams.FutureStream<Item, Quality> _gthis) : base(1, 0) {
			this.handler = handler;
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::haxe.lang.Function cb = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (((global::haxe.lang.Function) (__fn_dyn1) )) );
			this._gthis.f.handle(new global::tink.streams.FutureStream_forEach_641__Fun<Safety, Quality, Item>(this.handler, cb));
			return null;
		}
		
		
		public global::haxe.lang.Function handler;
		
		public global::tink.streams.FutureStream<Item, Quality> _gthis;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	[global::haxe.lang.GenericInterface(typeof(global::tink.streams.FutureStream<object, object>))]
	public interface FutureStream : global::haxe.lang.IHxObject, global::tink.streams.StreamBase, global::haxe.lang.IGenericObject {
		
		object tink_streams_FutureStream_cast<Item_c, Quality_c>();
		
		object tink_streams_StreamBase_cast<Item_c, Quality_c>();
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class Generator<Item, Quality> : global::tink.streams.StreamBase<Item, Quality>, global::tink.streams.Generator {
		
		public Generator(global::haxe.lang.EmptyObject empty) : base(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) )) {
		}
		
		
		public Generator(global::tink.core._Future.FutureObject<object> upcoming) {
			global::tink.streams.Generator<object, object>.__hx_ctor_tink_streams_Generator<Item, Quality>(((global::tink.streams.Generator<Item, Quality>) (this) ), ((global::tink.core._Future.FutureObject<object>) (upcoming) ));
		}
		
		
		protected static void __hx_ctor_tink_streams_Generator<Item_c, Quality_c>(global::tink.streams.Generator<Item_c, Quality_c> __hx_this, global::tink.core._Future.FutureObject<object> upcoming) {
			__hx_this.upcoming = upcoming;
		}
		
		
		public static new object __hx_cast<Item_c_c, Quality_c_c>(global::tink.streams.Generator me) {
			return ( (( me != null )) ? (me.tink_streams_Generator_cast<Item_c_c, Quality_c_c>()) : default(object) );
		}
		
		
		public static global::tink.streams.Generator<I, Q> stream<I, Q>(global::haxe.lang.Function step) {
			return new global::tink.streams.Generator<I, Q>(((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.Future_Impl_.async<object>(((global::haxe.lang.Function) (step) ), new global::haxe.lang.Null<bool>(true, true))) ));
		}
		
		
		public virtual object tink_streams_Generator_cast<Item_c, Quality_c>() {
			if (( global::haxe.lang.Runtime.eq(typeof(Item), typeof(Item_c)) && global::haxe.lang.Runtime.eq(typeof(Quality), typeof(Quality_c)) )) {
				return this;
			}
			
			global::tink.streams.Generator<Item_c, Quality_c> new_me = new global::tink.streams.Generator<Item_c, Quality_c>(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
			global::Array<object> fields = global::Reflect.fields(this);
			int i = 0;
			while (( i < fields.length )) {
				string field = global::haxe.lang.Runtime.toString(fields[i++]);
				global::Reflect.setField(new_me, field, global::Reflect.field(this, field));
			}
			
			return new_me;
		}
		
		
		public override object tink_streams_StreamObject_cast<Item_c, Quality_c>() {
			return this.tink_streams_Generator_cast<Item, Quality>();
		}
		
		
		public override object tink_streams_StreamBase_cast<Item_c, Quality_c>() {
			return this.tink_streams_Generator_cast<Item, Quality>();
		}
		
		
		public global::tink.core._Future.FutureObject<object> upcoming;
		
		public override global::tink.core._Future.FutureObject<object> next() {
			return this.upcoming;
		}
		
		
		public override global::tink.core._Future.FutureObject<object> forEach<Safety>(global::haxe.lang.Function handler) {
			global::tink.streams.Generator<Item, Quality> _gthis = this;
			return global::tink.core._Future.Future_Impl_.async<object>(((global::haxe.lang.Function) (new global::tink.streams.Generator_forEach_686__Fun<Quality, Safety, Item>(handler, _gthis)) ), new global::haxe.lang.Null<bool>(true, true));
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 480085980:
					{
						this.upcoming = ((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (@value) ))) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1153313194:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "forEach", 1153313194)) );
					}
					
					
					case 1224901875:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "next", 1224901875)) );
					}
					
					
					case 480085980:
					{
						return this.upcoming;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("upcoming");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class Generator_forEach_689__Fun<Quality, Item, Safety> : global::haxe.lang.Function {
		
		public Generator_forEach_689__Fun(global::tink.streams.StreamObject<Item, Quality> then, global::haxe.lang.Function handler, global::haxe.lang.Function cb, global::tink.streams.Generator<Item, Quality> _gthis) : base(1, 0) {
			this.then = then;
			this.handler = handler;
			this.cb = cb;
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::tink.streams.Handled s = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.streams.Handled) (((object) (__fn_float1) )) )) : (((global::tink.streams.Handled) (__fn_dyn1) )) );
				switch (s._hx_index) {
					case 0:
					{
						this.cb.__hx_invoke1_o(default(double), global::tink.streams.Conclusion.Halted(this._gthis));
						break;
					}
					
					
					case 1:
					{
						this.cb.__hx_invoke1_o(default(double), global::tink.streams.Conclusion.Halted(this.then));
						break;
					}
					
					
					case 2:
					{
						this.then.forEach<object>(((global::haxe.lang.Function) (this.handler) )).handle(this.cb);
						break;
					}
					
					
					case 3:
					{
						global::tink.core.TypedError e1 = ( s as global::tink.streams.Handled_Clog ).e;
						this.cb.__hx_invoke1_o(default(double), global::tink.streams.Conclusion.Clogged(e1, this._gthis));
						break;
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public global::tink.streams.StreamObject<Item, Quality> then;
		
		public global::haxe.lang.Function handler;
		
		public global::haxe.lang.Function cb;
		
		public global::tink.streams.Generator<Item, Quality> _gthis;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class Generator_forEach_687__Fun<Safety, Quality, Item> : global::haxe.lang.Function {
		
		public Generator_forEach_687__Fun(global::haxe.lang.Function handler, global::haxe.lang.Function cb, global::tink.streams.Generator<Item, Quality> _gthis) : base(1, 0) {
			this.handler = handler;
			this.cb = cb;
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::tink.streams.Step e = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.streams.Step) (((object) (__fn_float1) )) )) : (((global::tink.streams.Step) (__fn_dyn1) )) );
				switch (e._hx_index) {
					case 0:
					{
						global::tink.streams.StreamObject<Item, Quality> then = ((global::tink.streams.StreamObject<Item, Quality>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Item, Quality>(((global::tink.streams.StreamObject) (( e as global::tink.streams.Step_Link ).next) ))) );
						Item v = global::haxe.lang.Runtime.genericCast<Item>(( e as global::tink.streams.Step_Link ).@value);
						((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (((global::haxe.lang.Function) (this.handler) ).__hx_invoke1_o(default(double), v)) ))) ).handle(new global::tink.streams.Generator_forEach_689__Fun<Quality, Item, Safety>(then, this.handler, this.cb, this._gthis));
						break;
					}
					
					
					case 1:
					{
						global::tink.core.TypedError e2 = ( e as global::tink.streams.Step_Fail ).e;
						this.cb.__hx_invoke1_o(default(double), global::tink.streams.Conclusion.Failed(e2));
						break;
					}
					
					
					case 2:
					{
						this.cb.__hx_invoke1_o(default(double), global::tink.streams.Conclusion.Depleted);
						break;
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public global::haxe.lang.Function handler;
		
		public global::haxe.lang.Function cb;
		
		public global::tink.streams.Generator<Item, Quality> _gthis;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class Generator_forEach_686__Fun<Quality, Safety, Item> : global::haxe.lang.Function {
		
		public Generator_forEach_686__Fun(global::haxe.lang.Function handler, global::tink.streams.Generator<Item, Quality> _gthis) : base(1, 0) {
			this.handler = handler;
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::haxe.lang.Function cb = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (((global::haxe.lang.Function) (__fn_dyn1) )) );
			this._gthis.upcoming.handle(new global::tink.streams.Generator_forEach_687__Fun<Safety, Quality, Item>(this.handler, cb, this._gthis));
			return null;
		}
		
		
		public global::haxe.lang.Function handler;
		
		public global::tink.streams.Generator<Item, Quality> _gthis;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	[global::haxe.lang.GenericInterface(typeof(global::tink.streams.Generator<object, object>))]
	public interface Generator : global::haxe.lang.IHxObject, global::tink.streams.StreamBase, global::haxe.lang.IGenericObject {
		
		object tink_streams_Generator_cast<Item_c, Quality_c>();
		
		object tink_streams_StreamBase_cast<Item_c, Quality_c>();
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class BlendStream<Item, Quality> : global::tink.streams.Generator<Item, Quality>, global::tink.streams.BlendStream {
		
		public BlendStream(global::haxe.lang.EmptyObject empty) : base(global::haxe.lang.EmptyObject.EMPTY) {
		}
		
		
		public BlendStream(global::tink.streams.StreamObject<Item, Quality> a, global::tink.streams.StreamObject<Item, Quality> b) : base(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) )) {
			global::tink.streams.BlendStream<object, object>.__hx_ctor_tink_streams_BlendStream<Item, Quality>(((global::tink.streams.BlendStream<Item, Quality>) (this) ), ((global::tink.streams.StreamObject<Item, Quality>) (a) ), ((global::tink.streams.StreamObject<Item, Quality>) (b) ));
		}
		
		
		protected static void __hx_ctor_tink_streams_BlendStream<Item_c, Quality_c>(global::tink.streams.BlendStream<Item_c, Quality_c> __hx_this, global::tink.streams.StreamObject<Item_c, Quality_c> a, global::tink.streams.StreamObject<Item_c, Quality_c> b) {
			global::tink.streams.StreamObject<Item_c, Quality_c>[] first = new global::tink.streams.StreamObject<Item_c, Quality_c>[]{null};
			global::haxe.lang.Function wait = new global::tink.streams.BlendStream___hx_ctor_tink_streams_BlendStream_651__Fun<Quality_c, Item_c>(first);
			global::tink.core._Future.FutureObject<object> n1 = ((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (wait.__hx_invoke1_o(default(double), a)) ))) );
			global::tink.core._Future.FutureObject<object> n2 = ((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (wait.__hx_invoke1_o(default(double), b)) ))) );
			global::tink.streams.Generator<object, object>.__hx_ctor_tink_streams_Generator<Item_c, Quality_c>(((global::tink.streams.Generator<Item_c, Quality_c>) (__hx_this) ), ((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.Future_Impl_.async<object>(((global::haxe.lang.Function) (new global::tink.streams.BlendStream___hx_ctor_tink_streams_BlendStream_661__Fun<Quality_c, Item_c>(n2, n1, first, b, a)) ), default(global::haxe.lang.Null<bool>))) ));
		}
		
		
		public static new object __hx_cast<Item_c_c, Quality_c_c>(global::tink.streams.BlendStream me) {
			return ( (( me != null )) ? (me.tink_streams_BlendStream_cast<Item_c_c, Quality_c_c>()) : default(object) );
		}
		
		
		public virtual object tink_streams_BlendStream_cast<Item_c, Quality_c>() {
			if (( global::haxe.lang.Runtime.eq(typeof(Item), typeof(Item_c)) && global::haxe.lang.Runtime.eq(typeof(Quality), typeof(Quality_c)) )) {
				return this;
			}
			
			global::tink.streams.BlendStream<Item_c, Quality_c> new_me = new global::tink.streams.BlendStream<Item_c, Quality_c>(global::haxe.lang.EmptyObject.EMPTY);
			global::Array<object> fields = global::Reflect.fields(this);
			int i = 0;
			while (( i < fields.length )) {
				string field = global::haxe.lang.Runtime.toString(fields[i++]);
				global::Reflect.setField(new_me, field, global::Reflect.field(this, field));
			}
			
			return new_me;
		}
		
		
		public override object tink_streams_StreamObject_cast<Item_c, Quality_c>() {
			return this.tink_streams_BlendStream_cast<Item, Quality>();
		}
		
		
		public override object tink_streams_StreamBase_cast<Item_c, Quality_c>() {
			return this.tink_streams_BlendStream_cast<Item, Quality>();
		}
		
		
		public override object tink_streams_Generator_cast<Item_c, Quality_c>() {
			return this.tink_streams_BlendStream_cast<Item, Quality>();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class BlendStream___hx_ctor_tink_streams_BlendStream_652__Fun<Quality_c, Item_c> : global::haxe.lang.Function {
		
		public BlendStream___hx_ctor_tink_streams_BlendStream_652__Fun(global::tink.streams.StreamObject<Item_c, Quality_c> s, global::tink.streams.StreamObject<Item_c, Quality_c>[] first) : base(1, 0) {
			this.s = s;
			this.first = first;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::tink.streams.Step o = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.streams.Step) (((object) (__fn_float1) )) )) : (((global::tink.streams.Step) (__fn_dyn1) )) );
			if (( this.first[0] == null )) {
				this.first[0] = this.s;
			}
			
			return o;
		}
		
		
		public global::tink.streams.StreamObject<Item_c, Quality_c> s;
		
		public global::tink.streams.StreamObject<Item_c, Quality_c>[] first;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class BlendStream___hx_ctor_tink_streams_BlendStream_651__Fun<Quality_c, Item_c> : global::haxe.lang.Function {
		
		public BlendStream___hx_ctor_tink_streams_BlendStream_651__Fun(global::tink.streams.StreamObject<Item_c, Quality_c>[] first) : base(1, 0) {
			this.first = first;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::tink.streams.StreamObject<Item_c, Quality_c> s = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.streams.StreamObject<Item_c, Quality_c>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Item_c, Quality_c>(((global::tink.streams.StreamObject) (((object) (__fn_float1) )) ))) )) : (((global::tink.streams.StreamObject<Item_c, Quality_c>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Item_c, Quality_c>(((global::tink.streams.StreamObject) (__fn_dyn1) ))) )) );
			global::tink.core._Future.FutureObject<object> ret = ((global::tink.core._Future.FutureObject<object>) (s.next()) ).map<object>(((global::haxe.lang.Function) (new global::tink.streams.BlendStream___hx_ctor_tink_streams_BlendStream_652__Fun<Quality_c, Item_c>(s, this.first)) ));
			return ret.gather();
		}
		
		
		public global::tink.streams.StreamObject<Item_c, Quality_c>[] first;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class BlendStream___hx_ctor_tink_streams_BlendStream_662__Fun<Quality_c, Item_c> : global::haxe.lang.Function {
		
		public BlendStream___hx_ctor_tink_streams_BlendStream_662__Fun(global::tink.core._Future.FutureObject<object> n2, global::tink.core._Future.FutureObject<object> n1, global::tink.streams.StreamObject<Item_c, Quality_c>[] first, global::haxe.lang.Function cb, global::tink.streams.StreamObject<Item_c, Quality_c> b, global::tink.streams.StreamObject<Item_c, Quality_c> a) : base(1, 0) {
			this.n2 = n2;
			this.n1 = n1;
			this.first = first;
			this.cb = cb;
			this.b = b;
			this.a = a;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::tink.streams.Step o1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.streams.Step) (((object) (__fn_float1) )) )) : (((global::tink.streams.Step) (__fn_dyn1) )) );
				switch (o1._hx_index) {
					case 0:
					{
						global::tink.streams.StreamObject<Item_c, Quality_c> rest = ((global::tink.streams.StreamObject<Item_c, Quality_c>) (global::tink.streams.StreamObject__Statics_.__hx_cast<Item_c, Quality_c>(((global::tink.streams.StreamObject) (( o1 as global::tink.streams.Step_Link ).next) ))) );
						Item_c item = global::haxe.lang.Runtime.genericCast<Item_c>(( o1 as global::tink.streams.Step_Link ).@value);
						global::tink.streams.Step tmp = global::tink.streams.Step.Link(item, new global::tink.streams.BlendStream<Item_c, Quality_c>(rest, ( (( this.first[0] == this.a )) ? (this.b) : (this.a) )));
						this.cb.__hx_invoke1_o(default(double), tmp);
						break;
					}
					
					
					case 1:
					{
						global::tink.core.TypedError e = ( o1 as global::tink.streams.Step_Fail ).e;
						this.cb.__hx_invoke1_o(default(double), global::tink.streams.Step.Fail(e));
						break;
					}
					
					
					case 2:
					{
						(( (( this.first[0] == this.a )) ? (this.n2) : (this.n1) )).handle(this.cb);
						break;
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public global::tink.core._Future.FutureObject<object> n2;
		
		public global::tink.core._Future.FutureObject<object> n1;
		
		public global::tink.streams.StreamObject<Item_c, Quality_c>[] first;
		
		public global::haxe.lang.Function cb;
		
		public global::tink.streams.StreamObject<Item_c, Quality_c> b;
		
		public global::tink.streams.StreamObject<Item_c, Quality_c> a;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class BlendStream___hx_ctor_tink_streams_BlendStream_661__Fun<Quality_c, Item_c> : global::haxe.lang.Function {
		
		public BlendStream___hx_ctor_tink_streams_BlendStream_661__Fun(global::tink.core._Future.FutureObject<object> n2, global::tink.core._Future.FutureObject<object> n1, global::tink.streams.StreamObject<Item_c, Quality_c>[] first, global::tink.streams.StreamObject<Item_c, Quality_c> b, global::tink.streams.StreamObject<Item_c, Quality_c> a) : base(1, 0) {
			this.n2 = n2;
			this.n1 = n1;
			this.first = first;
			this.b = b;
			this.a = a;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::haxe.lang.Function cb = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (((global::haxe.lang.Function) (__fn_dyn1) )) );
			global::tink.core._Future.Future_Impl_.first<object>(((global::tink.core._Future.FutureObject<object>) (this.n1) ), ((global::tink.core._Future.FutureObject<object>) (this.n2) )).handle(new global::tink.streams.BlendStream___hx_ctor_tink_streams_BlendStream_662__Fun<Quality_c, Item_c>(this.n2, this.n1, this.first, cb, this.b, this.a));
			return null;
		}
		
		
		public global::tink.core._Future.FutureObject<object> n2;
		
		public global::tink.core._Future.FutureObject<object> n1;
		
		public global::tink.streams.StreamObject<Item_c, Quality_c>[] first;
		
		public global::tink.streams.StreamObject<Item_c, Quality_c> b;
		
		public global::tink.streams.StreamObject<Item_c, Quality_c> a;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	[global::haxe.lang.GenericInterface(typeof(global::tink.streams.BlendStream<object, object>))]
	public interface BlendStream : global::haxe.lang.IHxObject, global::tink.streams.Generator, global::haxe.lang.IGenericObject {
		
		object tink_streams_BlendStream_cast<Item_c, Quality_c>();
		
		object tink_streams_Generator_cast<Item_c, Quality_c>();
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class Step : global::haxe.lang.Enum {
		
		protected Step(int index) : base(index) {
		}
		
		
		public static global::tink.streams.Step Link(object @value, global::tink.streams.StreamObject next) {
			return new global::tink.streams.Step_Link(@value, next);
		}
		
		
		public static global::tink.streams.Step Fail(global::tink.core.TypedError e) {
			return new global::tink.streams.Step_Fail(e);
		}
		
		
		public static readonly global::tink.streams.Step End = new global::tink.streams.Step_End();
		
		protected static readonly string[] __hx_constructs = new string[]{"Link", "Fail", "End"};
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public sealed class Step_Link : global::tink.streams.Step {
		
		public Step_Link(object @value, global::tink.streams.StreamObject next) : base(0) {
			this.@value = @value;
			this.next = next;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.@value, this.next});
		}
		
		
		public override string getTag() {
			return "Link";
		}
		
		
		public override int GetHashCode() {
			return global::haxe.lang.Enum.paramsGetHashCode(0, new object[]{this.@value, this.next});
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::tink.streams.Step_Link en = ( other as global::tink.streams.Step_Link );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.@value) ), ((object) (en.@value) ))) ) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.next) ), ((object) (en.next) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("Link", new object[]{this.@value, this.next});
		}
		
		
		public readonly object @value;
		
		public readonly global::tink.streams.StreamObject next;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public sealed class Step_Fail : global::tink.streams.Step {
		
		public Step_Fail(global::tink.core.TypedError e) : base(1) {
			this.e = e;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.e});
		}
		
		
		public override string getTag() {
			return "Fail";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(1, new object[]{this.e});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::tink.streams.Step_Fail en = ( other as global::tink.streams.Step_Fail );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.e) ), ((object) (en.e) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("Fail", new object[]{this.e});
		}
		
		
		public readonly global::tink.core.TypedError e;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public sealed class Step_End : global::tink.streams.Step {
		
		public Step_End() : base(2) {
		}
		
		
		public override string getTag() {
			return "End";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class SignalStream<Item, Quality> : global::tink.streams.Generator<Item, Quality>, global::tink.streams.SignalStream {
		
		public SignalStream(global::haxe.lang.EmptyObject empty) : base(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) )) {
		}
		
		
		public SignalStream(global::tink.core.SignalObject<object> signal) : base(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) )) {
			global::tink.streams.SignalStream<object, object>.__hx_ctor_tink_streams_SignalStream<Item, Quality>(((global::tink.streams.SignalStream<Item, Quality>) (this) ), ((global::tink.core.SignalObject<object>) (signal) ));
		}
		
		
		protected static void __hx_ctor_tink_streams_SignalStream<Item_c, Quality_c>(global::tink.streams.SignalStream<Item_c, Quality_c> __hx_this, global::tink.core.SignalObject<object> signal) {
			global::tink.core._Future.FutureObject<object> ret = ((global::tink.core._Future.FutureObject<object>) (global::tink.core._Signal.Signal_Impl_.nextTime<object>(((global::tink.core.SignalObject<object>) (signal) ), default(global::haxe.lang.Function))) ).map<object>(((global::haxe.lang.Function) (new global::tink.streams.SignalStream___hx_ctor_tink_streams_SignalStream_721__Fun<Quality_c, Item_c>(signal)) ));
			global::tink.streams.Generator<object, object>.__hx_ctor_tink_streams_Generator<Item_c, Quality_c>(((global::tink.streams.Generator<Item_c, Quality_c>) (__hx_this) ), ((global::tink.core._Future.FutureObject<object>) (ret.gather()) ));
		}
		
		
		public static new object __hx_cast<Item_c_c, Quality_c_c>(global::tink.streams.SignalStream me) {
			return ( (( me != null )) ? (me.tink_streams_SignalStream_cast<Item_c_c, Quality_c_c>()) : default(object) );
		}
		
		
		public virtual object tink_streams_SignalStream_cast<Item_c, Quality_c>() {
			if (( global::haxe.lang.Runtime.eq(typeof(Item), typeof(Item_c)) && global::haxe.lang.Runtime.eq(typeof(Quality), typeof(Quality_c)) )) {
				return this;
			}
			
			global::tink.streams.SignalStream<Item_c, Quality_c> new_me = new global::tink.streams.SignalStream<Item_c, Quality_c>(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
			global::Array<object> fields = global::Reflect.fields(this);
			int i = 0;
			while (( i < fields.length )) {
				string field = global::haxe.lang.Runtime.toString(fields[i++]);
				global::Reflect.setField(new_me, field, global::Reflect.field(this, field));
			}
			
			return new_me;
		}
		
		
		public override object tink_streams_StreamObject_cast<Item_c, Quality_c>() {
			return this.tink_streams_SignalStream_cast<Item, Quality>();
		}
		
		
		public override object tink_streams_StreamBase_cast<Item_c, Quality_c>() {
			return this.tink_streams_SignalStream_cast<Item, Quality>();
		}
		
		
		public override object tink_streams_Generator_cast<Item_c, Quality_c>() {
			return this.tink_streams_SignalStream_cast<Item, Quality>();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class SignalStream___hx_ctor_tink_streams_SignalStream_721__Fun<Quality_c, Item_c> : global::haxe.lang.Function {
		
		public SignalStream___hx_ctor_tink_streams_SignalStream_721__Fun(global::tink.core.SignalObject<object> signal) : base(1, 0) {
			this.signal = signal;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::tink.streams.Yield o = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.streams.Yield) (((object) (__fn_float1) )) )) : (((global::tink.streams.Yield) (__fn_dyn1) )) );
				switch (o._hx_index) {
					case 0:
					{
						Item_c data = global::haxe.lang.Runtime.genericCast<Item_c>(( o as global::tink.streams.Yield_Data ).data);
						return global::tink.streams.Step.Link(data, new global::tink.streams.SignalStream<Item_c, Quality_c>(((global::tink.core.SignalObject<object>) (this.signal) )));
					}
					
					
					case 1:
					{
						global::tink.core.TypedError e = ( o as global::tink.streams.Yield_Fail ).e;
						return global::tink.streams.Step.Fail(e);
					}
					
					
					case 2:
					{
						return global::tink.streams.Step.End;
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public global::tink.core.SignalObject<object> signal;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	[global::haxe.lang.GenericInterface(typeof(global::tink.streams.SignalStream<object, object>))]
	public interface SignalStream : global::haxe.lang.IHxObject, global::tink.streams.Generator, global::haxe.lang.IGenericObject {
		
		object tink_streams_SignalStream_cast<Item_c, Quality_c>();
		
		object tink_streams_Generator_cast<Item_c, Quality_c>();
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public class Yield : global::haxe.lang.Enum {
		
		protected Yield(int index) : base(index) {
		}
		
		
		public static global::tink.streams.Yield Data(object data) {
			return new global::tink.streams.Yield_Data(data);
		}
		
		
		public static global::tink.streams.Yield Fail(global::tink.core.TypedError e) {
			return new global::tink.streams.Yield_Fail(e);
		}
		
		
		public static readonly global::tink.streams.Yield End = new global::tink.streams.Yield_End();
		
		protected static readonly string[] __hx_constructs = new string[]{"Data", "Fail", "End"};
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public sealed class Yield_Data : global::tink.streams.Yield {
		
		public Yield_Data(object data) : base(0) {
			this.data = data;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.data});
		}
		
		
		public override string getTag() {
			return "Data";
		}
		
		
		public override int GetHashCode() {
			return global::haxe.lang.Enum.paramsGetHashCode(0, new object[]{this.data});
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::tink.streams.Yield_Data en = ( other as global::tink.streams.Yield_Data );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.data) ), ((object) (en.data) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("Data", new object[]{this.data});
		}
		
		
		public readonly object data;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public sealed class Yield_Fail : global::tink.streams.Yield {
		
		public Yield_Fail(global::tink.core.TypedError e) : base(1) {
			this.e = e;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.e});
		}
		
		
		public override string getTag() {
			return "Fail";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(1, new object[]{this.e});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::tink.streams.Yield_Fail en = ( other as global::tink.streams.Yield_Fail );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.e) ), ((object) (en.e) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("Fail", new object[]{this.e});
		}
		
		
		public readonly global::tink.core.TypedError e;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.streams {
	public sealed class Yield_End : global::tink.streams.Yield {
		
		public Yield_End() : base(2) {
		}
		
		
		public override string getTag() {
			return "End";
		}
		
		
	}
}


