// Generated by Haxe 4.0.0-rc.2+77068e10c

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink {
	public class RunLoop : global::tink.runloop.QueueWorker {
		
		static RunLoop() {
			global::tink.RunLoop.current = new global::tink.RunLoop(default(string));
		}
		
		
		public RunLoop(global::haxe.lang.EmptyObject empty) : base(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) )) {
		}
		
		
		public RunLoop(string id) : base(global::haxe.lang.EmptyObject.EMPTY) {
			global::tink.RunLoop.__hx_ctor_tink_RunLoop(this, id);
		}
		
		
		protected static void __hx_ctor_tink_RunLoop(global::tink.RunLoop __hx_this, string id) {
			__hx_this.slaveCounter = 0;
			__hx_this.burstCap = .25;
			__hx_this.retainCount = 0;
			__hx_this.onError = new global::tink.RunLoop___hx_ctor_tink_RunLoop_118__Fun(__hx_this);
			{
				if (( id == null )) {
					id = "ROOT_LOOP";
				}
				
				__hx_this.slaves = new global::Array<object>(new object[]{});
				__hx_this.done = __hx_this._done = global::tink.core._Signal.Signal_Impl_.trigger<object>();
				global::tink.runloop.QueueWorker.__hx_ctor_tink_runloop_QueueWorker(__hx_this, __hx_this, id);
			}
			
		}
		
		
		public static global::tink.RunLoop current;
		
		public static double getStamp() {
			unchecked {
				return ( ((double) (global::System.Environment.TickCount) ) / 1000 );
			}
		}
		
		
		public static void create(global::haxe.lang.Function init) {
			global::tink.RunLoop.current.enter(init);
		}
		
		
		public int retainCount;
		
		public bool running;
		
		public global::Array<object> slaves;
		
		public global::tink.core.SignalObject<object> done;
		
		public global::tink.core.SignalTrigger<object> _done;
		
		public virtual global::tink.runloop.WorkResult burst(double time) {
			double limit = ( global::tink.RunLoop.getStamp() + global::System.Math.Min(((double) (time) ), ((double) (this.burstCap) )) );
			global::tink.runloop.WorkResult ret = null;
			while (this.running) {
				{
					global::tink.runloop.WorkResult _g = this.step();
					if (( _g._hx_index == 0 )) {
					}
					else {
						global::tink.runloop.WorkResult v = _g;
						ret = v;
						break;
					}
					
				}
				
				if ( ! ((( global::tink.RunLoop.getStamp() < limit ))) ) {
					break;
				}
				
			}
			
			return ret;
		}
		
		
		public double burstCap;
		
		public virtual void enter(global::haxe.lang.Function init) {
			if ( ! (this.running) ) {
				this.spin(init);
			}
			else {
				this.work(global::tink.runloop._Task.Task_Impl_.ofFunction(init));
			}
			
		}
		
		
		public virtual void spin(global::haxe.lang.Function init) {
			unchecked {
				global::tink.RunLoop _gthis = this;
				this.running = true;
				this.execute(global::tink.runloop._Task.Task_Impl_.ofFunction(init));
				double[] stamp = new double[]{global::tink.RunLoop.getStamp()};
				global::haxe.lang.Function burst = new global::tink.RunLoop_spin_74__Fun(stamp, _gthis);
				while (this.running) {
					switch (this.step()._hx_index) {
						case 3:
						case 4:
						{
							this.running = false;
							break;
						}
						
						
						default:
						{
							break;
						}
						
					}
					
				}
				
			}
		}
		
		
		public override void log(object v, object p) {
			global::haxe.Log.trace.__hx_invoke2_o(default(double), v, default(double), p);
		}
		
		
		public global::haxe.lang.Function onError;
		
		public virtual global::tink.core._Future.FutureObject<A> @delegate<A>(global::tink.core._Lazy.LazyObject<A> task, global::tink.runloop.Worker slave) {
			global::tink.RunLoop _gthis = this;
			global::tink.core.FutureTrigger<A> t = new global::tink.core.FutureTrigger<A>();
			this.asap(global::tink.runloop._Task.Task_Impl_.ofFunction(new global::tink.RunLoop_delegate_135__Fun(_gthis)));
			slave.work(global::tink.runloop._Task.Task_Impl_.ofFunction(new global::tink.RunLoop_delegate_138__Fun<A>(task, t, _gthis)));
			return ((global::tink.core._Future.FutureObject<A>) (t) );
		}
		
		
		public virtual global::tink.core._Future.FutureObject<object> tryDelegate<A>(global::tink.core._Lazy.LazyObject<A> @unsafe, global::tink.runloop.Worker slave, global::haxe.lang.Function report) {
			unchecked {
				return this.@delegate<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (global::tink.core.TypedError<object>.catchExceptions<A>(((global::haxe.lang.Function) (new global::tink.RunLoop_tryDelegate_155__Fun<A>(@unsafe)) ), ((global::haxe.lang.Function) (report) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"tryDelegate", "tink.RunLoop", "tink/RunLoop.hx"}, new int[]{1981972957}, new double[]{((double) (155) )})) ))) ))) ), ((global::tink.runloop.Worker) (slave) ));
			}
		}
		
		
		public virtual global::tink.runloop.TaskObject retain() {
			global::tink.RunLoop _gthis = this;
			this.asap(global::tink.runloop._Task.Task_Impl_.ofFunction(new global::tink.RunLoop_retain_161__Fun(_gthis)));
			return global::tink.runloop._Task.Task_Impl_.ofFunction(new global::tink.RunLoop_retain_163__Fun(_gthis));
		}
		
		
		public virtual global::haxe.lang.Function bind<A>(global::haxe.lang.Function callback) {
			global::haxe.lang.Function[] callback1 = new global::haxe.lang.Function[]{callback};
			global::tink.RunLoop _gthis = this;
			if (( callback1[0] == null )) {
				return null;
			}
			
			this.asap(global::tink.runloop._Task.Task_Impl_.ofFunction(new global::tink.RunLoop_bind_183__Fun(_gthis)));
			return new global::tink.RunLoop_bind_185__Fun<A>(callback1, _gthis);
		}
		
		
		public virtual A synchronously<A>(global::haxe.lang.Function operation) {
			return global::haxe.lang.Runtime.genericCast<A>(operation.__hx_invoke0_o());
		}
		
		
		public int slaveCounter;
		
		public virtual global::tink.runloop.WorkResult runSlaves() {
			this.slaveCounter %= this.slaves.length;
			if (( this.slaves.length > 0 )) {
				int _g = 0;
				int _g1 = this.slaves.length;
				while (( _g < _g1 )) {
					int _ = _g++;
					if (( ((global::tink.runloop.Worker) (this.slaves[( this.slaveCounter++ % this.slaves.length )]) ).step()._hx_index == 0 )) {
						return global::tink.runloop.WorkResult.Progressed;
					}
					
				}
				
			}
			
			return global::tink.runloop.WorkResult.Idle;
		}
		
		
		public override global::tink.runloop.WorkResult doStep() {
			global::tink.runloop.TaskObject _g = ((global::tink.runloop.TaskObject) ((((global::haxe.ds.List<object>) (this.tasks) ).pop()).@value) );
			if (( _g == null )) {
				if (( this.retainCount == 0 )) {
					global::tink.core._Callback.CallbackList_Impl_.invoke<object>(((global::Array<object>) (this._done.handlers) ), ((object) (global::tink.core.TinkNoise.Noise) ));
					return global::tink.runloop.WorkResult.Done;
				}
				else {
					return this.runSlaves();
				}
				
			}
			else {
				global::tink.runloop.TaskObject v = _g;
				return this.execute(v);
			}
			
		}
		
		
		public virtual global::tink.runloop.Worker createSlave() {
			global::tink.runloop.QueueWorker w = new global::tink.runloop.QueueWorker(this, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("", this.id), "/worker#"), global::haxe.lang.Runtime.toString(this.slaves.length)));
			this.slaves.push(w);
			return w;
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 2044931301:
					{
						this.slaveCounter = ((int) (@value) );
						return @value;
					}
					
					
					case 2135079506:
					{
						this.burstCap = ((double) (@value) );
						return @value;
					}
					
					
					case 1762523850:
					{
						this.retainCount = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 2044931301:
					{
						this.slaveCounter = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 157772329:
					{
						this.onError = ((global::haxe.lang.Function) (@value) );
						return @value;
					}
					
					
					case 2135079506:
					{
						this.burstCap = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 1971260513:
					{
						this._done = ((global::tink.core.SignalTrigger<object>) (global::tink.core.SignalTrigger<object>.__hx_cast<object>(((global::tink.core.SignalTrigger) (@value) ))) );
						return @value;
					}
					
					
					case 1114501250:
					{
						this.done = ((global::tink.core.SignalObject<object>) (global::tink.core.SignalObject__Statics_.__hx_cast<object>(((global::tink.core.SignalObject) (@value) ))) );
						return @value;
					}
					
					
					case 1791539644:
					{
						this.slaves = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (@value) ))) );
						return @value;
					}
					
					
					case 1802071551:
					{
						this.running = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					case 1762523850:
					{
						this.retainCount = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 675084859:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "createSlave", 675084859)) );
					}
					
					
					case 476023927:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "doStep", 476023927)) );
					}
					
					
					case 287645543:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "runSlaves", 287645543)) );
					}
					
					
					case 2044931301:
					{
						return this.slaveCounter;
					}
					
					
					case 169035606:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "synchronously", 169035606)) );
					}
					
					
					case 1092023741:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "bind", 1092023741)) );
					}
					
					
					case 152989637:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "retain", 152989637)) );
					}
					
					
					case 1842171808:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "tryDelegate", 1842171808)) );
					}
					
					
					case 1510930245:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "delegate", 1510930245)) );
					}
					
					
					case 157772329:
					{
						return this.onError;
					}
					
					
					case 5395588:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "log", 5395588)) );
					}
					
					
					case 1280893378:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "spin", 1280893378)) );
					}
					
					
					case 1887857944:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "enter", 1887857944)) );
					}
					
					
					case 2135079506:
					{
						return this.burstCap;
					}
					
					
					case 988919200:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "burst", 988919200)) );
					}
					
					
					case 1971260513:
					{
						return this._done;
					}
					
					
					case 1114501250:
					{
						return this.done;
					}
					
					
					case 1791539644:
					{
						return this.slaves;
					}
					
					
					case 1802071551:
					{
						return this.running;
					}
					
					
					case 1762523850:
					{
						return this.retainCount;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 2044931301:
					{
						return ((double) (this.slaveCounter) );
					}
					
					
					case 2135079506:
					{
						return this.burstCap;
					}
					
					
					case 1762523850:
					{
						return ((double) (this.retainCount) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 5395588:
					case 476023927:
					{
						return global::haxe.lang.Runtime.slowCallField(this, field, dynargs);
					}
					
					
					case 675084859:
					{
						return this.createSlave();
					}
					
					
					case 287645543:
					{
						return this.runSlaves();
					}
					
					
					case 169035606:
					{
						return this.synchronously<object>(((global::haxe.lang.Function) (dynargs[0]) ));
					}
					
					
					case 1092023741:
					{
						return this.bind<object>(((global::haxe.lang.Function) (dynargs[0]) ));
					}
					
					
					case 152989637:
					{
						return this.retain();
					}
					
					
					case 1842171808:
					{
						return this.tryDelegate<object>(((global::tink.core._Lazy.LazyObject<object>) (global::tink.core._Lazy.LazyObject__Statics_.__hx_cast<object>(((global::tink.core._Lazy.LazyObject) (dynargs[0]) ))) ), ((global::tink.runloop.Worker) (dynargs[1]) ), ((global::haxe.lang.Function) (dynargs[2]) ));
					}
					
					
					case 1510930245:
					{
						return this.@delegate<object>(((global::tink.core._Lazy.LazyObject<object>) (global::tink.core._Lazy.LazyObject__Statics_.__hx_cast<object>(((global::tink.core._Lazy.LazyObject) (dynargs[0]) ))) ), ((global::tink.runloop.Worker) (dynargs[1]) ));
					}
					
					
					case 1280893378:
					{
						this.spin(((global::haxe.lang.Function) (dynargs[0]) ));
						break;
					}
					
					
					case 1887857944:
					{
						this.enter(((global::haxe.lang.Function) (dynargs[0]) ));
						break;
					}
					
					
					case 988919200:
					{
						return this.burst(((double) (global::haxe.lang.Runtime.toDouble(dynargs[0])) ));
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("slaveCounter");
			baseArr.push("onError");
			baseArr.push("burstCap");
			baseArr.push("_done");
			baseArr.push("done");
			baseArr.push("slaves");
			baseArr.push("running");
			baseArr.push("retainCount");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink {
	public class RunLoop_spin_75__Fun : global::haxe.lang.Function {
		
		public RunLoop_spin_75__Fun(global::haxe.lang.Function stop, double[] stamp, global::tink.RunLoop _gthis) : base(0, 0) {
			this.stop = stop;
			this.stamp = stamp;
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke0_o() {
			unchecked {
				double delta = ( global::tink.RunLoop.getStamp() - this.stamp[0] );
				this.stamp[0] += delta;
				switch (this._gthis.burst(delta)._hx_index) {
					case 3:
					case 4:
					{
						this._gthis.running = false;
						object __temp_expr1 = ((object) (this.stop.__hx_invoke0_o()) );
						break;
					}
					
					
					default:
					{
						break;
					}
					
				}
				
				return null;
			}
		}
		
		
		public global::haxe.lang.Function stop;
		
		public double[] stamp;
		
		public global::tink.RunLoop _gthis;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink {
	public class RunLoop_spin_74__Fun : global::haxe.lang.Function {
		
		public RunLoop_spin_74__Fun(double[] stamp, global::tink.RunLoop _gthis) : base(1, 0) {
			this.stamp = stamp;
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::haxe.lang.Function stop = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (((global::haxe.lang.Function) (__fn_dyn1) )) );
			return new global::tink.RunLoop_spin_75__Fun(stop, this.stamp, this._gthis);
		}
		
		
		public double[] stamp;
		
		public global::tink.RunLoop _gthis;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink {
	public class RunLoop_delegate_135__Fun : global::haxe.lang.Function {
		
		public RunLoop_delegate_135__Fun(global::tink.RunLoop _gthis) : base(0, 0) {
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke0_o() {
			this._gthis.retainCount++;
			return null;
		}
		
		
		public global::tink.RunLoop _gthis;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink {
	public class RunLoop_delegate_140__Fun<A> : global::haxe.lang.Function {
		
		public RunLoop_delegate_140__Fun(global::tink.core.FutureTrigger<A> t, A res, global::tink.RunLoop _gthis) : base(0, 0) {
			this.t = t;
			this.res = res;
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke0_o() {
			this.t.trigger(this.res);
			this._gthis.retainCount--;
			return null;
		}
		
		
		public global::tink.core.FutureTrigger<A> t;
		
		public A res;
		
		public global::tink.RunLoop _gthis;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink {
	public class RunLoop_delegate_138__Fun<A> : global::haxe.lang.Function {
		
		public RunLoop_delegate_138__Fun(global::tink.core._Lazy.LazyObject<A> task, global::tink.core.FutureTrigger<A> t, global::tink.RunLoop _gthis) : base(0, 0) {
			this.task = task;
			this.t = t;
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke0_o() {
			A res = global::haxe.lang.Runtime.genericCast<A>(((global::tink.core._Lazy.LazyObject<A>) (this.task) ).@get());
			this._gthis.work(global::tink.runloop._Task.Task_Impl_.ofFunction(new global::tink.RunLoop_delegate_140__Fun<A>(this.t, res, this._gthis)));
			return null;
		}
		
		
		public global::tink.core._Lazy.LazyObject<A> task;
		
		public global::tink.core.FutureTrigger<A> t;
		
		public global::tink.RunLoop _gthis;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink {
	public class RunLoop_tryDelegate_155__Fun<A> : global::haxe.lang.Function {
		
		public RunLoop_tryDelegate_155__Fun(global::tink.core._Lazy.LazyObject<A> @unsafe) : base(0, 0) {
			this.@unsafe = @unsafe;
		}
		
		
		public override object __hx_invoke0_o() {
			return global::haxe.lang.Runtime.genericCast<A>(((global::tink.core._Lazy.LazyObject<A>) (this.@unsafe) ).@get());
		}
		
		
		public global::tink.core._Lazy.LazyObject<A> @unsafe;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink {
	public class RunLoop_retain_161__Fun : global::haxe.lang.Function {
		
		public RunLoop_retain_161__Fun(global::tink.RunLoop _gthis) : base(0, 0) {
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke0_o() {
			this._gthis.retainCount++;
			return null;
		}
		
		
		public global::tink.RunLoop _gthis;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink {
	public class RunLoop_retain_163__Fun_0 : global::haxe.lang.Function {
		
		public RunLoop_retain_163__Fun_0(global::tink.RunLoop _gthis) : base(0, 0) {
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke0_o() {
			this._gthis.retainCount--;
			return null;
		}
		
		
		public global::tink.RunLoop _gthis;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink {
	public class RunLoop_retain_163__Fun : global::haxe.lang.Function {
		
		public RunLoop_retain_163__Fun(global::tink.RunLoop _gthis) : base(0, 0) {
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke0_o() {
			this._gthis.asap(global::tink.runloop._Task.Task_Impl_.ofFunction(new global::tink.RunLoop_retain_163__Fun_0(this._gthis)));
			return null;
		}
		
		
		public global::tink.RunLoop _gthis;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink {
	public class RunLoop_bind_183__Fun : global::haxe.lang.Function {
		
		public RunLoop_bind_183__Fun(global::tink.RunLoop _gthis) : base(0, 0) {
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke0_o() {
			this._gthis.retainCount++;
			return null;
		}
		
		
		public global::tink.RunLoop _gthis;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink {
	public class RunLoop_bind_187__Fun<A> : global::haxe.lang.Function {
		
		public RunLoop_bind_187__Fun(A result, global::haxe.lang.Function[] callback1, global::tink.RunLoop _gthis) : base(0, 0) {
			this.result = result;
			this.callback1 = callback1;
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke0_o() {
			if (( this.callback1[0] != null )) {
				global::tink.core._Callback.Callback_Impl_.invoke<A>(((global::haxe.lang.Function) (this.callback1[0]) ), global::haxe.lang.Runtime.genericCast<A>(this.result));
				this.callback1[0] = null;
				this._gthis.retainCount--;
			}
			
			return null;
		}
		
		
		public A result;
		
		public global::haxe.lang.Function[] callback1;
		
		public global::tink.RunLoop _gthis;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink {
	public class RunLoop_bind_185__Fun<A> : global::haxe.lang.Function {
		
		public RunLoop_bind_185__Fun(global::haxe.lang.Function[] callback1, global::tink.RunLoop _gthis) : base(1, 0) {
			this.callback1 = callback1;
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			A result = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<A>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<A>(__fn_dyn1)) );
			this._gthis.work(global::tink.runloop._Task.Task_Impl_.ofFunction(new global::tink.RunLoop_bind_187__Fun<A>(result, this.callback1, this._gthis)));
			return null;
		}
		
		
		public global::haxe.lang.Function[] callback1;
		
		public global::tink.RunLoop _gthis;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink {
	public class RunLoop___hx_ctor_tink_RunLoop_118__Fun : global::haxe.lang.Function {
		
		public RunLoop___hx_ctor_tink_RunLoop_118__Fun(global::tink.RunLoop __hx_this) : base(4, 0) {
			this.__hx_this = __hx_this;
		}
		
		
		public override object __hx_invoke4_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2, double __fn_float3, object __fn_dyn3, double __fn_float4, object __fn_dyn4) {
			unchecked {
				global::Array<object> stack = ( (( __fn_dyn4 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (((object) (__fn_float4) )) ))) )) : (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (__fn_dyn4) ))) )) );
				global::tink.runloop.Worker w = ( (( __fn_dyn3 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.runloop.Worker) (((object) (__fn_float3) )) )) : (((global::tink.runloop.Worker) (__fn_dyn3) )) );
				global::tink.runloop.TaskObject t = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.runloop.TaskObject) (((object) (__fn_float2) )) )) : (((global::tink.runloop.TaskObject) (__fn_dyn2) )) );
				global::tink.core.TypedError e = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.TypedError) (((object) (__fn_float1) )) )) : (((global::tink.core.TypedError) (__fn_dyn1) )) );
				if (( w != this.__hx_this )) {
					this.__hx_this.log(t, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"onError", "tink.RunLoop", "tink/RunLoop.hx"}, new int[]{1981972957}, new double[]{((double) (120) )}));
					this.__hx_this.log(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("\nError on worker ", global::Std.@string(w)), ":\n"), global::haxe.CallStack.toString(stack)), "\n"), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"onError", "tink.RunLoop", "tink/RunLoop.hx"}, new int[]{1981972957}, new double[]{((double) (121) )}));
					this.__hx_this.kill();
					throw global::haxe.lang.HaxeException.wrap(e);
				}
				else {
					object any = ((object) (e) );
					throw global::haxe.lang.HaxeException.wrap(any);
				}
				
			}
		}
		
		
		public global::tink.RunLoop __hx_this;
		
	}
}


