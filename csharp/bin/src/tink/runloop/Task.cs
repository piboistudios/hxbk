// Generated by Haxe 4.0.0-rc.2+77068e10c

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.runloop {
	public interface TaskObject : global::haxe.lang.IHxObject {
		
		global::tink.runloop.TaskState get_state();
		
		bool get_recurring();
		
		void cancel();
		
		void perform();
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.runloop._Task {
	public class Noop : global::haxe.lang.HxObject, global::tink.runloop.TaskObject {
		
		public Noop(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Noop() {
			global::tink.runloop._Task.Noop.__hx_ctor_tink_runloop__Task_Noop(this);
		}
		
		
		protected static void __hx_ctor_tink_runloop__Task_Noop(global::tink.runloop._Task.Noop __hx_this) {
		}
		
		
		
		
		public bool get_recurring() {
			return false;
		}
		
		
		
		
		public global::tink.runloop.TaskState get_state() {
			return global::tink.runloop.TaskState.Performed;
		}
		
		
		public virtual void cancel() {
		}
		
		
		public virtual void perform() {
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 2061363361:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "perform", 2061363361)) );
					}
					
					
					case 942927226:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "cancel", 942927226)) );
					}
					
					
					case 1203032680:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_state", 1203032680)) );
					}
					
					
					case 67859985:
					{
						return this.get_state();
					}
					
					
					case 229786036:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_recurring", 229786036)) );
					}
					
					
					case 1280208349:
					{
						return this.get_recurring();
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 2061363361:
					{
						this.perform();
						break;
					}
					
					
					case 942927226:
					{
						this.cancel();
						break;
					}
					
					
					case 1203032680:
					{
						return this.get_state();
					}
					
					
					case 229786036:
					{
						return this.get_recurring();
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("state");
			baseArr.push("recurring");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.runloop._Task {
	public sealed class Task_Impl_ {
		
		static Task_Impl_() {
			global::tink.runloop._Task.Task_Impl_.NOOP = ((global::tink.runloop.TaskObject) (new global::tink.runloop._Task.Noop()) );
		}
		
		
		public static global::tink.runloop.TaskObject ofFunction(global::haxe.lang.Function f) {
			return new global::tink.runloop.FunctionTask(((global::haxe.lang.Function) (f) ));
		}
		
		
		public static global::tink.runloop.TaskObject repeat(global::haxe.lang.Function f) {
			return new global::tink.runloop.RepeatableFunctionTask(((global::haxe.lang.Function) (f) ));
		}
		
		
		public static global::tink.runloop.TaskObject NOOP;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.runloop {
	public class TaskRepeat : global::haxe.lang.Enum {
		
		protected TaskRepeat(int index) : base(index) {
		}
		
		
		public static readonly global::tink.runloop.TaskRepeat Continue = new global::tink.runloop.TaskRepeat_Continue();
		
		public static readonly global::tink.runloop.TaskRepeat Done = new global::tink.runloop.TaskRepeat_Done();
		
		protected static readonly string[] __hx_constructs = new string[]{"Continue", "Done"};
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.runloop {
	public sealed class TaskRepeat_Continue : global::tink.runloop.TaskRepeat {
		
		public TaskRepeat_Continue() : base(0) {
		}
		
		
		public override string getTag() {
			return "Continue";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.runloop {
	public sealed class TaskRepeat_Done : global::tink.runloop.TaskRepeat {
		
		public TaskRepeat_Done() : base(1) {
		}
		
		
		public override string getTag() {
			return "Done";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.runloop {
	public class TaskState : global::haxe.lang.Enum {
		
		protected TaskState(int index) : base(index) {
		}
		
		
		public static readonly global::tink.runloop.TaskState Pending = new global::tink.runloop.TaskState_Pending();
		
		public static readonly global::tink.runloop.TaskState Canceled = new global::tink.runloop.TaskState_Canceled();
		
		public static readonly global::tink.runloop.TaskState Busy = new global::tink.runloop.TaskState_Busy();
		
		public static readonly global::tink.runloop.TaskState Performed = new global::tink.runloop.TaskState_Performed();
		
		protected static readonly string[] __hx_constructs = new string[]{"Pending", "Canceled", "Busy", "Performed"};
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.runloop {
	public sealed class TaskState_Pending : global::tink.runloop.TaskState {
		
		public TaskState_Pending() : base(0) {
		}
		
		
		public override string getTag() {
			return "Pending";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.runloop {
	public sealed class TaskState_Canceled : global::tink.runloop.TaskState {
		
		public TaskState_Canceled() : base(1) {
		}
		
		
		public override string getTag() {
			return "Canceled";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.runloop {
	public sealed class TaskState_Busy : global::tink.runloop.TaskState {
		
		public TaskState_Busy() : base(2) {
		}
		
		
		public override string getTag() {
			return "Busy";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.runloop {
	public sealed class TaskState_Performed : global::tink.runloop.TaskState {
		
		public TaskState_Performed() : base(3) {
		}
		
		
		public override string getTag() {
			return "Performed";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.runloop {
	public class TaskBase : global::haxe.lang.HxObject, global::tink.runloop.TaskObject {
		
		public TaskBase(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TaskBase(global::haxe.lang.Null<bool> recurring) {
			global::tink.runloop.TaskBase.__hx_ctor_tink_runloop_TaskBase(this, recurring);
		}
		
		
		protected static void __hx_ctor_tink_runloop_TaskBase(global::tink.runloop.TaskBase __hx_this, global::haxe.lang.Null<bool> recurring) {
			global::haxe.lang.Null<bool> recurring1 = ( ( ! (recurring.hasValue) ) ? (new global::haxe.lang.Null<bool>(false, true)) : (recurring) );
			__hx_this.recurring = (recurring1).@value;
			__hx_this.state = global::tink.runloop.TaskState.Pending;
			bool this1 = false;
			bool this2 = ((bool) (this1) );
			__hx_this.m = ((bool) (this2) );
		}
		
		
		public bool m;
		
		public bool recurring;
		
		public bool get_recurring() {
			return this.recurring;
		}
		
		
		public global::tink.runloop.TaskState state;
		
		public global::tink.runloop.TaskState get_state() {
			return this.state;
		}
		
		
		public virtual void cancel() {
			global::tink.runloop.TaskBase _gthis = this;
			this.exec(new global::tink.runloop.TaskBase_cancel_79__Fun(_gthis));
		}
		
		
		public virtual void exec(global::haxe.lang.Function f) {
			if (( this.state == global::tink.runloop.TaskState.Pending )) {
				try {
					f.__hx_invoke0_o();
				}
				catch (global::System.Exception catchallException){
					global::haxe.lang.Exceptions.exception = catchallException;
					object e = ( (( catchallException is global::haxe.lang.HaxeException )) ? (((global::haxe.lang.HaxeException) (catchallException) ).obj) : ((object) (catchallException) ) );
					throw global::haxe.lang.HaxeException.wrap(e);
				}
				
				
			}
			
		}
		
		
		public virtual void perform() {
			global::tink.runloop.TaskBase _gthis = this;
			this.exec(new global::tink.runloop.TaskBase_perform_99__Fun(_gthis));
		}
		
		
		public virtual void doCleanup() {
		}
		
		
		public virtual void doCancel() {
		}
		
		
		public virtual void doPerform() {
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 67859985:
					{
						this.state = ((global::tink.runloop.TaskState) (@value) );
						return @value;
					}
					
					
					case 1280208349:
					{
						this.recurring = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					case 109:
					{
						this.m = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 2069598294:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "doPerform", 2069598294)) );
					}
					
					
					case 1280013157:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "doCancel", 1280013157)) );
					}
					
					
					case 733983705:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "doCleanup", 733983705)) );
					}
					
					
					case 2061363361:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "perform", 2061363361)) );
					}
					
					
					case 1126036369:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "exec", 1126036369)) );
					}
					
					
					case 942927226:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "cancel", 942927226)) );
					}
					
					
					case 1203032680:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_state", 1203032680)) );
					}
					
					
					case 67859985:
					{
						return ( (handleProperties) ? (this.get_state()) : (this.state) );
					}
					
					
					case 229786036:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_recurring", 229786036)) );
					}
					
					
					case 1280208349:
					{
						return ( (handleProperties) ? (this.get_recurring()) : (this.recurring) );
					}
					
					
					case 109:
					{
						return this.m;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 2069598294:
					{
						this.doPerform();
						break;
					}
					
					
					case 1280013157:
					{
						this.doCancel();
						break;
					}
					
					
					case 733983705:
					{
						this.doCleanup();
						break;
					}
					
					
					case 2061363361:
					{
						this.perform();
						break;
					}
					
					
					case 1126036369:
					{
						this.exec(((global::haxe.lang.Function) (dynargs[0]) ));
						break;
					}
					
					
					case 942927226:
					{
						this.cancel();
						break;
					}
					
					
					case 1203032680:
					{
						return this.get_state();
					}
					
					
					case 229786036:
					{
						return this.get_recurring();
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("state");
			baseArr.push("recurring");
			baseArr.push("m");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.runloop {
	public class TaskBase_cancel_79__Fun : global::haxe.lang.Function {
		
		public TaskBase_cancel_79__Fun(global::tink.runloop.TaskBase _gthis) : base(0, 0) {
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke0_o() {
			this._gthis.state = global::tink.runloop.TaskState.Canceled;
			this._gthis.doCancel();
			this._gthis.doCleanup();
			return null;
		}
		
		
		public global::tink.runloop.TaskBase _gthis;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.runloop {
	public class TaskBase_perform_99__Fun : global::haxe.lang.Function {
		
		public TaskBase_perform_99__Fun(global::tink.runloop.TaskBase _gthis) : base(0, 0) {
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke0_o() {
			this._gthis.state = global::tink.runloop.TaskState.Busy;
			this._gthis.doPerform();
			if (this._gthis.recurring) {
				this._gthis.state = global::tink.runloop.TaskState.Pending;
			}
			else {
				this._gthis.state = global::tink.runloop.TaskState.Performed;
				this._gthis.doCleanup();
			}
			
			return null;
		}
		
		
		public global::tink.runloop.TaskBase _gthis;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.runloop {
	public class FunctionTask : global::tink.runloop.TaskBase {
		
		public FunctionTask(global::haxe.lang.EmptyObject empty) : base(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) )) {
		}
		
		
		public FunctionTask(global::haxe.lang.Function f) : base(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) )) {
			global::tink.runloop.FunctionTask.__hx_ctor_tink_runloop_FunctionTask(this, f);
		}
		
		
		protected static void __hx_ctor_tink_runloop_FunctionTask(global::tink.runloop.FunctionTask __hx_this, global::haxe.lang.Function f) {
			global::tink.runloop.TaskBase.__hx_ctor_tink_runloop_TaskBase(__hx_this, default(global::haxe.lang.Null<bool>));
			__hx_this.f = f;
		}
		
		
		public global::haxe.lang.Function f;
		
		public override void doCleanup() {
			this.f = null;
		}
		
		
		public override void doPerform() {
			this.f.__hx_invoke0_o();
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 102:
					{
						this.f = ((global::haxe.lang.Function) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 2069598294:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "doPerform", 2069598294)) );
					}
					
					
					case 733983705:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "doCleanup", 733983705)) );
					}
					
					
					case 102:
					{
						return this.f;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("f");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.runloop {
	public class RepeatableFunctionTask : global::tink.runloop.TaskBase {
		
		public RepeatableFunctionTask(global::haxe.lang.EmptyObject empty) : base(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) )) {
		}
		
		
		public RepeatableFunctionTask(global::haxe.lang.Function f) : base(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) )) {
			global::tink.runloop.RepeatableFunctionTask.__hx_ctor_tink_runloop_RepeatableFunctionTask(this, f);
		}
		
		
		protected static void __hx_ctor_tink_runloop_RepeatableFunctionTask(global::tink.runloop.RepeatableFunctionTask __hx_this, global::haxe.lang.Function f) {
			global::tink.runloop.TaskBase.__hx_ctor_tink_runloop_TaskBase(__hx_this, default(global::haxe.lang.Null<bool>));
			__hx_this.f = f;
		}
		
		
		public global::haxe.lang.Function f;
		
		public override void doCleanup() {
			this.f = null;
		}
		
		
		public override void doPerform() {
			this.recurring = ( ((global::tink.runloop.TaskRepeat) (this.f.__hx_invoke0_o()) ) == global::tink.runloop.TaskRepeat.Continue );
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 102:
					{
						this.f = ((global::haxe.lang.Function) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 2069598294:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "doPerform", 2069598294)) );
					}
					
					
					case 733983705:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "doCleanup", 733983705)) );
					}
					
					
					case 102:
					{
						return this.f;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("f");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


