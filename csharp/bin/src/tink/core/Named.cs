// Generated by Haxe 4.0.0-rc.2+77068e10c

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core {
	public class NamedWith<N, V> : global::haxe.lang.HxObject, global::tink.core.NamedWith {
		
		public NamedWith(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public NamedWith(N name, V @value) {
			global::tink.core.NamedWith<object, object>.__hx_ctor_tink_core_NamedWith<N, V>(((global::tink.core.NamedWith<N, V>) (this) ), global::haxe.lang.Runtime.genericCast<N>(name), global::haxe.lang.Runtime.genericCast<V>(@value));
		}
		
		
		protected static void __hx_ctor_tink_core_NamedWith<N_c, V_c>(global::tink.core.NamedWith<N_c, V_c> __hx_this, N_c name, V_c @value) {
			__hx_this.name = name;
			__hx_this.@value = @value;
		}
		
		
		public static object __hx_cast<N_c_c, V_c_c>(global::tink.core.NamedWith me) {
			return ( (( me != null )) ? (me.tink_core_NamedWith_cast<N_c_c, V_c_c>()) : default(object) );
		}
		
		
		public virtual object tink_core_NamedWith_cast<N_c, V_c>() {
			if (( global::haxe.lang.Runtime.eq(typeof(N), typeof(N_c)) && global::haxe.lang.Runtime.eq(typeof(V), typeof(V_c)) )) {
				return this;
			}
			
			global::tink.core.NamedWith<N_c, V_c> new_me = new global::tink.core.NamedWith<N_c, V_c>(global::haxe.lang.EmptyObject.EMPTY);
			global::Array<object> fields = global::Reflect.fields(this);
			int i = 0;
			while (( i < fields.length )) {
				string field = global::haxe.lang.Runtime.toString(fields[i++]);
				global::Reflect.setField(new_me, field, global::Reflect.field(this, field));
			}
			
			return new_me;
		}
		
		
		public N name;
		
		public V @value;
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 834174833:
					{
						this.@value = global::haxe.lang.Runtime.genericCast<V>(((object) (@value) ));
						return ((double) (global::haxe.lang.Runtime.toDouble(((object) (@value) ))) );
					}
					
					
					case 1224700491:
					{
						this.name = global::haxe.lang.Runtime.genericCast<N>(((object) (@value) ));
						return ((double) (global::haxe.lang.Runtime.toDouble(((object) (@value) ))) );
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 834174833:
					{
						this.@value = global::haxe.lang.Runtime.genericCast<V>(@value);
						return @value;
					}
					
					
					case 1224700491:
					{
						this.name = global::haxe.lang.Runtime.genericCast<N>(@value);
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 834174833:
					{
						return this.@value;
					}
					
					
					case 1224700491:
					{
						return this.name;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 834174833:
					{
						return ((double) (global::haxe.lang.Runtime.toDouble(((object) (this.@value) ))) );
					}
					
					
					case 1224700491:
					{
						return ((double) (global::haxe.lang.Runtime.toDouble(((object) (this.name) ))) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("value");
			baseArr.push("name");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core {
	[global::haxe.lang.GenericInterface(typeof(global::tink.core.NamedWith<object, object>))]
	public interface NamedWith : global::haxe.lang.IHxObject, global::haxe.lang.IGenericObject {
		
		object tink_core_NamedWith_cast<N_c, V_c>();
		
	}
}


