// Generated by Haxe 4.0.0-rc.2+77068e10c

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Pair {
	public sealed class Pair_Impl_ {
		
		
		
		
		
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
		public static global::tink.core.MPair<A, B> _new<A, B>(A a, B b) {
			global::tink.core.MPair<A, B> this1 = new global::tink.core.MPair<A, B>(a, b);
			return ((global::tink.core.MPair<A, B>) (this1) );
		}
		
		
		public static A get_a<A, B>(global::tink.core.MPair<A, B> this1) {
			return this1.a;
		}
		
		
		public static B get_b<A, B>(global::tink.core.MPair<A, B> this1) {
			return this1.b;
		}
		
		
		public static bool toBool<A, B>(global::tink.core.MPair<A, B> this1) {
			return ( this1 != null );
		}
		
		
		public static bool isNil<A, B>(global::tink.core.MPair<A, B> this1) {
			return ( this1 == null );
		}
		
		
		public static global::tink.core.MPair<A, B> nil<A, B>() {
			return null;
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core {
	public class MPair<A, B> : global::haxe.lang.HxObject, global::tink.core.MPair {
		
		public MPair(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public MPair(A a, B b) {
			global::tink.core.MPair<object, object>.__hx_ctor_tink_core_MPair<A, B>(((global::tink.core.MPair<A, B>) (this) ), global::haxe.lang.Runtime.genericCast<A>(a), global::haxe.lang.Runtime.genericCast<B>(b));
		}
		
		
		protected static void __hx_ctor_tink_core_MPair<A_c, B_c>(global::tink.core.MPair<A_c, B_c> __hx_this, A_c a, B_c b) {
			__hx_this.a = a;
			__hx_this.b = b;
		}
		
		
		public static object __hx_cast<A_c_c, B_c_c>(global::tink.core.MPair me) {
			return ( (( me != null )) ? (me.tink_core_MPair_cast<A_c_c, B_c_c>()) : default(object) );
		}
		
		
		public virtual object tink_core_MPair_cast<A_c, B_c>() {
			if (( global::haxe.lang.Runtime.eq(typeof(A), typeof(A_c)) && global::haxe.lang.Runtime.eq(typeof(B), typeof(B_c)) )) {
				return this;
			}
			
			global::tink.core.MPair<A_c, B_c> new_me = new global::tink.core.MPair<A_c, B_c>(global::haxe.lang.EmptyObject.EMPTY);
			global::Array<object> fields = global::Reflect.fields(this);
			int i = 0;
			while (( i < fields.length )) {
				string field = global::haxe.lang.Runtime.toString(fields[i++]);
				global::Reflect.setField(new_me, field, global::Reflect.field(this, field));
			}
			
			return new_me;
		}
		
		
		public A a;
		
		public B b;
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 98:
					{
						this.b = global::haxe.lang.Runtime.genericCast<B>(((object) (@value) ));
						return ((double) (global::haxe.lang.Runtime.toDouble(((object) (@value) ))) );
					}
					
					
					case 97:
					{
						this.a = global::haxe.lang.Runtime.genericCast<A>(((object) (@value) ));
						return ((double) (global::haxe.lang.Runtime.toDouble(((object) (@value) ))) );
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 98:
					{
						this.b = global::haxe.lang.Runtime.genericCast<B>(@value);
						return @value;
					}
					
					
					case 97:
					{
						this.a = global::haxe.lang.Runtime.genericCast<A>(@value);
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 98:
					{
						return this.b;
					}
					
					
					case 97:
					{
						return this.a;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 98:
					{
						return ((double) (global::haxe.lang.Runtime.toDouble(((object) (this.b) ))) );
					}
					
					
					case 97:
					{
						return ((double) (global::haxe.lang.Runtime.toDouble(((object) (this.a) ))) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("b");
			baseArr.push("a");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core {
	[global::haxe.lang.GenericInterface(typeof(global::tink.core.MPair<object, object>))]
	public interface MPair : global::haxe.lang.IHxObject, global::haxe.lang.IGenericObject {
		
		object tink_core_MPair_cast<A_c, B_c>();
		
	}
}


