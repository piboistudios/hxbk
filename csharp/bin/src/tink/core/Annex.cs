// Generated by Haxe 4.0.0-rc.2+77068e10c

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core {
	public class Annex<Target> : global::haxe.lang.HxObject, global::tink.core.Annex {
		
		public Annex(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Annex(Target target) {
			global::tink.core.Annex<object>.__hx_ctor_tink_core_Annex<Target>(((global::tink.core.Annex<Target>) (this) ), global::haxe.lang.Runtime.genericCast<Target>(target));
		}
		
		
		protected static void __hx_ctor_tink_core_Annex<Target_c>(global::tink.core.Annex<Target_c> __hx_this, Target_c target) {
			__hx_this.target = target;
			__hx_this.registry = ((global::haxe.IMap) (((object) (new global::haxe.ds.ObjectMap<object, object>()) )) );
		}
		
		
		public static object __hx_cast<Target_c_c>(global::tink.core.Annex me) {
			return ( (( me != null )) ? (me.tink_core_Annex_cast<Target_c_c>()) : default(object) );
		}
		
		
		public virtual object tink_core_Annex_cast<Target_c>() {
			if (global::haxe.lang.Runtime.eq(typeof(Target), typeof(Target_c))) {
				return this;
			}
			
			global::tink.core.Annex<Target_c> new_me = new global::tink.core.Annex<Target_c>(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
			global::Array<object> fields = global::Reflect.fields(this);
			int i = 0;
			while (( i < fields.length )) {
				string field = global::haxe.lang.Runtime.toString(fields[i++]);
				global::Reflect.setField(new_me, field, global::Reflect.field(this, field));
			}
			
			return new_me;
		}
		
		
		public Target target;
		
		public global::haxe.IMap registry;
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 116192081:
					{
						this.target = global::haxe.lang.Runtime.genericCast<Target>(((object) (@value) ));
						return ((double) (global::haxe.lang.Runtime.toDouble(((object) (@value) ))) );
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1352643005:
					{
						this.registry = ((global::haxe.IMap) (@value) );
						return @value;
					}
					
					
					case 116192081:
					{
						this.target = global::haxe.lang.Runtime.genericCast<Target>(@value);
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1352643005:
					{
						return this.registry;
					}
					
					
					case 116192081:
					{
						return this.target;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 116192081:
					{
						return ((double) (global::haxe.lang.Runtime.toDouble(((object) (this.target) ))) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("registry");
			baseArr.push("target");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core {
	[global::haxe.lang.GenericInterface(typeof(global::tink.core.Annex<object>))]
	public interface Annex : global::haxe.lang.IHxObject, global::haxe.lang.IGenericObject {
		
		object tink_core_Annex_cast<Target_c>();
		
	}
}


