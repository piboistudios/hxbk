// Generated by Haxe 4.0.0-rc.2+77068e10c

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core {
	public class OptionTools : global::haxe.lang.HxObject {
		
		public OptionTools(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public OptionTools() {
			global::tink.core.OptionTools.__hx_ctor_tink_core_OptionTools(this);
		}
		
		
		protected static void __hx_ctor_tink_core_OptionTools(global::tink.core.OptionTools __hx_this) {
		}
		
		
		public static T force<T>(global::haxe.ds.Option o, object pos) {
			unchecked {
				if (( o._hx_index == 0 )) {
					T v = global::haxe.lang.Runtime.genericCast<T>(( o as global::haxe.ds.Option_Some ).v);
					return v;
				}
				else {
					throw global::haxe.lang.HaxeException.wrap(new global::tink.core.TypedError<object>(new global::haxe.lang.Null<int>(((int) (404) ), true), "Some value expected but none found", pos));
				}
				
			}
		}
		
		
		public static T or<T>(global::haxe.ds.Option o, global::tink.core._Lazy.LazyObject<T> l) {
			if (( o._hx_index == 0 )) {
				T v = global::haxe.lang.Runtime.genericCast<T>(( o as global::haxe.ds.Option_Some ).v);
				return v;
			}
			else {
				return global::haxe.lang.Runtime.genericCast<T>(((global::tink.core._Lazy.LazyObject<T>) (l) ).@get());
			}
			
		}
		
		
		public static global::haxe.lang.Null<T> orNull<T>(global::haxe.ds.Option o) {
			if (( o._hx_index == 0 )) {
				T v = global::haxe.lang.Runtime.genericCast<T>(( o as global::haxe.ds.Option_Some ).v);
				return new global::haxe.lang.Null<T>(v, true);
			}
			else {
				return default(global::haxe.lang.Null<T>);
			}
			
		}
		
		
		public static global::haxe.ds.Option filter<T>(global::haxe.ds.Option o, global::haxe.lang.Function f) {
			if (( o._hx_index == 0 )) {
				if (( global::haxe.lang.Runtime.toBool(f.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.genericCast<T>(( o as global::haxe.ds.Option_Some ).v))) == false )) {
					return global::haxe.ds.Option.None;
				}
				else {
					return o;
				}
				
			}
			else {
				return o;
			}
			
		}
		
		
		public static bool satisfies<T>(global::haxe.ds.Option o, global::haxe.lang.Function f) {
			if (( o._hx_index == 0 )) {
				T v = global::haxe.lang.Runtime.genericCast<T>(( o as global::haxe.ds.Option_Some ).v);
				return global::haxe.lang.Runtime.toBool(f.__hx_invoke1_o(default(double), v));
			}
			else {
				return false;
			}
			
		}
		
		
		public static bool @equals<T>(global::haxe.ds.Option o, T v) {
			if (( o._hx_index == 0 )) {
				T v1 = global::haxe.lang.Runtime.genericCast<T>(( o as global::haxe.ds.Option_Some ).v);
				return global::haxe.lang.Runtime.eq(v1, v);
			}
			else {
				return false;
			}
			
		}
		
		
		public static global::haxe.ds.Option map<In, Out>(global::haxe.ds.Option o, global::haxe.lang.Function f) {
			if (( o._hx_index == 0 )) {
				In v = global::haxe.lang.Runtime.genericCast<In>(( o as global::haxe.ds.Option_Some ).v);
				return global::haxe.ds.Option.Some(global::haxe.lang.Runtime.genericCast<Out>(f.__hx_invoke1_o(default(double), v)));
			}
			else {
				return global::haxe.ds.Option.None;
			}
			
		}
		
		
		public static global::haxe.ds.Option flatMap<In, Out>(global::haxe.ds.Option o, global::haxe.lang.Function f) {
			if (( o._hx_index == 0 )) {
				In v = global::haxe.lang.Runtime.genericCast<In>(( o as global::haxe.ds.Option_Some ).v);
				return ((global::haxe.ds.Option) (f.__hx_invoke1_o(default(double), v)) );
			}
			else {
				return global::haxe.ds.Option.None;
			}
			
		}
		
		
		public static global::tink.core.OptionIter<T> iterator<T>(global::haxe.ds.Option o) {
			return new global::tink.core.OptionIter<T>(((global::haxe.ds.Option) (o) ));
		}
		
		
		public static global::Array<T> toArray<T>(global::haxe.ds.Option o) {
			if (( o._hx_index == 0 )) {
				T v = global::haxe.lang.Runtime.genericCast<T>(( o as global::haxe.ds.Option_Some ).v);
				return new global::Array<T>(new T[]{v});
			}
			else {
				return new global::Array<T>(new T[]{});
			}
			
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core {
	public class OptionIter<T> : global::haxe.lang.HxObject, global::tink.core.OptionIter {
		
		public OptionIter(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public OptionIter(global::haxe.ds.Option o) {
			global::tink.core.OptionIter<object>.__hx_ctor_tink_core_OptionIter<T>(((global::tink.core.OptionIter<T>) (this) ), ((global::haxe.ds.Option) (o) ));
		}
		
		
		protected static void __hx_ctor_tink_core_OptionIter<T_c>(global::tink.core.OptionIter<T_c> __hx_this, global::haxe.ds.Option o) {
			__hx_this.alive = true;
			{
				if (( o._hx_index == 0 )) {
					T_c v = global::haxe.lang.Runtime.genericCast<T_c>(( o as global::haxe.ds.Option_Some ).v);
					__hx_this.@value = v;
				}
				else {
					__hx_this.alive = false;
				}
				
			}
			
		}
		
		
		public static object __hx_cast<T_c_c>(global::tink.core.OptionIter me) {
			return ( (( me != null )) ? (me.tink_core_OptionIter_cast<T_c_c>()) : default(object) );
		}
		
		
		public virtual object tink_core_OptionIter_cast<T_c>() {
			if (global::haxe.lang.Runtime.eq(typeof(T), typeof(T_c))) {
				return this;
			}
			
			global::tink.core.OptionIter<T_c> new_me = new global::tink.core.OptionIter<T_c>(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
			global::Array<object> fields = global::Reflect.fields(this);
			int i = 0;
			while (( i < fields.length )) {
				string field = global::haxe.lang.Runtime.toString(fields[i++]);
				global::Reflect.setField(new_me, field, global::Reflect.field(this, field));
			}
			
			return new_me;
		}
		
		
		public T @value;
		
		public bool alive;
		
		public bool hasNext() {
			return this.alive;
		}
		
		
		public T next() {
			this.alive = false;
			return this.@value;
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 834174833:
					{
						this.@value = global::haxe.lang.Runtime.genericCast<T>(((object) (@value) ));
						return ((double) (global::haxe.lang.Runtime.toDouble(((object) (@value) ))) );
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 563176397:
					{
						this.alive = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					case 834174833:
					{
						this.@value = global::haxe.lang.Runtime.genericCast<T>(@value);
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1224901875:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "next", 1224901875)) );
					}
					
					
					case 407283053:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "hasNext", 407283053)) );
					}
					
					
					case 563176397:
					{
						return this.alive;
					}
					
					
					case 834174833:
					{
						return this.@value;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 834174833:
					{
						return ((double) (global::haxe.lang.Runtime.toDouble(((object) (this.@value) ))) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 1224901875:
					{
						return this.next();
					}
					
					
					case 407283053:
					{
						return this.hasNext();
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("alive");
			baseArr.push("value");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core {
	[global::haxe.lang.GenericInterface(typeof(global::tink.core.OptionIter<object>))]
	public interface OptionIter : global::haxe.lang.IHxObject, global::haxe.lang.IGenericObject {
		
		object tink_core_OptionIter_cast<T_c>();
		
		bool hasNext();
		
	}
}


