// Generated by Haxe 4.0.0-rc.2+77068e10c

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public sealed class Promise_Impl_ {
		
		static Promise_Impl_() {
			global::tink.core._Promise.Promise_Impl_.NULL = ((global::tink.core._Future.FutureObject<object>) (new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (global::tink.core.Outcome.Success(null)) ))) ))) );
			global::tink.core._Promise.Promise_Impl_.NOISE = ((global::tink.core._Future.FutureObject<object>) (new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (global::tink.core.Outcome.Success(global::tink.core.TinkNoise.Noise)) ))) ))) );
			object __temp_stmt2 = null;
			{
				global::tink.core._Future.FutureObject<object> ret = ((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (global::haxe.lang.Runtime.callField(((global::tink.core._Future.FutureObject) (global::tink.core._Future.Future_Impl_.NEVER) ), "map", 5442204, new object[]{((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::tink.core.Outcome), "Success", 94326179)) )})) ))) );
				__temp_stmt2 = ret.gather();
			}
			
			object __temp_stmt1 = global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (__temp_stmt2) ));
			global::tink.core._Promise.Promise_Impl_.NEVER = ((global::tink.core._Future.FutureObject<object>) (__temp_stmt1) );
		}
		
		
		public static global::tink.core._Future.FutureObject<object> NULL;
		
		public static global::tink.core._Future.FutureObject<object> NOISE;
		
		public static global::tink.core._Future.FutureObject<object> NEVER;
		
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
		public static global::tink.core._Future.FutureObject<object> _new<T>(global::haxe.lang.Function f, global::haxe.lang.Null<bool> lazy) {
			bool lazy1 = ( ( ! (lazy.hasValue) ) ? (false) : ((lazy).@value) );
			global::tink.core._Future.FutureObject<object> this1 = global::tink.core._Future.Future_Impl_.async<object>(((global::haxe.lang.Function) (new global::tink.core._Promise.Promise_Impl___new_12__Fun<T>(f)) ), new global::haxe.lang.Null<bool>(lazy1, true));
			return ((global::tink.core._Future.FutureObject<object>) (this1) );
		}
		
		
		public static global::tink.core._Future.FutureObject<object> eager<T>(global::tink.core._Future.FutureObject<object> this1) {
			return this1.eager();
		}
		
		
		public static global::tink.core._Future.FutureObject<R> map<R, T>(global::tink.core._Future.FutureObject<object> this1, global::haxe.lang.Function f) {
			global::tink.core._Future.FutureObject<R> ret = ((global::tink.core._Future.FutureObject<object>) (this1) ).map<R>(((global::haxe.lang.Function) (f) ));
			return ret.gather();
		}
		
		
		public static global::tink.core._Future.FutureObject<R> flatMap<R, T>(global::tink.core._Future.FutureObject<object> this1, global::haxe.lang.Function f) {
			global::tink.core._Future.FutureObject<R> ret = ((global::tink.core._Future.FutureObject<object>) (this1) ).flatMap<R>(((global::haxe.lang.Function) (f) ));
			return ret.gather();
		}
		
		
		public static global::tink.core._Future.FutureObject<object> tryRecover<T>(global::tink.core._Future.FutureObject<object> this1, global::haxe.lang.Function f) {
			global::tink.core._Future.FutureObject<object> ret = ((global::tink.core._Future.FutureObject<object>) (this1) ).flatMap<object>(((global::haxe.lang.Function) (new global::tink.core._Promise.Promise_Impl__tryRecover_27__Fun<T>(f)) ));
			return ret.gather();
		}
		
		
		public static global::tink.core._Future.FutureObject<T> recover<T>(global::tink.core._Future.FutureObject<object> this1, global::haxe.lang.Function f) {
			global::tink.core._Future.FutureObject<T> ret = ((global::tink.core._Future.FutureObject<object>) (this1) ).flatMap<T>(((global::haxe.lang.Function) (new global::tink.core._Promise.Promise_Impl__recover_33__Fun<T>(f)) ));
			return ret.gather();
		}
		
		
		public static global::tink.core._Future.FutureObject<object> mapError<T>(global::tink.core._Future.FutureObject<object> this1, global::haxe.lang.Function f) {
			global::tink.core._Future.FutureObject<object> ret = ((global::tink.core._Future.FutureObject<object>) (this1) ).map<object>(((global::haxe.lang.Function) (new global::tink.core._Promise.Promise_Impl__mapError_39__Fun<T>(f)) ));
			return ret.gather();
		}
		
		
		public static global::tink.core._Callback.LinkObject handle<T>(global::tink.core._Future.FutureObject<object> this1, global::haxe.lang.Function cb) {
			return this1.handle(cb);
		}
		
		
		public static global::tink.core._Future.FutureObject<object> noise<T>(global::tink.core._Future.FutureObject<object> this1) {
			return global::tink.core._Promise.Promise_Impl_.next<object, T>(((global::tink.core._Future.FutureObject<object>) (this1) ), ((global::haxe.lang.Function) (new global::tink.core._Promise.Promise_Impl__noise_48__Fun<T>()) ), default(global::haxe.lang.Null<bool>));
		}
		
		
		public static global::tink.core._Future.FutureObject<bool> isSuccess<T>(global::tink.core._Future.FutureObject<object> this1) {
			global::tink.core._Future.FutureObject<bool> ret = ((global::tink.core._Future.FutureObject<object>) (this1) ).map<bool>(((global::haxe.lang.Function) (new global::tink.core._Promise.Promise_Impl__isSuccess_51__Fun<T>()) ));
			return ret.gather();
		}
		
		
		public static global::tink.core._Future.FutureObject<object> next<R, T>(global::tink.core._Future.FutureObject<object> this1, global::haxe.lang.Function f, global::haxe.lang.Null<bool> gather) {
			global::haxe.lang.Null<bool> gather1 = ( ( ! (gather.hasValue) ) ? (new global::haxe.lang.Null<bool>(true, true)) : (gather) );
			global::tink.core._Future.FutureObject<object> ret = ((global::tink.core._Future.FutureObject<object>) (this1) ).flatMap<object>(((global::haxe.lang.Function) (new global::tink.core._Promise.Promise_Impl__next_54__Fun<R, T>(f)) ));
			if (((gather1)).@value) {
				return ret.gather();
			}
			else {
				return ret;
			}
			
		}
		
		
		public static global::tink.core._Future.FutureObject<object> swap<R, T>(global::tink.core._Future.FutureObject<object> this1, R v) {
			return global::tink.core._Future.Future_Impl_._tryMap<object, object, object>(((global::tink.core._Future.FutureObject<object>) (this1) ), ((global::haxe.lang.Function) (new global::tink.core._Promise.Promise_Impl__swap_60__Fun<R, T>(v)) ));
		}
		
		
		public static global::tink.core._Future.FutureObject<object> swapError<T>(global::tink.core._Future.FutureObject<object> this1, global::tink.core.TypedError e) {
			return global::tink.core._Promise.Promise_Impl_.mapError<T>(((global::tink.core._Future.FutureObject<object>) (this1) ), ((global::haxe.lang.Function) (new global::tink.core._Promise.Promise_Impl__swapError_63__Fun(e)) ));
		}
		
		
		public static global::tink.core._Future.FutureObject<object> merge<A, R, T>(global::tink.core._Future.FutureObject<object> this1, global::tink.core._Future.FutureObject<object> other, global::haxe.lang.Function merger, global::haxe.lang.Null<bool> gather) {
			global::haxe.lang.Null<bool> gather1 = ( ( ! (gather.hasValue) ) ? (new global::haxe.lang.Null<bool>(true, true)) : (gather) );
			return global::tink.core._Promise.Promise_Impl_.next<object, T>(((global::tink.core._Future.FutureObject<object>) (this1) ), ((global::haxe.lang.Function) (new global::tink.core._Promise.Promise_Impl__merge_66__Fun<A, R, T>(other, merger)) ), ((global::haxe.lang.Null<bool>) (gather1) ));
		}
		
		
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
		public static global::tink.core._Future.FutureObject<object> and<A, B>(global::tink.core._Future.FutureObject<object> a, global::tink.core._Future.FutureObject<object> b) {
			return global::tink.core._Promise.Promise_Impl_.merge<object, object, A>(((global::tink.core._Future.FutureObject<object>) (a) ), ((global::tink.core._Future.FutureObject<object>) (b) ), ((global::haxe.lang.Function) (new global::tink.core._Promise.Promise_Impl__and_69__Fun<B, A>()) ), default(global::haxe.lang.Null<bool>));
		}
		
		
		public static global::tink.core._Future.FutureObject<object> iterate<A, R>(object promises, global::haxe.lang.Function @yield, global::tink.core._Future.FutureObject<object> @finally, global::haxe.lang.Null<bool> lazy) {
			return global::tink.core._Future.Future_Impl_.async<object>(((global::haxe.lang.Function) (new global::tink.core._Promise.Promise_Impl__iterate_90__Fun<A, R>(@yield, promises, @finally)) ), ((global::haxe.lang.Null<bool>) (lazy) ));
		}
		
		
		public static global::tink.core._Future.FutureObject<object> retry<T>(global::haxe.lang.Function gen, global::haxe.lang.Function next) {
			unchecked {
				global::haxe.lang.Function stamp = ( (( global::tink.core._Promise.Promise_Impl__retry_150__Fun.__hx_current != null )) ? (global::tink.core._Promise.Promise_Impl__retry_150__Fun.__hx_current) : (global::tink.core._Promise.Promise_Impl__retry_150__Fun.__hx_current = ((global::tink.core._Promise.Promise_Impl__retry_150__Fun) (new global::tink.core._Promise.Promise_Impl__retry_150__Fun()) )) );
				double start = ((double) (stamp.__hx_invoke0_f()) );
				global::haxe.lang.Function[] attempt = new global::haxe.lang.Function[]{null};
				attempt[0] = new global::tink.core._Promise.Promise_Impl__retry_152__Fun<T>(start, stamp, next, gen, attempt);
				return ((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (attempt[0].__hx_invoke1_o(((double) (1) ), global::haxe.lang.Runtime.undefined)) ))) );
			}
		}
		
		
		public static global::tink.core._Future.FutureObject<object> ofSpecific<T, E>(global::tink.core._Future.FutureObject<object> s) {
			return ((global::tink.core._Future.FutureObject<object>) (s) );
		}
		
		
		public static global::tink.core._Future.FutureObject<object> ofFuture<T>(global::tink.core._Future.FutureObject<T> f) {
			global::tink.core._Future.FutureObject<object> ret = ((global::tink.core._Future.FutureObject<T>) (f) ).map<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::tink.core.Outcome), "Success", 94326179)) ));
			return ret.gather();
		}
		
		
		public static global::tink.core._Future.FutureObject<object> ofOutcome<T>(global::tink.core.Outcome o) {
			return ((global::tink.core._Future.FutureObject<object>) (new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (o) ))) ))) );
		}
		
		
		public static global::tink.core._Future.FutureObject<object> ofError<T>(global::tink.core.TypedError e) {
			return ((global::tink.core._Future.FutureObject<object>) (new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (global::tink.core.Outcome.Failure(e)) ))) ))) );
		}
		
		
		public static global::tink.core._Future.FutureObject<object> ofData<T>(T d) {
			return ((global::tink.core._Future.FutureObject<object>) (new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (global::tink.core.Outcome.Success(d)) ))) ))) );
		}
		
		
		public static global::tink.core._Future.FutureObject<object> lazy<T>(global::tink.core._Lazy.LazyObject<object> p) {
			return global::tink.core._Future.Future_Impl_.async<object>(((global::haxe.lang.Function) (new global::tink.core._Promise.Promise_Impl__lazy_184__Fun<T>(p)) ), new global::haxe.lang.Null<bool>(true, true));
		}
		
		
		public static global::tink.core._Future.FutureObject<object> inParallel<T>(global::Array<object> a, global::haxe.lang.Null<int> concurrency, global::haxe.lang.Null<bool> lazy) {
			global::haxe.lang.Null<int>[] concurrency1 = new global::haxe.lang.Null<int>[]{concurrency};
			if (( a.length == 0 )) {
				return new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (global::tink.core.Outcome.Success(new global::Array<T>(new T[]{}))) ))) ));
			}
			else {
				return global::tink.core._Future.Future_Impl_.async<object>(((global::haxe.lang.Function) (new global::tink.core._Promise.Promise_Impl__inParallel_189__Fun<T>(concurrency1, a)) ), ((global::haxe.lang.Null<bool>) (lazy) ));
			}
			
		}
		
		
		public static global::tink.core._Future.FutureObject<object> inSequence<T>(global::Array<object> a) {
			global::haxe.lang.Function[] loop = new global::haxe.lang.Function[]{null};
			loop[0] = new global::tink.core._Promise.Promise_Impl__inSequence_242__Fun<T>(loop, a);
			return ((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (loop[0].__hx_invoke1_o(((double) (0) ), global::haxe.lang.Runtime.undefined)) ))) );
		}
		
		
		public static global::haxe.lang.Function cache<T>(global::haxe.lang.Function gen) {
			global::tink.core._Future.FutureObject<object>[] p = new global::tink.core._Future.FutureObject<object>[]{null};
			return new global::tink.core._Promise.Promise_Impl__cache_259__Fun<T>(p, gen);
		}
		
		
		public static global::tink.core._Future.FutureObject<object> lift<T>(global::tink.core._Future.FutureObject<object> p) {
			return p;
		}
		
		
		public static global::tink.core.FutureTrigger<object> trigger<A>() {
			global::tink.core.FutureTrigger<object> this1 = new global::tink.core.FutureTrigger<object>();
			return ((global::tink.core.FutureTrigger<object>) (this1) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl___new_13__Fun_0<T> : global::haxe.lang.Function {
		
		public Promise_Impl___new_13__Fun_0(global::haxe.lang.Function cb) : base(1, 0) {
			this.cb = cb;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			T v = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<T>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<T>(__fn_dyn1)) );
			this.cb.__hx_invoke1_o(default(double), global::tink.core.Outcome.Success(v));
			return null;
		}
		
		
		public global::haxe.lang.Function cb;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl___new_13__Fun<T> : global::haxe.lang.Function {
		
		public Promise_Impl___new_13__Fun(global::haxe.lang.Function cb) : base(1, 0) {
			this.cb = cb;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::tink.core.TypedError e = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.TypedError) (((object) (__fn_float1) )) )) : (((global::tink.core.TypedError) (__fn_dyn1) )) );
			this.cb.__hx_invoke1_o(default(double), global::tink.core.Outcome.Failure(e));
			return null;
		}
		
		
		public global::haxe.lang.Function cb;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl___new_12__Fun<T> : global::haxe.lang.Function {
		
		public Promise_Impl___new_12__Fun(global::haxe.lang.Function f) : base(1, 0) {
			this.f = f;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::haxe.lang.Function cb = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (((global::haxe.lang.Function) (__fn_dyn1) )) );
			this.f.__hx_invoke2_o(default(double), new global::tink.core._Promise.Promise_Impl___new_13__Fun_0<T>(cb), default(double), new global::tink.core._Promise.Promise_Impl___new_13__Fun<T>(cb));
			return null;
		}
		
		
		public global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl__tryRecover_27__Fun<T> : global::haxe.lang.Function {
		
		public Promise_Impl__tryRecover_27__Fun(global::haxe.lang.Function f) : base(1, 0) {
			this.f = f;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::tink.core.Outcome o = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.Outcome) (((object) (__fn_float1) )) )) : (((global::tink.core.Outcome) (__fn_dyn1) )) );
				switch (o._hx_index) {
					case 0:
					{
						T d = global::haxe.lang.Runtime.genericCast<T>(( o as global::tink.core.Outcome_Success ).data);
						return ((global::tink.core._Future.FutureObject<object>) (new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (o) ))) ))) );
					}
					
					
					case 1:
					{
						global::tink.core.TypedError e = ((global::tink.core.TypedError) (( o as global::tink.core.Outcome_Failure ).failure) );
						return ((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (this.f.__hx_invoke1_o(default(double), e)) ))) );
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl__recover_33__Fun<T> : global::haxe.lang.Function {
		
		public Promise_Impl__recover_33__Fun(global::haxe.lang.Function f) : base(1, 0) {
			this.f = f;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::tink.core.Outcome o = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.Outcome) (((object) (__fn_float1) )) )) : (((global::tink.core.Outcome) (__fn_dyn1) )) );
				switch (o._hx_index) {
					case 0:
					{
						T d = global::haxe.lang.Runtime.genericCast<T>(( o as global::tink.core.Outcome_Success ).data);
						return ((global::tink.core._Future.FutureObject<T>) (new global::tink.core._Future.SyncFuture<T>(((global::tink.core._Lazy.LazyObject<T>) (new global::tink.core._Lazy.LazyConst<T>(global::haxe.lang.Runtime.genericCast<T>(d))) ))) );
					}
					
					
					case 1:
					{
						global::tink.core.TypedError e = ((global::tink.core.TypedError) (( o as global::tink.core.Outcome_Failure ).failure) );
						return ((global::tink.core._Future.FutureObject<T>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<T>(((global::tink.core._Future.FutureObject) (this.f.__hx_invoke1_o(default(double), e)) ))) );
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl__mapError_39__Fun<T> : global::haxe.lang.Function {
		
		public Promise_Impl__mapError_39__Fun(global::haxe.lang.Function f) : base(1, 0) {
			this.f = f;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::tink.core.Outcome o = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.Outcome) (((object) (__fn_float1) )) )) : (((global::tink.core.Outcome) (__fn_dyn1) )) );
				switch (o._hx_index) {
					case 0:
					{
						return o;
					}
					
					
					case 1:
					{
						global::tink.core.TypedError e = ((global::tink.core.TypedError) (( o as global::tink.core.Outcome_Failure ).failure) );
						return global::tink.core.Outcome.Failure(((global::tink.core.TypedError) (this.f.__hx_invoke1_o(default(double), e)) ));
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl__noise_48__Fun<T> : global::haxe.lang.Function {
		
		public Promise_Impl__noise_48__Fun() : base(1, 0) {
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			T v = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<T>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<T>(__fn_dyn1)) );
			return ((global::tink.core._Future.FutureObject<object>) (new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (global::tink.core.Outcome.Success(global::tink.core.TinkNoise.Noise)) ))) ))) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl__isSuccess_51__Fun<T> : global::haxe.lang.Function {
		
		public Promise_Impl__isSuccess_51__Fun() : base(1, 0) {
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::tink.core.Outcome o = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.Outcome) (((object) (__fn_float1) )) )) : (((global::tink.core.Outcome) (__fn_dyn1) )) );
			return global::tink.core.OutcomeTools.isSuccess<T, object>(((global::tink.core.Outcome) (o) ));
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl__next_54__Fun<R, T> : global::haxe.lang.Function {
		
		public Promise_Impl__next_54__Fun(global::haxe.lang.Function f) : base(1, 0) {
			this.f = f;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::tink.core.Outcome o = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.Outcome) (((object) (__fn_float1) )) )) : (((global::tink.core.Outcome) (__fn_dyn1) )) );
				switch (o._hx_index) {
					case 0:
					{
						T d = global::haxe.lang.Runtime.genericCast<T>(( o as global::tink.core.Outcome_Success ).data);
						return ((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (this.f.__hx_invoke1_o(default(double), d)) ))) );
					}
					
					
					case 1:
					{
						global::tink.core.TypedError f1 = ((global::tink.core.TypedError) (( o as global::tink.core.Outcome_Failure ).failure) );
						return new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (global::tink.core.Outcome.Failure(f1)) ))) ));
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl__swap_60__Fun<R, T> : global::haxe.lang.Function {
		
		public Promise_Impl__swap_60__Fun(R v) : base(1, 0) {
			this.v = v;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			T _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<T>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<T>(__fn_dyn1)) );
			return this.v;
		}
		
		
		public R v;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl__swapError_63__Fun : global::haxe.lang.Function {
		
		public Promise_Impl__swapError_63__Fun(global::tink.core.TypedError e) : base(1, 0) {
			this.e = e;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::tink.core.TypedError _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.TypedError) (((object) (__fn_float1) )) )) : (((global::tink.core.TypedError) (__fn_dyn1) )) );
			return this.e;
		}
		
		
		public global::tink.core.TypedError e;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl__merge_66__Fun_0<T, R, A> : global::haxe.lang.Function {
		
		public Promise_Impl__merge_66__Fun_0(T t, global::haxe.lang.Function merger) : base(1, 0) {
			this.t = t;
			this.merger = merger;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			A a = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<A>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<A>(__fn_dyn1)) );
			return ((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (this.merger.__hx_invoke2_o(default(double), this.t, default(double), a)) ))) );
		}
		
		
		public T t;
		
		public global::haxe.lang.Function merger;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl__merge_66__Fun<A, R, T> : global::haxe.lang.Function {
		
		public Promise_Impl__merge_66__Fun(global::tink.core._Future.FutureObject<object> other, global::haxe.lang.Function merger) : base(1, 0) {
			this.other = other;
			this.merger = merger;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			T t = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<T>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<T>(__fn_dyn1)) );
			return global::tink.core._Promise.Promise_Impl_.next<object, A>(((global::tink.core._Future.FutureObject<object>) (this.other) ), ((global::haxe.lang.Function) (new global::tink.core._Promise.Promise_Impl__merge_66__Fun_0<T, R, A>(t, this.merger)) ), new global::haxe.lang.Null<bool>(false, true));
		}
		
		
		public global::tink.core._Future.FutureObject<object> other;
		
		public global::haxe.lang.Function merger;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl__and_69__Fun<B, A> : global::haxe.lang.Function {
		
		public Promise_Impl__and_69__Fun() : base(2, 0) {
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			B b1 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<B>(((object) (__fn_float2) ))) : (global::haxe.lang.Runtime.genericCast<B>(__fn_dyn2)) );
			A a1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<A>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<A>(__fn_dyn1)) );
			global::tink.core.MPair<A, B> this1 = new global::tink.core.MPair<A, B>(a1, b1);
			return ((global::tink.core._Future.FutureObject<object>) (new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (global::tink.core.Outcome.Success(((global::tink.core.MPair<A, B>) (this1) ))) ))) ))) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl__iterate_96__Fun<R> : global::haxe.lang.Function {
		
		public Promise_Impl__iterate_96__Fun(global::haxe.lang.Function[] next, global::haxe.lang.Function cb) : base(1, 0) {
			this.next = next;
			this.cb = cb;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::tink.core.Outcome o1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.Outcome) (((object) (__fn_float1) )) )) : (((global::tink.core.Outcome) (__fn_dyn1) )) );
				switch (o1._hx_index) {
					case 0:
					{
						switch (((global::haxe.ds.Option) (( o1 as global::tink.core.Outcome_Success ).data) )._hx_index) {
							case 0:
							{
								R ret = global::haxe.lang.Runtime.genericCast<R>(( ((global::haxe.ds.Option) (( o1 as global::tink.core.Outcome_Success ).data) ) as global::haxe.ds.Option_Some ).v);
								this.cb.__hx_invoke1_o(default(double), global::tink.core.Outcome.Success(ret));
								break;
							}
							
							
							case 1:
							{
								this.next[0].__hx_invoke0_o();
								break;
							}
							
							
						}
						
						break;
					}
					
					
					case 1:
					{
						global::tink.core.TypedError e = ((global::tink.core.TypedError) (( o1 as global::tink.core.Outcome_Failure ).failure) );
						this.cb.__hx_invoke1_o(default(double), global::tink.core.Outcome.Failure(e));
						break;
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public global::haxe.lang.Function[] next;
		
		public global::haxe.lang.Function cb;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl__iterate_94__Fun<R, A> : global::haxe.lang.Function {
		
		public Promise_Impl__iterate_94__Fun(global::haxe.lang.Function @yield, global::haxe.lang.Function[] next, global::haxe.lang.Function cb) : base(1, 0) {
			this.@yield = @yield;
			this.next = next;
			this.cb = cb;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::tink.core.Outcome o = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.Outcome) (((object) (__fn_float1) )) )) : (((global::tink.core.Outcome) (__fn_dyn1) )) );
				switch (o._hx_index) {
					case 0:
					{
						A v = global::haxe.lang.Runtime.genericCast<A>(( o as global::tink.core.Outcome_Success ).data);
						((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (this.@yield.__hx_invoke1_o(default(double), v)) ))) ).handle(new global::tink.core._Promise.Promise_Impl__iterate_96__Fun<R>(this.next, this.cb));
						break;
					}
					
					
					case 1:
					{
						global::tink.core.TypedError e1 = ((global::tink.core.TypedError) (( o as global::tink.core.Outcome_Failure ).failure) );
						this.cb.__hx_invoke1_o(default(double), global::tink.core.Outcome.Failure(e1));
						break;
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public global::haxe.lang.Function @yield;
		
		public global::haxe.lang.Function[] next;
		
		public global::haxe.lang.Function cb;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl__iterate_92__Fun<R, A> : global::haxe.lang.Function {
		
		public Promise_Impl__iterate_92__Fun(global::haxe.lang.Function @yield, global::haxe.lang.Function[] next, object iter, global::tink.core._Future.FutureObject<object> @finally, global::haxe.lang.Function cb) : base(0, 0) {
			this.@yield = @yield;
			this.next = next;
			this.iter = iter;
			this.@finally = @finally;
			this.cb = cb;
		}
		
		
		public override object __hx_invoke0_o() {
			if (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(this.iter, "hasNext", 407283053, null))) {
				((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (global::haxe.lang.Runtime.callField(this.iter, "next", 1224901875, null)) ))) ).handle(new global::tink.core._Promise.Promise_Impl__iterate_94__Fun<R, A>(this.@yield, this.next, this.cb));
			}
			else {
				((global::tink.core._Future.FutureObject<object>) (this.@finally) ).handle(this.cb);
			}
			
			return null;
		}
		
		
		public global::haxe.lang.Function @yield;
		
		public global::haxe.lang.Function[] next;
		
		public object iter;
		
		public global::tink.core._Future.FutureObject<object> @finally;
		
		public global::haxe.lang.Function cb;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl__iterate_90__Fun<A, R> : global::haxe.lang.Function {
		
		public Promise_Impl__iterate_90__Fun(global::haxe.lang.Function @yield, object promises, global::tink.core._Future.FutureObject<object> @finally) : base(1, 0) {
			this.@yield = @yield;
			this.promises = promises;
			this.@finally = @finally;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::haxe.lang.Function cb = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (((global::haxe.lang.Function) (__fn_dyn1) )) );
			object iter = ((object) (global::haxe.lang.Runtime.callField(this.promises, "iterator", 328878574, null)) );
			global::haxe.lang.Function[] next = new global::haxe.lang.Function[]{null};
			next[0] = new global::tink.core._Promise.Promise_Impl__iterate_92__Fun<R, A>(this.@yield, next, iter, this.@finally, cb);
			next[0].__hx_invoke0_o();
			return null;
		}
		
		
		public global::haxe.lang.Function @yield;
		
		public object promises;
		
		public global::tink.core._Future.FutureObject<object> @finally;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl__retry_150__Fun : global::haxe.lang.Function {
		
		public Promise_Impl__retry_150__Fun() : base(0, 1) {
		}
		
		
		public static global::tink.core._Promise.Promise_Impl__retry_150__Fun __hx_current;
		
		public override double __hx_invoke0_f() {
			unchecked {
				return ( global::Sys.time() * 1000 );
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl__retry_156__Fun<T> : global::haxe.lang.Function {
		
		public Promise_Impl__retry_156__Fun(int count, global::haxe.lang.Function[] attempt) : base(1, 0) {
			this.count = count;
			this.attempt = attempt;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::tink.core.TinkNoise _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.TinkNoise) (((object) (__fn_float1) )) )) : (((global::tink.core.TinkNoise) (__fn_dyn1) )) );
				return ((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (this.attempt[0].__hx_invoke1_o(((double) (( this.count + 1 )) ), global::haxe.lang.Runtime.undefined)) ))) );
			}
		}
		
		
		public int count;
		
		public global::haxe.lang.Function[] attempt;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl__retry_154__Fun<T> : global::haxe.lang.Function {
		
		public Promise_Impl__retry_154__Fun(double start, global::haxe.lang.Function stamp, global::haxe.lang.Function next, int count, global::haxe.lang.Function[] attempt) : base(1, 0) {
			this.start = start;
			this.stamp = stamp;
			this.next = next;
			this.count = count;
			this.attempt = attempt;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::tink.core.TypedError error = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.TypedError) (((object) (__fn_float1) )) )) : (((global::tink.core.TypedError) (__fn_dyn1) )) );
			double f1 = ( ((double) (this.stamp.__hx_invoke0_f()) ) - this.start );
			return global::tink.core._Promise.Promise_Impl_.next<object, object>(((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (this.next.__hx_invoke1_o(default(double), new global::haxe.lang.DynamicObject(new int[]{1932118984}, new object[]{error}, new int[]{815319309, 985700412}, new double[]{((double) (this.count) ), f1}))) ))) ), ((global::haxe.lang.Function) (new global::tink.core._Promise.Promise_Impl__retry_156__Fun<T>(this.count, this.attempt)) ), default(global::haxe.lang.Null<bool>));
		}
		
		
		public double start;
		
		public global::haxe.lang.Function stamp;
		
		public global::haxe.lang.Function next;
		
		public int count;
		
		public global::haxe.lang.Function[] attempt;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl__retry_153__Fun<T> : global::haxe.lang.Function {
		
		public Promise_Impl__retry_153__Fun(global::haxe.lang.Function f) : base(1, 0) {
			this.f = f;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::tink.core.Outcome o = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.Outcome) (((object) (__fn_float1) )) )) : (((global::tink.core.Outcome) (__fn_dyn1) )) );
				switch (o._hx_index) {
					case 0:
					{
						T d = global::haxe.lang.Runtime.genericCast<T>(( o as global::tink.core.Outcome_Success ).data);
						return ((global::tink.core._Future.FutureObject<object>) (new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (o) ))) ))) );
					}
					
					
					case 1:
					{
						global::tink.core.TypedError e = ((global::tink.core.TypedError) (( o as global::tink.core.Outcome_Failure ).failure) );
						return ((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (this.f.__hx_invoke1_o(default(double), e)) ))) );
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl__retry_152__Fun<T> : global::haxe.lang.Function {
		
		public Promise_Impl__retry_152__Fun(double start, global::haxe.lang.Function stamp, global::haxe.lang.Function next, global::haxe.lang.Function gen, global::haxe.lang.Function[] attempt) : base(1, 0) {
			this.start = start;
			this.stamp = stamp;
			this.next = next;
			this.gen = gen;
			this.attempt = attempt;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			int count = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
			global::haxe.lang.Function f = new global::tink.core._Promise.Promise_Impl__retry_154__Fun<T>(this.start, this.stamp, this.next, count, this.attempt);
			global::tink.core._Future.FutureObject<object> ret = ((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (this.gen.__hx_invoke0_o()) ))) ).flatMap<object>(((global::haxe.lang.Function) (new global::tink.core._Promise.Promise_Impl__retry_153__Fun<T>(f)) ));
			return ret.gather();
		}
		
		
		public double start;
		
		public global::haxe.lang.Function stamp;
		
		public global::haxe.lang.Function next;
		
		public global::haxe.lang.Function gen;
		
		public global::haxe.lang.Function[] attempt;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl__lazy_184__Fun<T> : global::haxe.lang.Function {
		
		public Promise_Impl__lazy_184__Fun(global::tink.core._Lazy.LazyObject<object> p) : base(1, 0) {
			this.p = p;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::haxe.lang.Function cb = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (((global::haxe.lang.Function) (__fn_dyn1) )) );
			((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (((global::tink.core._Lazy.LazyObject<object>) (this.p) ).@get()) ))) ).handle(cb);
			return null;
		}
		
		
		public global::tink.core._Lazy.LazyObject<object> p;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl__inParallel_199__Fun<T> : global::haxe.lang.Function {
		
		public Promise_Impl__inParallel_199__Fun(bool[] sync, global::tink.core._Callback.LinkObject[] links, global::haxe.lang.Function cb) : base(1, 0) {
			this.sync = sync;
			this.links = links;
			this.cb = cb;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::tink.core.Outcome o = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.Outcome) (((object) (__fn_float1) )) )) : (((global::tink.core.Outcome) (__fn_dyn1) )) );
			if (( this.links[0] == null )) {
				this.sync[0] = true;
			}
			else if (( ((global::tink.core._Callback.LinkObject) (this.links[0]) ) != null )) {
				((global::tink.core._Callback.LinkObject) (this.links[0]) ).cancel();
			}
			
			this.cb.__hx_invoke1_o(default(double), o);
			return null;
		}
		
		
		public bool[] sync;
		
		public global::tink.core._Callback.LinkObject[] links;
		
		public global::haxe.lang.Function cb;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl__inParallel_205__Fun<T> : global::haxe.lang.Function {
		
		public Promise_Impl__inParallel_205__Fun(int[] pending, global::haxe.lang.Function done) : base(1, 0) {
			this.pending = pending;
			this.done = done;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::tink.core.TypedError e = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.TypedError) (((object) (__fn_float1) )) )) : (((global::tink.core.TypedError) (__fn_dyn1) )) );
			this.pending[0] = 0;
			this.done.__hx_invoke1_o(default(double), global::tink.core.Outcome.Failure(e));
			return null;
		}
		
		
		public int[] pending;
		
		public global::haxe.lang.Function done;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl__inParallel_214__Fun<T> : global::haxe.lang.Function {
		
		public Promise_Impl__inParallel_214__Fun(global::Array<T> result, int[] pending, global::haxe.lang.Function[] next, object iter, global::haxe.lang.Function done) : base(2, 0) {
			this.result = result;
			this.pending = pending;
			this.next = next;
			this.iter = iter;
			this.done = done;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			T @value = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<T>(((object) (__fn_float2) ))) : (global::haxe.lang.Runtime.genericCast<T>(__fn_dyn2)) );
			int index = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
			this.result[index] = @value;
			if ((  -- this.pending[0] == 0 )) {
				this.done.__hx_invoke1_o(default(double), global::tink.core.Outcome.Success(this.result));
			}
			else if (( global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(this.iter, "hasNext", 407283053, null)) && ( this.pending[0] > 0 ) )) {
				this.next[0].__hx_invoke0_o();
			}
			
			return null;
		}
		
		
		public global::Array<T> result;
		
		public int[] pending;
		
		public global::haxe.lang.Function[] next;
		
		public object iter;
		
		public global::haxe.lang.Function done;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl__inParallel_224__Fun<T> : global::haxe.lang.Function {
		
		public Promise_Impl__inParallel_224__Fun(global::haxe.lang.Function @set, int index1, global::haxe.lang.Function fail) : base(1, 0) {
			this.@set = @set;
			this.index1 = index1;
			this.fail = fail;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::tink.core.Outcome o1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.Outcome) (((object) (__fn_float1) )) )) : (((global::tink.core.Outcome) (__fn_dyn1) )) );
				switch (o1._hx_index) {
					case 0:
					{
						T v = global::haxe.lang.Runtime.genericCast<T>(( o1 as global::tink.core.Outcome_Success ).data);
						this.@set.__hx_invoke2_o(((double) (this.index1) ), global::haxe.lang.Runtime.undefined, default(double), v);
						break;
					}
					
					
					case 1:
					{
						global::tink.core.TypedError e1 = ((global::tink.core.TypedError) (( o1 as global::tink.core.Outcome_Failure ).failure) );
						this.fail.__hx_invoke1_o(default(double), e1);
						break;
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public global::haxe.lang.Function @set;
		
		public int index1;
		
		public global::haxe.lang.Function fail;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl__inParallel_222__Fun<T> : global::haxe.lang.Function {
		
		public Promise_Impl__inParallel_222__Fun(global::haxe.lang.Function @set, global::Array<object> linkArray, object iter, int[] i, global::haxe.lang.Function fail) : base(0, 0) {
			this.@set = @set;
			this.linkArray = linkArray;
			this.iter = iter;
			this.i = i;
			this.fail = fail;
		}
		
		
		public override object __hx_invoke0_o() {
			int index1 = this.i[0]++;
			global::tink.core._Callback.LinkObject tmp = ((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (global::haxe.lang.Runtime.callField(this.iter, "next", 1224901875, null)) ))) ).handle(new global::tink.core._Promise.Promise_Impl__inParallel_224__Fun<T>(this.@set, index1, this.fail));
			this.linkArray.push(tmp);
			return null;
		}
		
		
		public global::haxe.lang.Function @set;
		
		public global::Array<object> linkArray;
		
		public object iter;
		
		public int[] i;
		
		public global::haxe.lang.Function fail;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl__inParallel_189__Fun<T> : global::haxe.lang.Function {
		
		public Promise_Impl__inParallel_189__Fun(global::haxe.lang.Null<int>[] concurrency1, global::Array<object> a) : base(1, 0) {
			this.concurrency1 = concurrency1;
			this.a = a;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::haxe.lang.Function cb = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (((global::haxe.lang.Function) (__fn_dyn1) )) );
				global::Array<T> result = new global::Array<T>(new T[]{});
				int[] pending = new int[]{this.a.length};
				global::tink.core._Callback.LinkObject[] links = new global::tink.core._Callback.LinkObject[]{null};
				global::Array<object> linkArray = new global::Array<object>(new object[]{});
				bool[] sync = new bool[]{false};
				int[] i = new int[]{0};
				object iter = ((object) (new global::_Array.ArrayIterator<object>(((global::Array<object>) (this.a) ))) );
				global::haxe.lang.Function[] next = new global::haxe.lang.Function[]{null};
				global::haxe.lang.Function done = new global::tink.core._Promise.Promise_Impl__inParallel_199__Fun<T>(sync, links, cb);
				global::haxe.lang.Function fail = new global::tink.core._Promise.Promise_Impl__inParallel_205__Fun<T>(pending, done);
				global::haxe.lang.Function @set = new global::tink.core._Promise.Promise_Impl__inParallel_214__Fun<T>(result, pending, next, iter, done);
				next[0] = new global::tink.core._Promise.Promise_Impl__inParallel_222__Fun<T>(@set, linkArray, iter, i, fail);
				do {
					bool __temp_boolv4 = global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(iter, "hasNext", 407283053, null));
					bool __temp_boolv3 = false;
					bool __temp_boolv2 = false;
					if (__temp_boolv4) {
						__temp_boolv3 = ( pending[0] > 0 );
						if (__temp_boolv3) {
							bool __temp_stmt6 =  ! (this.concurrency1[0].hasValue) ;
							bool __temp_boolv7 = false;
							if ( ! (__temp_stmt6) ) {
								int __temp_stmt8 = default(int);
								{
									int __temp_ret1 = (this.concurrency1[0]).@value;
									this.concurrency1[0] = new global::haxe.lang.Null<int>(( __temp_ret1 - 1 ), true);
									__temp_stmt8 = __temp_ret1;
								}
								
								__temp_boolv7 = ( __temp_stmt8 > 0 );
							}
							
							bool __temp_stmt5 = ( __temp_stmt6 || __temp_boolv7 );
							__temp_boolv2 = (__temp_stmt5);
						}
						
					}
					
					bool __temp_stmt1 = ( ( __temp_boolv4 && __temp_boolv3 ) && __temp_boolv2 );
					if (__temp_stmt1) {
						next[0].__hx_invoke0_o();
					}
					else {
						break;
					}
					
				}
				while (true);
				links[0] = global::tink.core._Callback.CallbackLink_Impl_.fromMany(linkArray);
				if (sync[0]) {
					if (( ((global::tink.core._Callback.LinkObject) (links[0]) ) != null )) {
						((global::tink.core._Callback.LinkObject) (links[0]) ).cancel();
					}
					
				}
				
				return null;
			}
		}
		
		
		public global::haxe.lang.Null<int>[] concurrency1;
		
		public global::Array<object> a;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl__inSequence_248__Fun<T> : global::haxe.lang.Function {
		
		public Promise_Impl__inSequence_248__Fun(T head) : base(1, 0) {
			this.head = head;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::Array<T> tail = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<T>) (global::Array<object>.__hx_cast<T>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<T>) (global::Array<object>.__hx_cast<T>(((global::Array) (__fn_dyn1) ))) )) );
			return ((global::tink.core._Future.FutureObject<object>) (new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (global::tink.core.Outcome.Success(new global::Array<T>(new T[]{this.head}).concat(tail))) ))) ))) );
		}
		
		
		public T head;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl__inSequence_247__Fun<T> : global::haxe.lang.Function {
		
		public Promise_Impl__inSequence_247__Fun(global::haxe.lang.Function[] loop, int index) : base(1, 0) {
			this.loop = loop;
			this.index = index;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				T head = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<T>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<T>(__fn_dyn1)) );
				return global::tink.core._Promise.Promise_Impl_.next<object, object>(((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (this.loop[0].__hx_invoke1_o(((double) (( this.index + 1 )) ), global::haxe.lang.Runtime.undefined)) ))) ), ((global::haxe.lang.Function) (new global::tink.core._Promise.Promise_Impl__inSequence_248__Fun<T>(head)) ), default(global::haxe.lang.Null<bool>));
			}
		}
		
		
		public global::haxe.lang.Function[] loop;
		
		public int index;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl__inSequence_242__Fun<T> : global::haxe.lang.Function {
		
		public Promise_Impl__inSequence_242__Fun(global::haxe.lang.Function[] loop, global::Array<object> a) : base(1, 0) {
			this.loop = loop;
			this.a = a;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			int index = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
			if (( index == this.a.length )) {
				return ((global::tink.core._Future.FutureObject<object>) (new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (global::tink.core.Outcome.Success(new global::Array<T>(new T[]{}))) ))) ))) );
			}
			else {
				return global::tink.core._Promise.Promise_Impl_.next<object, T>(((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (this.a[index]) ))) ), ((global::haxe.lang.Function) (new global::tink.core._Promise.Promise_Impl__inSequence_247__Fun<T>(this.loop, index)) ), default(global::haxe.lang.Null<bool>));
			}
			
		}
		
		
		public global::haxe.lang.Function[] loop;
		
		public global::Array<object> a;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl__cache_264__Fun<T> : global::haxe.lang.Function {
		
		public Promise_Impl__cache_264__Fun(bool[] sync, global::tink.core._Future.FutureObject<object>[] p) : base(1, 0) {
			this.sync = sync;
			this.p = p;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::tink.core.TinkNoise _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.TinkNoise) (((object) (__fn_float1) )) )) : (((global::tink.core.TinkNoise) (__fn_dyn1) )) );
			this.sync[0] = true;
			this.p[0] = null;
			return null;
		}
		
		
		public bool[] sync;
		
		public global::tink.core._Future.FutureObject<object>[] p;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl__cache_263__Fun<T> : global::haxe.lang.Function {
		
		public Promise_Impl__cache_263__Fun(bool[] sync, global::tink.core._Future.FutureObject<object>[] p) : base(1, 0) {
			this.sync = sync;
			this.p = p;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::tink.core.MPair<T, object> o = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.MPair<T, object>) (global::tink.core.MPair<object, object>.__hx_cast<T, object>(((global::tink.core.MPair) (((object) (__fn_float1) )) ))) )) : (((global::tink.core.MPair<T, object>) (global::tink.core.MPair<object, object>.__hx_cast<T, object>(((global::tink.core.MPair) (__fn_dyn1) ))) )) );
			((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (((global::tink.core.MPair<T, object>) (o) ).b) ))) ).handle(new global::tink.core._Promise.Promise_Impl__cache_264__Fun<T>(this.sync, this.p));
			return ((global::tink.core._Future.FutureObject<object>) (new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (global::tink.core.Outcome.Success(global::haxe.lang.Runtime.genericCast<T>(((global::tink.core.MPair<T, object>) (o) ).a))) ))) ))) );
		}
		
		
		public bool[] sync;
		
		public global::tink.core._Future.FutureObject<object>[] p;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl__cache_272__Fun<T> : global::haxe.lang.Function {
		
		public Promise_Impl__cache_272__Fun(global::tink.core._Future.FutureObject<object>[] p) : base(1, 0) {
			this.p = p;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::tink.core.Outcome o1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.Outcome) (((object) (__fn_float1) )) )) : (((global::tink.core.Outcome) (__fn_dyn1) )) );
			if ( ! (global::tink.core.OutcomeTools.isSuccess<T, object>(((global::tink.core.Outcome) (o1) ))) ) {
				this.p[0] = null;
			}
			
			return o1;
		}
		
		
		public global::tink.core._Future.FutureObject<object>[] p;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Promise_Impl__cache_259__Fun<T> : global::haxe.lang.Function {
		
		public Promise_Impl__cache_259__Fun(global::tink.core._Future.FutureObject<object>[] p, global::haxe.lang.Function gen) : base(0, 0) {
			this.p = p;
			this.gen = gen;
		}
		
		
		public override object __hx_invoke0_o() {
			global::tink.core._Future.FutureObject<object> ret = this.p[0];
			if (( ret == null )) {
				bool[] sync = new bool[]{false};
				ret = global::tink.core._Promise.Promise_Impl_.next<object, object>(((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (this.gen.__hx_invoke0_o()) ))) ), ((global::haxe.lang.Function) (new global::tink.core._Promise.Promise_Impl__cache_263__Fun<T>(sync, this.p)) ), default(global::haxe.lang.Null<bool>));
				if ( ! (sync[0]) ) {
					this.p[0] = ret;
				}
				
			}
			
			global::tink.core._Future.FutureObject<object> ret1 = ((global::tink.core._Future.FutureObject<object>) (ret) ).map<object>(((global::haxe.lang.Function) (new global::tink.core._Promise.Promise_Impl__cache_272__Fun<T>(this.p)) ));
			return ret1.gather();
		}
		
		
		public global::tink.core._Future.FutureObject<object>[] p;
		
		public global::haxe.lang.Function gen;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public sealed class Next_Impl_ {
		
		public static global::haxe.lang.Function ofSafe<In, Out>(global::haxe.lang.Function f) {
			return new global::tink.core._Promise.Next_Impl__ofSafe_296__Fun<Out, In>(f);
		}
		
		
		public static global::haxe.lang.Function ofSync<In, Out>(global::haxe.lang.Function f) {
			return new global::tink.core._Promise.Next_Impl__ofSync_299__Fun<Out, In>(f);
		}
		
		
		public static global::haxe.lang.Function ofSafeSync<In, Out>(global::haxe.lang.Function f) {
			return new global::tink.core._Promise.Next_Impl__ofSafeSync_302__Fun<Out, In>(f);
		}
		
		
		public static global::haxe.lang.Function _chain<A, B, C>(global::haxe.lang.Function a, global::haxe.lang.Function b) {
			return new global::tink.core._Promise.Next_Impl___chain_305__Fun<B, C, A>(b, a);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Next_Impl__ofSafe_296__Fun<Out, In> : global::haxe.lang.Function {
		
		public Next_Impl__ofSafe_296__Fun(global::haxe.lang.Function f) : base(1, 0) {
			this.f = f;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			In x = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<In>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<In>(__fn_dyn1)) );
			return ((global::tink.core._Future.FutureObject<object>) (new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((global::tink.core.Outcome) (this.f.__hx_invoke1_o(default(double), x)) ))) ))) );
		}
		
		
		public global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Next_Impl__ofSync_299__Fun<Out, In> : global::haxe.lang.Function {
		
		public Next_Impl__ofSync_299__Fun(global::haxe.lang.Function f) : base(1, 0) {
			this.f = f;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			In x = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<In>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<In>(__fn_dyn1)) );
			global::tink.core._Future.FutureObject<object> ret = ((global::tink.core._Future.FutureObject<Out>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<Out>(((global::tink.core._Future.FutureObject) (this.f.__hx_invoke1_o(default(double), x)) ))) ).map<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::tink.core.Outcome), "Success", 94326179)) ));
			return ret.gather();
		}
		
		
		public global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Next_Impl__ofSafeSync_302__Fun<Out, In> : global::haxe.lang.Function {
		
		public Next_Impl__ofSafeSync_302__Fun(global::haxe.lang.Function f) : base(1, 0) {
			this.f = f;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			In x = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<In>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<In>(__fn_dyn1)) );
			return ((global::tink.core._Future.FutureObject<object>) (new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (global::tink.core.Outcome.Success(global::haxe.lang.Runtime.genericCast<Out>(this.f.__hx_invoke1_o(default(double), x)))) ))) ))) );
		}
		
		
		public global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Next_Impl___chain_305__Fun<B, C, A> : global::haxe.lang.Function {
		
		public Next_Impl___chain_305__Fun(global::haxe.lang.Function b, global::haxe.lang.Function a) : base(1, 0) {
			this.b = b;
			this.a = a;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			A v = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<A>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<A>(__fn_dyn1)) );
			return global::tink.core._Promise.Promise_Impl_.next<object, B>(((global::tink.core._Future.FutureObject<object>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<object>(((global::tink.core._Future.FutureObject) (this.a.__hx_invoke1_o(default(double), v)) ))) ), ((global::haxe.lang.Function) (this.b) ), default(global::haxe.lang.Null<bool>));
		}
		
		
		public global::haxe.lang.Function b;
		
		public global::haxe.lang.Function a;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public sealed class Recover_Impl_ {
		
		public static global::haxe.lang.Function ofSync<T>(global::haxe.lang.Function f) {
			return new global::tink.core._Promise.Recover_Impl__ofSync_312__Fun<T>(f);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Recover_Impl__ofSync_312__Fun<T> : global::haxe.lang.Function {
		
		public Recover_Impl__ofSync_312__Fun(global::haxe.lang.Function f) : base(1, 0) {
			this.f = f;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::tink.core.TypedError e = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::tink.core.TypedError) (((object) (__fn_float1) )) )) : (((global::tink.core.TypedError) (__fn_dyn1) )) );
			return new global::tink.core._Future.SyncFuture<T>(((global::tink.core._Lazy.LazyObject<T>) (new global::tink.core._Lazy.LazyConst<T>(global::haxe.lang.Runtime.genericCast<T>(this.f.__hx_invoke1_o(default(double), e)))) ));
		}
		
		
		public global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public sealed class Combiner_Impl_ {
		
		public static global::haxe.lang.Function ofSafe<In1, In2, Out>(global::haxe.lang.Function f) {
			return new global::tink.core._Promise.Combiner_Impl__ofSafe_319__Fun<Out, In2, In1>(f);
		}
		
		
		public static global::haxe.lang.Function ofSync<In1, In2, Out>(global::haxe.lang.Function f) {
			return new global::tink.core._Promise.Combiner_Impl__ofSync_322__Fun<Out, In2, In1>(f);
		}
		
		
		public static global::haxe.lang.Function ofSafeSync<In1, In2, Out>(global::haxe.lang.Function f) {
			return new global::tink.core._Promise.Combiner_Impl__ofSafeSync_325__Fun<Out, In2, In1>(f);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Combiner_Impl__ofSafe_319__Fun<Out, In2, In1> : global::haxe.lang.Function {
		
		public Combiner_Impl__ofSafe_319__Fun(global::haxe.lang.Function f) : base(2, 0) {
			this.f = f;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			In2 x2 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<In2>(((object) (__fn_float2) ))) : (global::haxe.lang.Runtime.genericCast<In2>(__fn_dyn2)) );
			In1 x1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<In1>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<In1>(__fn_dyn1)) );
			return ((global::tink.core._Future.FutureObject<object>) (new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((global::tink.core.Outcome) (this.f.__hx_invoke2_o(default(double), x1, default(double), x2)) ))) ))) );
		}
		
		
		public global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Combiner_Impl__ofSync_322__Fun<Out, In2, In1> : global::haxe.lang.Function {
		
		public Combiner_Impl__ofSync_322__Fun(global::haxe.lang.Function f) : base(2, 0) {
			this.f = f;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			In2 x2 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<In2>(((object) (__fn_float2) ))) : (global::haxe.lang.Runtime.genericCast<In2>(__fn_dyn2)) );
			In1 x1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<In1>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<In1>(__fn_dyn1)) );
			global::tink.core._Future.FutureObject<object> ret = ((global::tink.core._Future.FutureObject<Out>) (global::tink.core._Future.FutureObject__Statics_.__hx_cast<Out>(((global::tink.core._Future.FutureObject) (this.f.__hx_invoke2_o(default(double), x1, default(double), x2)) ))) ).map<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::tink.core.Outcome), "Success", 94326179)) ));
			return ret.gather();
		}
		
		
		public global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public class Combiner_Impl__ofSafeSync_325__Fun<Out, In2, In1> : global::haxe.lang.Function {
		
		public Combiner_Impl__ofSafeSync_325__Fun(global::haxe.lang.Function f) : base(2, 0) {
			this.f = f;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			In2 x2 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<In2>(((object) (__fn_float2) ))) : (global::haxe.lang.Runtime.genericCast<In2>(__fn_dyn2)) );
			In1 x1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<In1>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<In1>(__fn_dyn1)) );
			return ((global::tink.core._Future.FutureObject<object>) (new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((object) (global::tink.core.Outcome.Success(global::haxe.lang.Runtime.genericCast<Out>(this.f.__hx_invoke2_o(default(double), x1, default(double), x2)))) ))) ))) );
		}
		
		
		public global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace tink.core._Promise {
	public sealed class PromiseTrigger_Impl_ {
		
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
		public static global::tink.core.FutureTrigger<object> _new<T>() {
			global::tink.core.FutureTrigger<object> this1 = new global::tink.core.FutureTrigger<object>();
			return ((global::tink.core.FutureTrigger<object>) (this1) );
		}
		
		
		public static bool resolve<T>(global::tink.core.FutureTrigger<object> this1, T v) {
			return this1.trigger(global::tink.core.Outcome.Success(v));
		}
		
		
		public static bool reject<T>(global::tink.core.FutureTrigger<object> this1, global::tink.core.TypedError e) {
			return this1.trigger(global::tink.core.Outcome.Failure(e));
		}
		
		
		public static global::tink.core._Future.FutureObject<object> asPromise<T>(global::tink.core.FutureTrigger<object> this1) {
			return ((global::tink.core._Future.FutureObject<object>) (this1) );
		}
		
		
	}
}


