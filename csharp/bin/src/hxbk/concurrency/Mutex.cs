// Generated by Haxe 4.0.0-rc.2+77068e10c

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hxbk.concurrency {
	public class Mutex : global::haxe.lang.HxObject {
		
		public Mutex(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Mutex() {
			global::hxbk.concurrency.Mutex.__hx_ctor_hxbk_concurrency_Mutex(this);
		}
		
		
		protected static void __hx_ctor_hxbk_concurrency_Mutex(global::hxbk.concurrency.Mutex __hx_this) {
			__hx_this.queue = new global::Array<object>(new object[]{});
		}
		
		
		public bool locked;
		
		public global::Array<object> queue;
		
		public virtual global::tink.core._Future.FutureObject<object> @lock(global::haxe.lang.Null<bool> urgent) {
			bool urgent1 = ( ( ! (urgent.hasValue) ) ? (false) : ((urgent).@value) );
			if (this.locked) {
				global::tink.core.FutureTrigger<object> trigger = new global::tink.core.FutureTrigger<object>();
				if (urgent1) {
					this.queue.insert(0, trigger);
				}
				else {
					this.queue.push(trigger);
				}
				
				return ((global::tink.core._Future.FutureObject<object>) (trigger) );
			}
			else {
				this.locked = true;
				return ((global::tink.core._Future.FutureObject<object>) (new global::tink.core._Future.SyncFuture<object>(((global::tink.core._Lazy.LazyObject<object>) (new global::tink.core._Lazy.LazyConst<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "unlock", 1703715524)) ))) ))) );
			}
			
		}
		
		
		public virtual void unlock() {
			unchecked {
				if (( this.queue.length != 0 )) {
					global::tink.core.FutureTrigger<object> next = ((global::tink.core.FutureTrigger<object>) (global::tink.core.FutureTrigger<object>.__hx_cast<object>(((global::tink.core.FutureTrigger) (this.queue.splice(0, 1)[0]) ))) );
					next.trigger(((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "unlock", 1703715524)) ));
				}
				else {
					this.locked = false;
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1575652753:
					{
						this.queue = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (@value) ))) );
						return @value;
					}
					
					
					case 1506215178:
					{
						this.locked = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1703715524:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "unlock", 1703715524)) );
					}
					
					
					case 1203215339:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "lock", 1203215339)) );
					}
					
					
					case 1575652753:
					{
						return this.queue;
					}
					
					
					case 1506215178:
					{
						return this.locked;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 1703715524:
					{
						this.unlock();
						break;
					}
					
					
					case 1203215339:
					{
						return this.@lock(global::haxe.lang.Null<object>.ofDynamic<bool>(dynargs[0]));
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("queue");
			baseArr.push("locked");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


