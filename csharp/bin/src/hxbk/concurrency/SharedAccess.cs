// Generated by Haxe 4.0.0-rc.2+77068e10c

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hxbk.concurrency {
	public class SharedAccess : global::haxe.lang.HxObject {
		
		static SharedAccess() {
			global::hxbk.concurrency.SharedAccess.accessLog = new global::haxe.ds.StringMap<object>();
		}
		
		
		public SharedAccess(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public SharedAccess() {
			global::hxbk.concurrency.SharedAccess.__hx_ctor_hxbk_concurrency_SharedAccess(this);
		}
		
		
		protected static void __hx_ctor_hxbk_concurrency_SharedAccess(global::hxbk.concurrency.SharedAccess __hx_this) {
		}
		
		
		public static global::haxe.ds.StringMap<object> accessLog;
		
		public static void print() {
			unchecked {
				global::haxe.Log.trace.__hx_invoke2_o(default(double), ((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<object, object>) (global::hxbk.concurrency.SharedAccess.accessLog) )) ))) ).toString(), default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"print", "hxbk.concurrency.SharedAccess", "src/hxbk/concurrency/SharedAccess.hx"}, new int[]{1981972957}, new double[]{((double) (8) )}));
			}
		}
		
		
		public static global::tink.core._Future.FutureObject<object> acquire(string resource) {
			if ( ! (((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<object, object>) (global::hxbk.concurrency.SharedAccess.accessLog) )) ))) ).exists(resource)) ) {
				((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<object, object>) (global::hxbk.concurrency.SharedAccess.accessLog) )) ))) ).@set(resource, new global::hxbk.concurrency.Mutex());
			}
			
			return ((global::hxbk.concurrency.Mutex) ((((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<object, object>) (global::hxbk.concurrency.SharedAccess.accessLog) )) ))) ).@get(resource)).@value) ).@lock(default(global::haxe.lang.Null<bool>));
		}
		
		
		public static bool locked(string resource) {
			if ( ! (((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<object, object>) (global::hxbk.concurrency.SharedAccess.accessLog) )) ))) ).exists(resource)) ) {
				return false;
			}
			
			return ((global::hxbk.concurrency.Mutex) ((((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<object, object>) (global::hxbk.concurrency.SharedAccess.accessLog) )) ))) ).@get(resource)).@value) ).locked;
		}
		
		
		public static void release(string resource) {
			if ( ! (((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<object, object>) (global::hxbk.concurrency.SharedAccess.accessLog) )) ))) ).exists(resource)) ) {
				return;
			}
			
			((global::hxbk.concurrency.Mutex) ((((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<object, object>) (global::hxbk.concurrency.SharedAccess.accessLog) )) ))) ).@get(resource)).@value) ).unlock();
		}
		
		
	}
}


